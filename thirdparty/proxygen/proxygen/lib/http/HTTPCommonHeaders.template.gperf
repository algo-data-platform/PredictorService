%{
// Copyright 2015-present Facebook.  All rights reserved.

#include "proxygen/lib/http/HTTPCommonHeaders.h"

#include <cstring>

#include <folly/String.h>

#include <glog/logging.h>

namespace proxygen {

%}

%language=C++
%compare-lengths
%ignore-case
%struct-type
%readonly-tables
%global-table
%enum
%define class-name HTTPCommonHeadersInternal

struct HTTPCommonHeaderName { const char* name; HTTPHeaderCode code; };





/* the following is a placeholder for the build script to generate a list
 * of enum values from the list in HTTPCommonHeaders.txt
 */
%%%%%




HTTPHeaderCode HTTPCommonHeaders::hash(const char* name, size_t len) {
  const HTTPCommonHeaderName* match =
    HTTPCommonHeadersInternal::in_word_set(name, len);
  return (match == nullptr) ? HTTP_HEADER_OTHER : match->code;
}

std::string* HTTPCommonHeaders::initHeaderNames(
    HTTPCommonHeaderTableType type) {
  auto headerNames = new std::string[HTTPCommonHeaders::num_header_codes];
  for (int j = MIN_HASH_VALUE; j <= MAX_HASH_VALUE; ++j) {
    uint8_t code = wordlist[j].code;
    const uint8_t OFFSET = 2; // first 2 values are reserved for special cases
    if (code >= OFFSET && code < TOTAL_KEYWORDS + OFFSET
                       && wordlist[j].name[0] != '\0') {
      DCHECK_EQ(headerNames[code], std::string());
      // this would mean a duplicate header code in the .gperf file
      headerNames[code] = wordlist[j].name;
      if (type == TABLE_LOWERCASE) {
        folly::toLowerAscii(const_cast<char*>(headerNames[code].data()),
                                              headerNames[code].size());
      }
    }
  }
  return headerNames;
}

const std::string* HTTPCommonHeaders::getPointerToCommonHeaderTable(
    HTTPCommonHeaderTableType type) {
  // The actual common header tables are static and initialized here in source
  // so as to prevent duplicate initializations that could occur through the
  // use of inline semantics or compilation unit referencing if defined in a
  // header
  switch(type) {
    case TABLE_CAMELCASE:
      static const std::string* camelcaseTable = initHeaderNames(type);
      return camelcaseTable;
    case TABLE_LOWERCASE:
      static const std::string* lowercaseTable = initHeaderNames(type);
      return lowercaseTable;
    default:
      // Controlled abort here so its clear from a crash stack this method
      // was called with a table type for which there is no current
      // implementation
      CHECK(false);
      return nullptr;
  }
}

} // proxygen
