/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "src/gen-cpp2/module_types.h"

#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/ProtocolReaderStructReadState.h>
#include <thrift/lib/cpp2/protocol/SimpleJSONProtocol.h>

namespace some { namespace valid { namespace ns {

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

}}} // some::valid::ns
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void Empty::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    default:
    {
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Empty::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Empty");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Empty::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Empty");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void ASimpleStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_boolField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->boolField);
    this->__isset.boolField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_boolField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ASimpleStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ASimpleStruct");
  if (this->boolField != 0) {
    xfer += prot_->serializedFieldSize("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->boolField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ASimpleStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ASimpleStruct");
  if (this->boolField != 0) {
    xfer += prot_->serializedFieldSize("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->boolField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ASimpleStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ASimpleStruct");
  if (this->boolField != 0) {
    xfer += prot_->writeFieldBegin("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->boolField);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void ASimpleStructNoexcept::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_boolField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->boolField);
    this->__isset.boolField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_boolField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ASimpleStructNoexcept::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ASimpleStructNoexcept");
  if (this->boolField != 0) {
    xfer += prot_->serializedFieldSize("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->boolField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ASimpleStructNoexcept::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ASimpleStructNoexcept");
  if (this->boolField != 0) {
    xfer += prot_->serializedFieldSize("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->boolField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ASimpleStructNoexcept::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ASimpleStructNoexcept");
  if (this->boolField != 0) {
    xfer += prot_->writeFieldBegin("boolField", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->boolField);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void MyStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_MyBinaryField3 = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_MyBoolField:
  {
    iprot->readBool(this->MyBoolField);
    this->__isset.MyBoolField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_MyIntField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->MyIntField);
    this->__isset.MyIntField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyStringField:
  {
    iprot->readString(this->MyStringField);
    this->__isset.MyStringField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyStringField2:
  {
    iprot->readString(this->MyStringField2);
    this->__isset.MyStringField2 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyBinaryField:
  {
    iprot->readBinary(this->MyBinaryField);
    this->__isset.MyBinaryField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyBinaryField2:
  {
    iprot->readBinary(this->MyBinaryField2);
    this->__isset.MyBinaryField2 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyBinaryField3:
  {
    iprot->readBinary(this->MyBinaryField3);
    isset_MyBinaryField3 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_MyBinaryListField4:
  {
    this->MyBinaryListField4 = std::vector<std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->MyBinaryListField4);
    this->__isset.MyBinaryListField4 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_MyMapEnumAndInt:
  {
    this->MyMapEnumAndInt = std::map< ::some::valid::ns::MyEnumA, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::some::valid::ns::MyEnumA, std::string>>::read(*iprot, this->MyMapEnumAndInt);
    this->__isset.MyMapEnumAndInt = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_MyBinaryField3) {
    TProtocolException::throwMissingRequiredField("MyBinaryField3", "MyStruct");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_MyBoolField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_MyIntField;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_MyStringField;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_MyStringField2;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_MyBinaryField;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_MyBinaryField2;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_MyBinaryField3;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_MyBinaryListField4;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_MyMapEnumAndInt;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->MyBoolField != 0) {
    xfer += prot_->serializedFieldSize("MyBoolField", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->MyBoolField);
  }
  if (this->MyIntField != 12LL) {
    xfer += prot_->serializedFieldSize("MyIntField", apache::thrift::protocol::T_I64, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyIntField);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField)) {
    xfer += prot_->serializedFieldSize("MyStringField", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->MyStringField);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField2)) {
    xfer += prot_->serializedFieldSize("MyStringField2", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->MyStringField2);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyBinaryField)) {
    xfer += prot_->serializedFieldSize("MyBinaryField", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeBinary(this->MyBinaryField);
  }
  if (this->__isset.MyBinaryField2) {
    xfer += prot_->serializedFieldSize("MyBinaryField2", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeBinary(this->MyBinaryField2);
  }
  xfer += prot_->serializedFieldSize("MyBinaryField3", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeBinary(this->MyBinaryField3);
  if (!this->MyBinaryListField4.empty()) {
    xfer += prot_->serializedFieldSize("MyBinaryListField4", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->MyBinaryListField4);
  }
  if (!this->MyMapEnumAndInt.empty()) {
    xfer += prot_->serializedFieldSize("MyMapEnumAndInt", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::some::valid::ns::MyEnumA, std::string>>::serializedSize<false>(*prot_, this->MyMapEnumAndInt);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->MyBoolField != 0) {
    xfer += prot_->serializedFieldSize("MyBoolField", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->MyBoolField);
  }
  if (this->MyIntField != 12LL) {
    xfer += prot_->serializedFieldSize("MyIntField", apache::thrift::protocol::T_I64, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyIntField);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField)) {
    xfer += prot_->serializedFieldSize("MyStringField", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->MyStringField);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField2)) {
    xfer += prot_->serializedFieldSize("MyStringField2", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->MyStringField2);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyBinaryField)) {
    xfer += prot_->serializedFieldSize("MyBinaryField", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeZCBinary(this->MyBinaryField);
  }
  if (this->__isset.MyBinaryField2) {
    xfer += prot_->serializedFieldSize("MyBinaryField2", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeZCBinary(this->MyBinaryField2);
  }
  xfer += prot_->serializedFieldSize("MyBinaryField3", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeZCBinary(this->MyBinaryField3);
  if (!this->MyBinaryListField4.empty()) {
    xfer += prot_->serializedFieldSize("MyBinaryListField4", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->MyBinaryListField4);
  }
  if (!this->MyMapEnumAndInt.empty()) {
    xfer += prot_->serializedFieldSize("MyMapEnumAndInt", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::some::valid::ns::MyEnumA, std::string>>::serializedSize<false>(*prot_, this->MyMapEnumAndInt);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStruct");
  if (this->MyBoolField != 0) {
    xfer += prot_->writeFieldBegin("MyBoolField", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->writeBool(this->MyBoolField);
    xfer += prot_->writeFieldEnd();
  }
  if (this->MyIntField != 12LL) {
    xfer += prot_->writeFieldBegin("MyIntField", apache::thrift::protocol::T_I64, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->MyIntField);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField)) {
    xfer += prot_->writeFieldBegin("MyStringField", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->MyStringField);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyStringField2)) {
    xfer += prot_->writeFieldBegin("MyStringField2", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->MyStringField2);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->MyBinaryField)) {
    xfer += prot_->writeFieldBegin("MyBinaryField", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeBinary(this->MyBinaryField);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.MyBinaryField2) {
    xfer += prot_->writeFieldBegin("MyBinaryField2", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->writeBinary(this->MyBinaryField2);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("MyBinaryField3", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeBinary(this->MyBinaryField3);
  xfer += prot_->writeFieldEnd();
  if (!this->MyBinaryListField4.empty()) {
    xfer += prot_->writeFieldBegin("MyBinaryListField4", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->MyBinaryListField4);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->MyMapEnumAndInt.empty()) {
    xfer += prot_->writeFieldBegin("MyMapEnumAndInt", apache::thrift::protocol::T_MAP, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>, std::map< ::some::valid::ns::MyEnumA, std::string>>::write(*prot_, this->MyMapEnumAndInt);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void SimpleUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 7:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I64) {
          this->set_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->mutable_intValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 2:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_stringValue();
          iprot->readString(this->mutable_stringValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

}
template <class Protocol_>
uint32_t SimpleUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SimpleUnion");
  switch(this->getType()) {
    case SimpleUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case SimpleUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case SimpleUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SimpleUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SimpleUnion");
  switch(this->getType()) {
    case SimpleUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case SimpleUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case SimpleUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SimpleUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SimpleUnion");
  switch(this->getType()) {
    case SimpleUnion::Type::intValue:
    {
      xfer += prot_->writeFieldBegin("intValue", apache::thrift::protocol::T_I64, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_intValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case SimpleUnion::Type::stringValue:
    {
      xfer += prot_->writeFieldBegin("stringValue", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->writeString(this->get_stringValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case SimpleUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template<typename... T, typename > std::unique_ptr< ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field(T&&... t) {
  __clear();
  type_ = Type::ref_field;
  ::new (std::addressof(value_.ref_field)) std::unique_ptr< ::some::valid::ns::MyStruct>(new std::unique_ptr< ::some::valid::ns::MyStruct>::element_type(std::forward<T>(t)...));
  return value_.ref_field;
}

template<typename... T, typename > std::shared_ptr<const  ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field2(T&&... t) {
  __clear();
  type_ = Type::ref_field2;
  ::new (std::addressof(value_.ref_field2)) std::shared_ptr<const  ::some::valid::ns::MyStruct>(new std::shared_ptr<const  ::some::valid::ns::MyStruct>::element_type(std::forward<T>(t)...));
  return value_.ref_field2;
}

template <class Protocol_>
void ComplexUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_req_intValue = false;
  bool isset_req_stringValue = false;
  bool isset_req_union_map = false;
  bool isset_req_a_union = false;
  bool isset_MyBinaryField3 = false;

  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I64) {
          this->set_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->mutable_intValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 101:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I64) {
          this->set_req_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->mutable_req_intValue());
          isset_req_intValue = true;
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 201:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I64) {
          this->set_opt_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->mutable_opt_intValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 3:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_stringValue();
          iprot->readString(this->mutable_stringValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 103:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_req_stringValue();
          iprot->readString(this->mutable_req_stringValue());
          isset_req_stringValue = true;
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 203:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_opt_stringValue();
          iprot->readString(this->mutable_opt_stringValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 4:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I16) {
          this->set_intValue2();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::read(*iprot, this->mutable_intValue2());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 6:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I32) {
          this->set_intValue3();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->mutable_intValue3());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 7:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_DOUBLE) {
          this->set_doubelValue();
          iprot->readDouble(this->mutable_doubelValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 8:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_BOOL) {
          this->set_boolValue();
          iprot->readBool(this->mutable_boolValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 9:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_union_list();
          this->mutable_union_list() = std::vector<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->mutable_union_list());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 10:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_SET) {
          this->set_union_set();
          this->mutable_union_set() = std::set<int64_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->mutable_union_set());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 11:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_MAP) {
          this->set_union_map();
          this->mutable_union_map() = std::map<std::string, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->mutable_union_map());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 111:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_MAP) {
          this->set_req_union_map();
          this->mutable_req_union_map() = std::map<std::string, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->mutable_req_union_map());
          isset_req_union_map = true;
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 211:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_MAP) {
          this->set_opt_union_map();
          this->mutable_opt_union_map() = std::map<std::string, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->mutable_opt_union_map());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 12:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I32) {
          this->set_enum_field();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->mutable_enum_field());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 13:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_enum_container();
          this->mutable_enum_container() = std::vector< ::some::valid::ns::MyEnumA>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::read(*iprot, this->mutable_enum_container());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 14:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_a_struct();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, &this->mutable_a_struct());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 15:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_SET) {
          this->set_a_set_struct();
          this->mutable_a_set_struct() = std::set< ::some::valid::ns::MyStruct>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::read(*iprot, this->mutable_a_set_struct());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 16:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_a_union();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::read(iprot, &this->mutable_a_union());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 116:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_req_a_union();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::read(iprot, &this->mutable_req_a_union());
          isset_req_a_union = true;
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 216:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_opt_a_union();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::read(iprot, &this->mutable_opt_a_union());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 17:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_a_union_list();
          this->mutable_a_union_list() = std::vector< ::some::valid::ns::SimpleUnion>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::read(*iprot, this->mutable_a_union_list());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 18:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_SET) {
          this->set_a_union_typedef();
          this->mutable_a_union_typedef() =  ::some::valid::ns::unionTypeDef();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::read(*iprot, this->mutable_a_union_typedef());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 19:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_a_union_typedef_list();
          this->mutable_a_union_typedef_list() = std::vector< ::some::valid::ns::unionTypeDef>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::read(*iprot, this->mutable_a_union_typedef_list());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 20:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_MyBinaryField();
          iprot->readBinary(this->mutable_MyBinaryField());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 21:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_MyBinaryField2();
          iprot->readBinary(this->mutable_MyBinaryField2());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 22:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_MyBinaryField3();
          iprot->readBinary(this->mutable_MyBinaryField3());
          isset_MyBinaryField3 = true;
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 23:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_MyBinaryListField4();
          this->mutable_MyBinaryListField4() = std::vector<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->mutable_MyBinaryListField4());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 24:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_ref_field();
          std::unique_ptr< ::some::valid::ns::MyStruct> ptr = std::make_unique< ::some::valid::ns::MyStruct>();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, ptr.get());
          this->mutable_ref_field() = std::move(ptr);
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 25:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_ref_field2();
          std::unique_ptr< ::some::valid::ns::MyStruct> ptr = std::make_unique< ::some::valid::ns::MyStruct>();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, ptr.get());
          this->mutable_ref_field2() = std::move(ptr);
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 26:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRUCT) {
          this->set_excp_field();
          ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AnException>::read(iprot, &this->mutable_excp_field());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

  if (!isset_req_intValue) {
    TProtocolException::throwMissingRequiredField("req_intValue", "ComplexUnion");
  }
  if (!isset_req_stringValue) {
    TProtocolException::throwMissingRequiredField("req_stringValue", "ComplexUnion");
  }
  if (!isset_req_union_map) {
    TProtocolException::throwMissingRequiredField("req_union_map", "ComplexUnion");
  }
  if (!isset_req_a_union) {
    TProtocolException::throwMissingRequiredField("req_a_union", "ComplexUnion");
  }
  if (!isset_MyBinaryField3) {
    TProtocolException::throwMissingRequiredField("MyBinaryField3", "ComplexUnion");
  }
}
template <class Protocol_>
uint32_t ComplexUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case ComplexUnion::Type::req_intValue:
    {
      xfer += prot_->serializedFieldSize("req_intValue", apache::thrift::protocol::T_I64, 101);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_req_intValue());
      break;
    }
    if (this->__isset.opt_intValue) {
      xfer += prot_->serializedFieldSize("opt_intValue", apache::thrift::protocol::T_I64, 201);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_opt_intValue());
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case ComplexUnion::Type::req_stringValue:
    {
      xfer += prot_->serializedFieldSize("req_stringValue", apache::thrift::protocol::T_STRING, 103);
      xfer += prot_->serializedSizeString(this->get_req_stringValue());
      break;
    }
    if (this->__isset.opt_stringValue) {
      xfer += prot_->serializedFieldSize("opt_stringValue", apache::thrift::protocol::T_STRING, 203);
      xfer += prot_->serializedSizeString(this->get_opt_stringValue());
    }
    case ComplexUnion::Type::intValue2:
    {
      xfer += prot_->serializedFieldSize("intValue2", apache::thrift::protocol::T_I16, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->get_intValue2());
      break;
    }
    case ComplexUnion::Type::intValue3:
    {
      xfer += prot_->serializedFieldSize("intValue3", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_intValue3());
      break;
    }
    case ComplexUnion::Type::doubelValue:
    {
      xfer += prot_->serializedFieldSize("doubelValue", apache::thrift::protocol::T_DOUBLE, 7);
      xfer += prot_->serializedSizeDouble(this->get_doubelValue());
      break;
    }
    case ComplexUnion::Type::boolValue:
    {
      xfer += prot_->serializedFieldSize("boolValue", apache::thrift::protocol::T_BOOL, 8);
      xfer += prot_->serializedSizeBool(this->get_boolValue());
      break;
    }
    case ComplexUnion::Type::union_list:
    {
      xfer += prot_->serializedFieldSize("union_list", apache::thrift::protocol::T_LIST, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->get_union_list());
      break;
    }
    case ComplexUnion::Type::union_set:
    {
      xfer += prot_->serializedFieldSize("union_set", apache::thrift::protocol::T_SET, 10);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->get_union_set());
      break;
    }
    case ComplexUnion::Type::union_map:
    {
      xfer += prot_->serializedFieldSize("union_map", apache::thrift::protocol::T_MAP, 11);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_union_map());
      break;
    }
    case ComplexUnion::Type::req_union_map:
    {
      xfer += prot_->serializedFieldSize("req_union_map", apache::thrift::protocol::T_MAP, 111);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_req_union_map());
      break;
    }
    if (this->__isset.opt_union_map) {
      xfer += prot_->serializedFieldSize("opt_union_map", apache::thrift::protocol::T_MAP, 211);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_opt_union_map());
    }
    case ComplexUnion::Type::enum_field:
    {
      xfer += prot_->serializedFieldSize("enum_field", apache::thrift::protocol::T_I32, 12);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->get_enum_field());
      break;
    }
    case ComplexUnion::Type::enum_container:
    {
      xfer += prot_->serializedFieldSize("enum_container", apache::thrift::protocol::T_LIST, 13);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->get_enum_container());
      break;
    }
    case ComplexUnion::Type::a_struct:
    {
      xfer += prot_->serializedFieldSize("a_struct", apache::thrift::protocol::T_STRUCT, 14);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, &this->get_a_struct());
      break;
    }
    case ComplexUnion::Type::a_set_struct:
    {
      xfer += prot_->serializedFieldSize("a_set_struct", apache::thrift::protocol::T_SET, 15);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->get_a_set_struct());
      break;
    }
    case ComplexUnion::Type::a_union:
    {
      xfer += prot_->serializedFieldSize("a_union", apache::thrift::protocol::T_STRUCT, 16);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSize(prot_, &this->get_a_union());
      break;
    }
    case ComplexUnion::Type::req_a_union:
    {
      xfer += prot_->serializedFieldSize("req_a_union", apache::thrift::protocol::T_STRUCT, 116);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSize(prot_, &this->get_req_a_union());
      break;
    }
    if (this->__isset.opt_a_union) {
      xfer += prot_->serializedFieldSize("opt_a_union", apache::thrift::protocol::T_STRUCT, 216);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSize(prot_, &this->get_opt_a_union());
    }
    case ComplexUnion::Type::a_union_list:
    {
      xfer += prot_->serializedFieldSize("a_union_list", apache::thrift::protocol::T_LIST, 17);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::serializedSize<false>(*prot_, this->get_a_union_list());
      break;
    }
    case ComplexUnion::Type::a_union_typedef:
    {
      xfer += prot_->serializedFieldSize("a_union_typedef", apache::thrift::protocol::T_SET, 18);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->get_a_union_typedef());
      break;
    }
    case ComplexUnion::Type::a_union_typedef_list:
    {
      xfer += prot_->serializedFieldSize("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->get_a_union_typedef_list());
      break;
    }
    case ComplexUnion::Type::MyBinaryField:
    {
      xfer += prot_->serializedFieldSize("MyBinaryField", apache::thrift::protocol::T_STRING, 20);
      xfer += prot_->serializedSizeBinary(this->get_MyBinaryField());
      break;
    }
    if (this->__isset.MyBinaryField2) {
      xfer += prot_->serializedFieldSize("MyBinaryField2", apache::thrift::protocol::T_STRING, 21);
      xfer += prot_->serializedSizeBinary(this->get_MyBinaryField2());
    }
    case ComplexUnion::Type::MyBinaryField3:
    {
      xfer += prot_->serializedFieldSize("MyBinaryField3", apache::thrift::protocol::T_STRING, 22);
      xfer += prot_->serializedSizeBinary(this->get_MyBinaryField3());
      break;
    }
    case ComplexUnion::Type::MyBinaryListField4:
    {
      xfer += prot_->serializedFieldSize("MyBinaryListField4", apache::thrift::protocol::T_LIST, 23);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->get_MyBinaryListField4());
      break;
    }
    case ComplexUnion::Type::ref_field:
    {
      xfer += prot_->serializedFieldSize("ref_field", apache::thrift::protocol::T_STRUCT, 24);
      if (this->get_ref_field()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, this->get_ref_field().get());
      }
      else {
        xfer += prot_->serializedStructSize("MyStruct");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case ComplexUnion::Type::ref_field2:
    {
      xfer += prot_->serializedFieldSize("ref_field2", apache::thrift::protocol::T_STRUCT, 25);
      if (this->get_ref_field2()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, this->get_ref_field2().get());
      }
      else {
        xfer += prot_->serializedStructSize("MyStruct");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case ComplexUnion::Type::excp_field:
    {
      xfer += prot_->serializedFieldSize("excp_field", apache::thrift::protocol::T_STRUCT, 26);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AnException>::serializedSize(prot_, &this->get_excp_field());
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case ComplexUnion::Type::req_intValue:
    {
      xfer += prot_->serializedFieldSize("req_intValue", apache::thrift::protocol::T_I64, 101);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_req_intValue());
      break;
    }
    if (this->__isset.opt_intValue) {
      xfer += prot_->serializedFieldSize("opt_intValue", apache::thrift::protocol::T_I64, 201);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_opt_intValue());
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case ComplexUnion::Type::req_stringValue:
    {
      xfer += prot_->serializedFieldSize("req_stringValue", apache::thrift::protocol::T_STRING, 103);
      xfer += prot_->serializedSizeString(this->get_req_stringValue());
      break;
    }
    if (this->__isset.opt_stringValue) {
      xfer += prot_->serializedFieldSize("opt_stringValue", apache::thrift::protocol::T_STRING, 203);
      xfer += prot_->serializedSizeString(this->get_opt_stringValue());
    }
    case ComplexUnion::Type::intValue2:
    {
      xfer += prot_->serializedFieldSize("intValue2", apache::thrift::protocol::T_I16, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->get_intValue2());
      break;
    }
    case ComplexUnion::Type::intValue3:
    {
      xfer += prot_->serializedFieldSize("intValue3", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_intValue3());
      break;
    }
    case ComplexUnion::Type::doubelValue:
    {
      xfer += prot_->serializedFieldSize("doubelValue", apache::thrift::protocol::T_DOUBLE, 7);
      xfer += prot_->serializedSizeDouble(this->get_doubelValue());
      break;
    }
    case ComplexUnion::Type::boolValue:
    {
      xfer += prot_->serializedFieldSize("boolValue", apache::thrift::protocol::T_BOOL, 8);
      xfer += prot_->serializedSizeBool(this->get_boolValue());
      break;
    }
    case ComplexUnion::Type::union_list:
    {
      xfer += prot_->serializedFieldSize("union_list", apache::thrift::protocol::T_LIST, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->get_union_list());
      break;
    }
    case ComplexUnion::Type::union_set:
    {
      xfer += prot_->serializedFieldSize("union_set", apache::thrift::protocol::T_SET, 10);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->get_union_set());
      break;
    }
    case ComplexUnion::Type::union_map:
    {
      xfer += prot_->serializedFieldSize("union_map", apache::thrift::protocol::T_MAP, 11);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_union_map());
      break;
    }
    case ComplexUnion::Type::req_union_map:
    {
      xfer += prot_->serializedFieldSize("req_union_map", apache::thrift::protocol::T_MAP, 111);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_req_union_map());
      break;
    }
    if (this->__isset.opt_union_map) {
      xfer += prot_->serializedFieldSize("opt_union_map", apache::thrift::protocol::T_MAP, 211);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->get_opt_union_map());
    }
    case ComplexUnion::Type::enum_field:
    {
      xfer += prot_->serializedFieldSize("enum_field", apache::thrift::protocol::T_I32, 12);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->get_enum_field());
      break;
    }
    case ComplexUnion::Type::enum_container:
    {
      xfer += prot_->serializedFieldSize("enum_container", apache::thrift::protocol::T_LIST, 13);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->get_enum_container());
      break;
    }
    case ComplexUnion::Type::a_struct:
    {
      xfer += prot_->serializedFieldSize("a_struct", apache::thrift::protocol::T_STRUCT, 14);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, &this->get_a_struct());
      break;
    }
    case ComplexUnion::Type::a_set_struct:
    {
      xfer += prot_->serializedFieldSize("a_set_struct", apache::thrift::protocol::T_SET, 15);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->get_a_set_struct());
      break;
    }
    case ComplexUnion::Type::a_union:
    {
      xfer += prot_->serializedFieldSize("a_union", apache::thrift::protocol::T_STRUCT, 16);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSizeZC(prot_, &this->get_a_union());
      break;
    }
    case ComplexUnion::Type::req_a_union:
    {
      xfer += prot_->serializedFieldSize("req_a_union", apache::thrift::protocol::T_STRUCT, 116);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSizeZC(prot_, &this->get_req_a_union());
      break;
    }
    if (this->__isset.opt_a_union) {
      xfer += prot_->serializedFieldSize("opt_a_union", apache::thrift::protocol::T_STRUCT, 216);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::serializedSizeZC(prot_, &this->get_opt_a_union());
    }
    case ComplexUnion::Type::a_union_list:
    {
      xfer += prot_->serializedFieldSize("a_union_list", apache::thrift::protocol::T_LIST, 17);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::serializedSize<false>(*prot_, this->get_a_union_list());
      break;
    }
    case ComplexUnion::Type::a_union_typedef:
    {
      xfer += prot_->serializedFieldSize("a_union_typedef", apache::thrift::protocol::T_SET, 18);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->get_a_union_typedef());
      break;
    }
    case ComplexUnion::Type::a_union_typedef_list:
    {
      xfer += prot_->serializedFieldSize("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->get_a_union_typedef_list());
      break;
    }
    case ComplexUnion::Type::MyBinaryField:
    {
      xfer += prot_->serializedFieldSize("MyBinaryField", apache::thrift::protocol::T_STRING, 20);
      xfer += prot_->serializedSizeZCBinary(this->get_MyBinaryField());
      break;
    }
    if (this->__isset.MyBinaryField2) {
      xfer += prot_->serializedFieldSize("MyBinaryField2", apache::thrift::protocol::T_STRING, 21);
      xfer += prot_->serializedSizeZCBinary(this->get_MyBinaryField2());
    }
    case ComplexUnion::Type::MyBinaryField3:
    {
      xfer += prot_->serializedFieldSize("MyBinaryField3", apache::thrift::protocol::T_STRING, 22);
      xfer += prot_->serializedSizeZCBinary(this->get_MyBinaryField3());
      break;
    }
    case ComplexUnion::Type::MyBinaryListField4:
    {
      xfer += prot_->serializedFieldSize("MyBinaryListField4", apache::thrift::protocol::T_LIST, 23);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->get_MyBinaryListField4());
      break;
    }
    case ComplexUnion::Type::ref_field:
    {
      xfer += prot_->serializedFieldSize("ref_field", apache::thrift::protocol::T_STRUCT, 24);
      if (this->get_ref_field()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, this->get_ref_field().get());
      }
      else {
        xfer += prot_->serializedStructSize("MyStruct");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case ComplexUnion::Type::ref_field2:
    {
      xfer += prot_->serializedFieldSize("ref_field2", apache::thrift::protocol::T_STRUCT, 25);
      if (this->get_ref_field2()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, this->get_ref_field2().get());
      }
      else {
        xfer += prot_->serializedStructSize("MyStruct");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case ComplexUnion::Type::excp_field:
    {
      xfer += prot_->serializedFieldSize("excp_field", apache::thrift::protocol::T_STRUCT, 26);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AnException>::serializedSizeZC(prot_, &this->get_excp_field());
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->writeFieldBegin("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_intValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::req_intValue:
    {
      xfer += prot_->writeFieldBegin("req_intValue", apache::thrift::protocol::T_I64, 101);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_req_intValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    if (this->__isset.opt_intValue) {
      xfer += prot_->writeFieldBegin("opt_intValue", apache::thrift::protocol::T_I64, 201);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_opt_intValue());
      xfer += prot_->writeFieldEnd();
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->writeFieldBegin("stringValue", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_stringValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::req_stringValue:
    {
      xfer += prot_->writeFieldBegin("req_stringValue", apache::thrift::protocol::T_STRING, 103);
      xfer += prot_->writeString(this->get_req_stringValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    if (this->__isset.opt_stringValue) {
      xfer += prot_->writeFieldBegin("opt_stringValue", apache::thrift::protocol::T_STRING, 203);
      xfer += prot_->writeString(this->get_opt_stringValue());
      xfer += prot_->writeFieldEnd();
    }
    case ComplexUnion::Type::intValue2:
    {
      xfer += prot_->writeFieldBegin("intValue2", apache::thrift::protocol::T_I16, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->get_intValue2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::intValue3:
    {
      xfer += prot_->writeFieldBegin("intValue3", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->get_intValue3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::doubelValue:
    {
      xfer += prot_->writeFieldBegin("doubelValue", apache::thrift::protocol::T_DOUBLE, 7);
      xfer += prot_->writeDouble(this->get_doubelValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::boolValue:
    {
      xfer += prot_->writeFieldBegin("boolValue", apache::thrift::protocol::T_BOOL, 8);
      xfer += prot_->writeBool(this->get_boolValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::union_list:
    {
      xfer += prot_->writeFieldBegin("union_list", apache::thrift::protocol::T_LIST, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->get_union_list());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::union_set:
    {
      xfer += prot_->writeFieldBegin("union_set", apache::thrift::protocol::T_SET, 10);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->get_union_set());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::union_map:
    {
      xfer += prot_->writeFieldBegin("union_map", apache::thrift::protocol::T_MAP, 11);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->get_union_map());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::req_union_map:
    {
      xfer += prot_->writeFieldBegin("req_union_map", apache::thrift::protocol::T_MAP, 111);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->get_req_union_map());
      xfer += prot_->writeFieldEnd();
      break;
    }
    if (this->__isset.opt_union_map) {
      xfer += prot_->writeFieldBegin("opt_union_map", apache::thrift::protocol::T_MAP, 211);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->get_opt_union_map());
      xfer += prot_->writeFieldEnd();
    }
    case ComplexUnion::Type::enum_field:
    {
      xfer += prot_->writeFieldBegin("enum_field", apache::thrift::protocol::T_I32, 12);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->get_enum_field());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::enum_container:
    {
      xfer += prot_->writeFieldBegin("enum_container", apache::thrift::protocol::T_LIST, 13);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::write(*prot_, this->get_enum_container());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::a_struct:
    {
      xfer += prot_->writeFieldBegin("a_struct", apache::thrift::protocol::T_STRUCT, 14);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, &this->get_a_struct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::a_set_struct:
    {
      xfer += prot_->writeFieldBegin("a_set_struct", apache::thrift::protocol::T_SET, 15);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::write(*prot_, this->get_a_set_struct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::a_union:
    {
      xfer += prot_->writeFieldBegin("a_union", apache::thrift::protocol::T_STRUCT, 16);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::write(prot_, &this->get_a_union());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::req_a_union:
    {
      xfer += prot_->writeFieldBegin("req_a_union", apache::thrift::protocol::T_STRUCT, 116);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::write(prot_, &this->get_req_a_union());
      xfer += prot_->writeFieldEnd();
      break;
    }
    if (this->__isset.opt_a_union) {
      xfer += prot_->writeFieldBegin("opt_a_union", apache::thrift::protocol::T_STRUCT, 216);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::SimpleUnion>::write(prot_, &this->get_opt_a_union());
      xfer += prot_->writeFieldEnd();
    }
    case ComplexUnion::Type::a_union_list:
    {
      xfer += prot_->writeFieldBegin("a_union_list", apache::thrift::protocol::T_LIST, 17);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::write(*prot_, this->get_a_union_list());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::a_union_typedef:
    {
      xfer += prot_->writeFieldBegin("a_union_typedef", apache::thrift::protocol::T_SET, 18);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::write(*prot_, this->get_a_union_typedef());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::a_union_typedef_list:
    {
      xfer += prot_->writeFieldBegin("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::write(*prot_, this->get_a_union_typedef_list());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::MyBinaryField:
    {
      xfer += prot_->writeFieldBegin("MyBinaryField", apache::thrift::protocol::T_STRING, 20);
      xfer += prot_->writeBinary(this->get_MyBinaryField());
      xfer += prot_->writeFieldEnd();
      break;
    }
    if (this->__isset.MyBinaryField2) {
      xfer += prot_->writeFieldBegin("MyBinaryField2", apache::thrift::protocol::T_STRING, 21);
      xfer += prot_->writeBinary(this->get_MyBinaryField2());
      xfer += prot_->writeFieldEnd();
    }
    case ComplexUnion::Type::MyBinaryField3:
    {
      xfer += prot_->writeFieldBegin("MyBinaryField3", apache::thrift::protocol::T_STRING, 22);
      xfer += prot_->writeBinary(this->get_MyBinaryField3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::MyBinaryListField4:
    {
      xfer += prot_->writeFieldBegin("MyBinaryListField4", apache::thrift::protocol::T_LIST, 23);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->get_MyBinaryListField4());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::ref_field:
    {
      xfer += prot_->writeFieldBegin("ref_field", apache::thrift::protocol::T_STRUCT, 24);
      if (this->get_ref_field()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, this->get_ref_field().get());
      }
      else {
        xfer += prot_->writeStructBegin("MyStruct");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::ref_field2:
    {
      xfer += prot_->writeFieldBegin("ref_field2", apache::thrift::protocol::T_STRUCT, 25);
      if (this->get_ref_field2()) {
        xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, this->get_ref_field2().get());
      }
      else {
        xfer += prot_->writeStructBegin("MyStruct");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::excp_field:
    {
      xfer += prot_->writeFieldBegin("excp_field", apache::thrift::protocol::T_STRUCT, 26);
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AnException>::write(prot_, &this->get_excp_field());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void AnException::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_req_code = false;
  bool isset_req_message = false;
  bool isset_req_exception_map = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_code:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->code);
    this->__isset.code = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          101,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_req_code:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->req_code);
    isset_req_code = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          101,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message2:
  {
    iprot->readString(this->message2);
    this->__isset.message2 = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          102,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_req_message:
  {
    iprot->readString(this->req_message);
    isset_req_message = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          102,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_exception_list:
  {
    this->exception_list = std::vector<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->exception_list);
    this->__isset.exception_list = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_exception_set:
  {
    this->exception_set = std::set<int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->exception_set);
    this->__isset.exception_set = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_exception_map:
  {
    this->exception_map = std::map<std::string, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->exception_map);
    this->__isset.exception_map = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          105,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_req_exception_map:
  {
    this->req_exception_map = std::map<std::string, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->req_exception_map);
    isset_req_exception_map = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          105,
          6,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_enum_field:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->enum_field);
    this->__isset.enum_field = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_enum_container:
  {
    this->enum_container = std::vector< ::some::valid::ns::MyEnumA>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::read(*iprot, this->enum_container);
    this->__isset.enum_container = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_a_struct:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, &this->a_struct);
    this->__isset.a_struct = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_a_set_struct:
  {
    this->a_set_struct = std::set< ::some::valid::ns::MyStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::read(*iprot, this->a_set_struct);
    this->__isset.a_set_struct = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_a_union_list:
  {
    this->a_union_list = std::vector< ::some::valid::ns::SimpleUnion>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::read(*iprot, this->a_union_list);
    this->__isset.a_union_list = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_union_typedef:
  {
    this->union_typedef =  ::some::valid::ns::unionTypeDef();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::read(*iprot, this->union_typedef);
    this->__isset.union_typedef = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          19,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_a_union_typedef_list:
  {
    this->a_union_typedef_list = std::vector< ::some::valid::ns::unionTypeDef>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::read(*iprot, this->a_union_typedef_list);
    this->__isset.a_union_typedef_list = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          19,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_req_code) {
    TProtocolException::throwMissingRequiredField("req_code", "AnException");
  }
  if (!isset_req_message) {
    TProtocolException::throwMissingRequiredField("req_message", "AnException");
  }
  if (!isset_req_exception_map) {
    TProtocolException::throwMissingRequiredField("req_exception_map", "AnException");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_code;
      } else {
        goto _skip;
      }
    }
    case 101:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_req_code;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_message2;
      } else {
        goto _skip;
      }
    }
    case 102:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_req_message;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_exception_list;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_exception_set;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_exception_map;
      } else {
        goto _skip;
      }
    }
    case 105:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_req_exception_map;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_enum_field;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_enum_container;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_a_struct;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_a_set_struct;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_a_union_list;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_union_typedef;
      } else {
        goto _skip;
      }
    }
    case 19:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_a_union_typedef_list;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AnException::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnException");
  if (this->code != 0) {
    xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->code);
  }
  xfer += prot_->serializedFieldSize("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->req_code);
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message2)) {
    xfer += prot_->serializedFieldSize("message2", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message2);
  }
  xfer += prot_->serializedFieldSize("req_message", apache::thrift::protocol::T_STRING, 102);
  xfer += prot_->serializedSizeString(this->req_message);
  if (!this->exception_list.empty()) {
    xfer += prot_->serializedFieldSize("exception_list", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->exception_list);
  }
  if (!this->exception_set.empty()) {
    xfer += prot_->serializedFieldSize("exception_set", apache::thrift::protocol::T_SET, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->exception_set);
  }
  if (!this->exception_map.empty()) {
    xfer += prot_->serializedFieldSize("exception_map", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->exception_map);
  }
  xfer += prot_->serializedFieldSize("req_exception_map", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->req_exception_map);
  if (this->enum_field != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->serializedFieldSize("enum_field", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->enum_field);
  }
  if (!this->enum_container.empty()) {
    xfer += prot_->serializedFieldSize("enum_container", apache::thrift::protocol::T_LIST, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->enum_container);
  }
  xfer += prot_->serializedFieldSize("a_struct", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, &this->a_struct);
  if (!this->a_set_struct.empty()) {
    xfer += prot_->serializedFieldSize("a_set_struct", apache::thrift::protocol::T_SET, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->a_set_struct);
  }
  if (!this->a_union_list.empty()) {
    xfer += prot_->serializedFieldSize("a_union_list", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::serializedSize<false>(*prot_, this->a_union_list);
  }
  if (!this->union_typedef.empty()) {
    xfer += prot_->serializedFieldSize("union_typedef", apache::thrift::protocol::T_SET, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->union_typedef);
  }
  if (!this->a_union_typedef_list.empty()) {
    xfer += prot_->serializedFieldSize("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->a_union_typedef_list);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnException::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnException");
  if (this->code != 0) {
    xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->code);
  }
  xfer += prot_->serializedFieldSize("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->req_code);
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message2)) {
    xfer += prot_->serializedFieldSize("message2", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message2);
  }
  xfer += prot_->serializedFieldSize("req_message", apache::thrift::protocol::T_STRING, 102);
  xfer += prot_->serializedSizeString(this->req_message);
  if (!this->exception_list.empty()) {
    xfer += prot_->serializedFieldSize("exception_list", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->exception_list);
  }
  if (!this->exception_set.empty()) {
    xfer += prot_->serializedFieldSize("exception_set", apache::thrift::protocol::T_SET, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->exception_set);
  }
  if (!this->exception_map.empty()) {
    xfer += prot_->serializedFieldSize("exception_map", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->exception_map);
  }
  xfer += prot_->serializedFieldSize("req_exception_map", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->req_exception_map);
  if (this->enum_field != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->serializedFieldSize("enum_field", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->enum_field);
  }
  if (!this->enum_container.empty()) {
    xfer += prot_->serializedFieldSize("enum_container", apache::thrift::protocol::T_LIST, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->enum_container);
  }
  xfer += prot_->serializedFieldSize("a_struct", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, &this->a_struct);
  if (!this->a_set_struct.empty()) {
    xfer += prot_->serializedFieldSize("a_set_struct", apache::thrift::protocol::T_SET, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->a_set_struct);
  }
  if (!this->a_union_list.empty()) {
    xfer += prot_->serializedFieldSize("a_union_list", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::serializedSize<false>(*prot_, this->a_union_list);
  }
  if (!this->union_typedef.empty()) {
    xfer += prot_->serializedFieldSize("union_typedef", apache::thrift::protocol::T_SET, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->union_typedef);
  }
  if (!this->a_union_typedef_list.empty()) {
    xfer += prot_->serializedFieldSize("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->a_union_typedef_list);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AnException");
  if (this->code != 0) {
    xfer += prot_->writeFieldBegin("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->code);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->req_code);
  xfer += prot_->writeFieldEnd();
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message2)) {
    xfer += prot_->writeFieldBegin("message2", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message2);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_message", apache::thrift::protocol::T_STRING, 102);
  xfer += prot_->writeString(this->req_message);
  xfer += prot_->writeFieldEnd();
  if (!this->exception_list.empty()) {
    xfer += prot_->writeFieldBegin("exception_list", apache::thrift::protocol::T_LIST, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->exception_list);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->exception_set.empty()) {
    xfer += prot_->writeFieldBegin("exception_set", apache::thrift::protocol::T_SET, 4);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->exception_set);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->exception_map.empty()) {
    xfer += prot_->writeFieldBegin("exception_map", apache::thrift::protocol::T_MAP, 5);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->exception_map);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_exception_map", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->req_exception_map);
  xfer += prot_->writeFieldEnd();
  if (this->enum_field != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->writeFieldBegin("enum_field", apache::thrift::protocol::T_I32, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->enum_field);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->enum_container.empty()) {
    xfer += prot_->writeFieldBegin("enum_container", apache::thrift::protocol::T_LIST, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::write(*prot_, this->enum_container);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("a_struct", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, &this->a_struct);
  xfer += prot_->writeFieldEnd();
  if (!this->a_set_struct.empty()) {
    xfer += prot_->writeFieldBegin("a_set_struct", apache::thrift::protocol::T_SET, 9);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::write(*prot_, this->a_set_struct);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->a_union_list.empty()) {
    xfer += prot_->writeFieldBegin("a_union_list", apache::thrift::protocol::T_LIST, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::SimpleUnion>>::write(*prot_, this->a_union_list);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->union_typedef.empty()) {
    xfer += prot_->writeFieldBegin("union_typedef", apache::thrift::protocol::T_SET, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::write(*prot_, this->union_typedef);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->a_union_typedef_list.empty()) {
    xfer += prot_->writeFieldBegin("a_union_typedef_list", apache::thrift::protocol::T_LIST, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::write(*prot_, this->a_union_typedef_list);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void AnotherException::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_req_code = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_code:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->code);
    this->__isset.code = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          101,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_req_code:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::read(*iprot, this->req_code);
    isset_req_code = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          101,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    iprot->readString(this->message);
    this->__isset.message = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_req_code) {
    TProtocolException::throwMissingRequiredField("req_code", "AnotherException");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_code;
      } else {
        goto _skip;
      }
    }
    case 101:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_req_code;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AnotherException::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnotherException");
  if (this->code != 0) {
    xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->code);
  }
  xfer += prot_->serializedFieldSize("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->req_code);
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message)) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnotherException::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnotherException");
  if (this->code != 0) {
    xfer += prot_->serializedFieldSize("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->code);
  }
  xfer += prot_->serializedFieldSize("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->req_code);
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message)) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnotherException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AnotherException");
  if (this->code != 0) {
    xfer += prot_->writeFieldBegin("code", apache::thrift::protocol::T_I32, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->code);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_code", apache::thrift::protocol::T_I32, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->req_code);
  xfer += prot_->writeFieldEnd();
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->message)) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void containerStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_req_fieldA = false;
  bool isset_req_fieldB = false;
  bool isset_req_fieldC = false;
  bool isset_req_fieldE = false;
  bool isset_req_fieldR = false;
  bool isset_req_fieldV = false;
  bool isset_req_fieldX = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_fieldA:
  {
    iprot->readBool(this->fieldA);
    this->__isset.fieldA = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          101,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_req_fieldA:
  {
    iprot->readBool(this->req_fieldA);
    isset_req_fieldA = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          101,
          201,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_opt_fieldA:
  {
    iprot->readBool(this->opt_fieldA);
    this->__isset.opt_fieldA = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          201,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldB:
  {
    this->fieldB = std::map<std::string, bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->fieldB);
    this->__isset.fieldB = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          102,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_req_fieldB:
  {
    this->req_fieldB = std::map<std::string, bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->req_fieldB);
    isset_req_fieldB = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          102,
          202,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_opt_fieldB:
  {
    this->opt_fieldB = std::map<std::string, bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->opt_fieldB);
    this->__isset.opt_fieldB = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          202,
          3,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_fieldC:
  {
    this->fieldC = std::set<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->fieldC);
    this->__isset.fieldC = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          103,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_req_fieldC:
  {
    this->req_fieldC = std::set<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->req_fieldC);
    isset_req_fieldC = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          103,
          203,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_opt_fieldC:
  {
    this->opt_fieldC = std::set<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->opt_fieldC);
    this->__isset.opt_fieldC = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          203,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_fieldD:
  {
    iprot->readString(this->fieldD);
    this->__isset.fieldD = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_fieldE:
  {
    iprot->readString(this->fieldE);
    this->__isset.fieldE = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          105,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_req_fieldE:
  {
    iprot->readString(this->req_fieldE);
    isset_req_fieldE = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          105,
          205,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_opt_fieldE:
  {
    iprot->readString(this->opt_fieldE);
    this->__isset.opt_fieldE = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          205,
          6,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldF:
  {
    this->fieldF = std::vector<std::vector<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::read(*iprot, this->fieldF);
    this->__isset.fieldF = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldG:
  {
    this->fieldG = std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>>, std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>>::read(*iprot, this->fieldG);
    this->__isset.fieldG = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldH:
  {
    this->fieldH = std::vector<std::set<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::read(*iprot, this->fieldH);
    this->__isset.fieldH = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_fieldI:
  {
    iprot->readBool(this->fieldI);
    this->__isset.fieldI = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldJ:
  {
    this->fieldJ = std::map<std::string, std::vector<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::read(*iprot, this->fieldJ);
    this->__isset.fieldJ = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldK:
  {
    this->fieldK = std::vector<std::vector<std::vector<std::vector<int32_t>>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>>, std::vector<std::vector<std::vector<std::vector<int32_t>>>>>::read(*iprot, this->fieldK);
    this->__isset.fieldK = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_fieldL:
  {
    this->fieldL = std::set<std::set<std::set<bool>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<bool>>>>::read(*iprot, this->fieldL);
    this->__isset.fieldL = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldM:
  {
    this->fieldM = std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>>::read(*iprot, this->fieldM);
    this->__isset.fieldM = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldN:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::simpleTypeDef>::read(*iprot, this->fieldN);
    this->__isset.fieldN = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldO:
  {
    this->fieldO =  ::some::valid::ns::complexStructTypeDef();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,  ::some::valid::ns::complexStructTypeDef>::read(*iprot, this->fieldO);
    this->__isset.fieldO = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldP:
  {
    this->fieldP = std::vector< ::some::valid::ns::mostComplexTypeDef>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>>>, std::vector< ::some::valid::ns::mostComplexTypeDef>>::read(*iprot, this->fieldP);
    this->__isset.fieldP = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldQ:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->fieldQ);
    this->__isset.fieldQ = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldR:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->fieldR);
    this->__isset.fieldR = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          118,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_req_fieldR:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->req_fieldR);
    isset_req_fieldR = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          118,
          218,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_opt_fieldR:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->opt_fieldR);
    this->__isset.opt_fieldR = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          218,
          19,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldS:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::read(*iprot, this->fieldS);
    this->__isset.fieldS = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          19,
          21,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldT:
  {
    this->fieldT = std::vector< ::some::valid::ns::MyEnumA>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::read(*iprot, this->fieldT);
    this->__isset.fieldT = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          21,
          22,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldU:
  {
    this->fieldU = std::vector< ::some::valid::ns::MyEnumA>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::read(*iprot, this->fieldU);
    this->__isset.fieldU = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          22,
          23,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_fieldV:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, &this->fieldV);
    this->__isset.fieldV = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          23,
          123,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_fieldV:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, &this->req_fieldV);
    isset_req_fieldV = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          123,
          223,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_fieldV:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::read(iprot, &this->opt_fieldV);
    this->__isset.opt_fieldV = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          223,
          24,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_fieldW:
  {
    this->fieldW = std::set< ::some::valid::ns::MyStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::read(*iprot, this->fieldW);
    this->__isset.fieldW = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          24,
          25,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_fieldX:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::read(iprot, &this->fieldX);
    this->__isset.fieldX = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          25,
          125,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_fieldX:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::read(iprot, &this->req_fieldX);
    isset_req_fieldX = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          125,
          225,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_fieldX:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::read(iprot, &this->opt_fieldX);
    this->__isset.opt_fieldX = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          225,
          26,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldY:
  {
    this->fieldY = std::vector< ::some::valid::ns::ComplexUnion>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::ComplexUnion>>::read(*iprot, this->fieldY);
    this->__isset.fieldY = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          26,
          27,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_fieldZ:
  {
    this->fieldZ =  ::some::valid::ns::unionTypeDef();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::read(*iprot, this->fieldZ);
    this->__isset.fieldZ = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          27,
          28,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_fieldAA:
  {
    this->fieldAA = std::vector< ::some::valid::ns::unionTypeDef>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::read(*iprot, this->fieldAA);
    this->__isset.fieldAA = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          28,
          29,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldAB:
  {
    this->fieldAB = std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>, ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>>::read(*iprot, this->fieldAB);
    this->__isset.fieldAB = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          29,
          30,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldAC:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumB>::read(*iprot, this->fieldAC);
    this->__isset.fieldAC = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          30,
          31,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_fieldAD:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::a::different::ns::AnEnum>::read(*iprot, this->fieldAD);
    this->__isset.fieldAD = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          31,
          32,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_fieldAE:
  {
    this->fieldAE = std::map<std::string, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->fieldAE);
    this->__isset.fieldAE = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          32,
          33,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_fieldSD:
  {
    iprot->readString(this->fieldSD.value);
    this->__isset.fieldSD = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          33,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_req_fieldA) {
    TProtocolException::throwMissingRequiredField("req_fieldA", "containerStruct");
  }
  if (!isset_req_fieldB) {
    TProtocolException::throwMissingRequiredField("req_fieldB", "containerStruct");
  }
  if (!isset_req_fieldC) {
    TProtocolException::throwMissingRequiredField("req_fieldC", "containerStruct");
  }
  if (!isset_req_fieldE) {
    TProtocolException::throwMissingRequiredField("req_fieldE", "containerStruct");
  }
  if (!isset_req_fieldR) {
    TProtocolException::throwMissingRequiredField("req_fieldR", "containerStruct");
  }
  if (!isset_req_fieldV) {
    TProtocolException::throwMissingRequiredField("req_fieldV", "containerStruct");
  }
  if (!isset_req_fieldX) {
    TProtocolException::throwMissingRequiredField("req_fieldX", "containerStruct");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_fieldA;
      } else {
        goto _skip;
      }
    }
    case 101:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_req_fieldA;
      } else {
        goto _skip;
      }
    }
    case 201:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_opt_fieldA;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldB;
      } else {
        goto _skip;
      }
    }
    case 102:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_req_fieldB;
      } else {
        goto _skip;
      }
    }
    case 202:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_opt_fieldB;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_fieldC;
      } else {
        goto _skip;
      }
    }
    case 103:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_req_fieldC;
      } else {
        goto _skip;
      }
    }
    case 203:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_opt_fieldC;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_fieldD;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_fieldE;
      } else {
        goto _skip;
      }
    }
    case 105:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_req_fieldE;
      } else {
        goto _skip;
      }
    }
    case 205:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_opt_fieldE;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldF;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldG;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldH;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_BOOL)) {
        goto _readField_fieldI;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldJ;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldK;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_fieldL;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldM;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldN;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldO;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldP;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldQ;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldR;
      } else {
        goto _skip;
      }
    }
    case 118:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_req_fieldR;
      } else {
        goto _skip;
      }
    }
    case 218:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_opt_fieldR;
      } else {
        goto _skip;
      }
    }
    case 19:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldS;
      } else {
        goto _skip;
      }
    }
    case 21:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldT;
      } else {
        goto _skip;
      }
    }
    case 22:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldU;
      } else {
        goto _skip;
      }
    }
    case 23:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_fieldV;
      } else {
        goto _skip;
      }
    }
    case 123:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_fieldV;
      } else {
        goto _skip;
      }
    }
    case 223:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_fieldV;
      } else {
        goto _skip;
      }
    }
    case 24:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_fieldW;
      } else {
        goto _skip;
      }
    }
    case 25:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_fieldX;
      } else {
        goto _skip;
      }
    }
    case 125:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_fieldX;
      } else {
        goto _skip;
      }
    }
    case 225:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_fieldX;
      } else {
        goto _skip;
      }
    }
    case 26:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldY;
      } else {
        goto _skip;
      }
    }
    case 27:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_fieldZ;
      } else {
        goto _skip;
      }
    }
    case 28:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_fieldAA;
      } else {
        goto _skip;
      }
    }
    case 29:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldAB;
      } else {
        goto _skip;
      }
    }
    case 30:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldAC;
      } else {
        goto _skip;
      }
    }
    case 31:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_fieldAD;
      } else {
        goto _skip;
      }
    }
    case 32:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_fieldAE;
      } else {
        goto _skip;
      }
    }
    case 33:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_fieldSD;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t containerStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("containerStruct");
  if (this->fieldA != 0) {
    xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->fieldA);
  }
  xfer += prot_->serializedFieldSize("req_fieldA", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->serializedSizeBool(this->req_fieldA);
  if (this->__isset.opt_fieldA) {
    xfer += prot_->serializedFieldSize("opt_fieldA", apache::thrift::protocol::T_BOOL, 201);
    xfer += prot_->serializedSizeBool(this->opt_fieldA);
  }
  if (!this->fieldB.empty()) {
    xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_MAP, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->fieldB);
  }
  xfer += prot_->serializedFieldSize("req_fieldB", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->req_fieldB);
  if (this->__isset.opt_fieldB) {
    xfer += prot_->serializedFieldSize("opt_fieldB", apache::thrift::protocol::T_MAP, 202);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->opt_fieldB);
  }
  if (!this->fieldC.empty()) {
    xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_SET, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->fieldC);
  }
  xfer += prot_->serializedFieldSize("req_fieldC", apache::thrift::protocol::T_SET, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->req_fieldC);
  if (this->__isset.opt_fieldC) {
    xfer += prot_->serializedFieldSize("opt_fieldC", apache::thrift::protocol::T_SET, 203);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->opt_fieldC);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldD)) {
    xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->fieldD);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldE)) {
    xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->fieldE);
  }
  xfer += prot_->serializedFieldSize("req_fieldE", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->req_fieldE);
  if (this->__isset.opt_fieldE) {
    xfer += prot_->serializedFieldSize("opt_fieldE", apache::thrift::protocol::T_STRING, 205);
    xfer += prot_->serializedSizeString(this->opt_fieldE);
  }
  if (!this->fieldF.empty()) {
    xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_LIST, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->fieldF);
  }
  if (!this->fieldG.empty()) {
    xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>>, std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>>::serializedSize<false>(*prot_, this->fieldG);
  }
  if (!this->fieldH.empty()) {
    xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::serializedSize<false>(*prot_, this->fieldH);
  }
  if (this->fieldI != true) {
    xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_BOOL, 9);
    xfer += prot_->serializedSizeBool(this->fieldI);
  }
  if (!this->fieldJ.empty()) {
    xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_MAP, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->fieldJ);
  }
  if (!this->fieldK.empty()) {
    xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>>, std::vector<std::vector<std::vector<std::vector<int32_t>>>>>::serializedSize<false>(*prot_, this->fieldK);
  }
  if (!this->fieldL.empty()) {
    xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_SET, 12);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<bool>>>>::serializedSize<false>(*prot_, this->fieldL);
  }
  if (!this->fieldM.empty()) {
    xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>>::serializedSize<false>(*prot_, this->fieldM);
  }
  if (this->fieldN != 0) {
    xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_I32, 14);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::simpleTypeDef>::serializedSize<false>(*prot_, this->fieldN);
  }
  if (!this->fieldO.empty()) {
    xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_LIST, 15);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,  ::some::valid::ns::complexStructTypeDef>::serializedSize<false>(*prot_, this->fieldO);
  }
  if (!this->fieldP.empty()) {
    xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_LIST, 16);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>>>, std::vector< ::some::valid::ns::mostComplexTypeDef>>::serializedSize<false>(*prot_, this->fieldP);
  }
  if (this->fieldQ != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_I32, 17);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldQ);
  }
  if (this->fieldR !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldR);
  }
  xfer += prot_->serializedFieldSize("req_fieldR", apache::thrift::protocol::T_I32, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->req_fieldR);
  if (this->__isset.opt_fieldR) {
    xfer += prot_->serializedFieldSize("opt_fieldR", apache::thrift::protocol::T_I32, 218);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->opt_fieldR);
  }
  if (this->fieldS !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->serializedFieldSize("fieldS", apache::thrift::protocol::T_I32, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldS);
  }
  if (!this->fieldT.empty()) {
    xfer += prot_->serializedFieldSize("fieldT", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->fieldT);
  }
  if (!this->fieldU.empty()) {
    xfer += prot_->serializedFieldSize("fieldU", apache::thrift::protocol::T_LIST, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->fieldU);
  }
  xfer += prot_->serializedFieldSize("fieldV", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, &this->fieldV);
  xfer += prot_->serializedFieldSize("req_fieldV", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, &this->req_fieldV);
  if (this->__isset.opt_fieldV) {
    xfer += prot_->serializedFieldSize("opt_fieldV", apache::thrift::protocol::T_STRUCT, 223);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSize(prot_, &this->opt_fieldV);
  }
  if (!this->fieldW.empty()) {
    xfer += prot_->serializedFieldSize("fieldW", apache::thrift::protocol::T_SET, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->fieldW);
  }
  xfer += prot_->serializedFieldSize("fieldX", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSize(prot_, &this->fieldX);
  xfer += prot_->serializedFieldSize("req_fieldX", apache::thrift::protocol::T_STRUCT, 125);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSize(prot_, &this->req_fieldX);
  if (this->__isset.opt_fieldX) {
    xfer += prot_->serializedFieldSize("opt_fieldX", apache::thrift::protocol::T_STRUCT, 225);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSize(prot_, &this->opt_fieldX);
  }
  if (!this->fieldY.empty()) {
    xfer += prot_->serializedFieldSize("fieldY", apache::thrift::protocol::T_LIST, 26);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::ComplexUnion>>::serializedSize<false>(*prot_, this->fieldY);
  }
  if (!this->fieldZ.empty()) {
    xfer += prot_->serializedFieldSize("fieldZ", apache::thrift::protocol::T_SET, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->fieldZ);
  }
  if (!this->fieldAA.empty()) {
    xfer += prot_->serializedFieldSize("fieldAA", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->fieldAA);
  }
  if (!this->fieldAB.empty()) {
    xfer += prot_->serializedFieldSize("fieldAB", apache::thrift::protocol::T_MAP, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>, ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>>::serializedSize<false>(*prot_, this->fieldAB);
  }
  if (this->fieldAC !=  ::some::valid::ns::MyEnumB::AField) {
    xfer += prot_->serializedFieldSize("fieldAC", apache::thrift::protocol::T_I32, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumB>::serializedSize<false>(*prot_, this->fieldAC);
  }
  if (this->fieldAD != static_cast< ::a::different::ns::AnEnum>(0)) {
    xfer += prot_->serializedFieldSize("fieldAD", apache::thrift::protocol::T_I32, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::a::different::ns::AnEnum>::serializedSize<false>(*prot_, this->fieldAD);
  }
  if (!this->fieldAE.empty()) {
    xfer += prot_->serializedFieldSize("fieldAE", apache::thrift::protocol::T_MAP, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->fieldAE);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldSD)) {
    xfer += prot_->serializedFieldSize("fieldSD", apache::thrift::protocol::T_STRING, 33);
    xfer += prot_->serializedSizeString(this->fieldSD.value);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t containerStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("containerStruct");
  if (this->fieldA != 0) {
    xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->fieldA);
  }
  xfer += prot_->serializedFieldSize("req_fieldA", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->serializedSizeBool(this->req_fieldA);
  if (this->__isset.opt_fieldA) {
    xfer += prot_->serializedFieldSize("opt_fieldA", apache::thrift::protocol::T_BOOL, 201);
    xfer += prot_->serializedSizeBool(this->opt_fieldA);
  }
  if (!this->fieldB.empty()) {
    xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_MAP, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->fieldB);
  }
  xfer += prot_->serializedFieldSize("req_fieldB", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->req_fieldB);
  if (this->__isset.opt_fieldB) {
    xfer += prot_->serializedFieldSize("opt_fieldB", apache::thrift::protocol::T_MAP, 202);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->opt_fieldB);
  }
  if (!this->fieldC.empty()) {
    xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_SET, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->fieldC);
  }
  xfer += prot_->serializedFieldSize("req_fieldC", apache::thrift::protocol::T_SET, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->req_fieldC);
  if (this->__isset.opt_fieldC) {
    xfer += prot_->serializedFieldSize("opt_fieldC", apache::thrift::protocol::T_SET, 203);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->opt_fieldC);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldD)) {
    xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->fieldD);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldE)) {
    xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->fieldE);
  }
  xfer += prot_->serializedFieldSize("req_fieldE", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->req_fieldE);
  if (this->__isset.opt_fieldE) {
    xfer += prot_->serializedFieldSize("opt_fieldE", apache::thrift::protocol::T_STRING, 205);
    xfer += prot_->serializedSizeString(this->opt_fieldE);
  }
  if (!this->fieldF.empty()) {
    xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_LIST, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->fieldF);
  }
  if (!this->fieldG.empty()) {
    xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>>, std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>>::serializedSize<false>(*prot_, this->fieldG);
  }
  if (!this->fieldH.empty()) {
    xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::serializedSize<false>(*prot_, this->fieldH);
  }
  if (this->fieldI != true) {
    xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_BOOL, 9);
    xfer += prot_->serializedSizeBool(this->fieldI);
  }
  if (!this->fieldJ.empty()) {
    xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_MAP, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->fieldJ);
  }
  if (!this->fieldK.empty()) {
    xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>>, std::vector<std::vector<std::vector<std::vector<int32_t>>>>>::serializedSize<false>(*prot_, this->fieldK);
  }
  if (!this->fieldL.empty()) {
    xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_SET, 12);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<bool>>>>::serializedSize<false>(*prot_, this->fieldL);
  }
  if (!this->fieldM.empty()) {
    xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>>::serializedSize<false>(*prot_, this->fieldM);
  }
  if (this->fieldN != 0) {
    xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_I32, 14);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::simpleTypeDef>::serializedSize<false>(*prot_, this->fieldN);
  }
  if (!this->fieldO.empty()) {
    xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_LIST, 15);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,  ::some::valid::ns::complexStructTypeDef>::serializedSize<false>(*prot_, this->fieldO);
  }
  if (!this->fieldP.empty()) {
    xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_LIST, 16);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>>>, std::vector< ::some::valid::ns::mostComplexTypeDef>>::serializedSize<false>(*prot_, this->fieldP);
  }
  if (this->fieldQ != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_I32, 17);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldQ);
  }
  if (this->fieldR !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldR);
  }
  xfer += prot_->serializedFieldSize("req_fieldR", apache::thrift::protocol::T_I32, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->req_fieldR);
  if (this->__isset.opt_fieldR) {
    xfer += prot_->serializedFieldSize("opt_fieldR", apache::thrift::protocol::T_I32, 218);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->opt_fieldR);
  }
  if (this->fieldS !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->serializedFieldSize("fieldS", apache::thrift::protocol::T_I32, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::serializedSize<false>(*prot_, this->fieldS);
  }
  if (!this->fieldT.empty()) {
    xfer += prot_->serializedFieldSize("fieldT", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->fieldT);
  }
  if (!this->fieldU.empty()) {
    xfer += prot_->serializedFieldSize("fieldU", apache::thrift::protocol::T_LIST, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::serializedSize<false>(*prot_, this->fieldU);
  }
  xfer += prot_->serializedFieldSize("fieldV", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, &this->fieldV);
  xfer += prot_->serializedFieldSize("req_fieldV", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, &this->req_fieldV);
  if (this->__isset.opt_fieldV) {
    xfer += prot_->serializedFieldSize("opt_fieldV", apache::thrift::protocol::T_STRUCT, 223);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::serializedSizeZC(prot_, &this->opt_fieldV);
  }
  if (!this->fieldW.empty()) {
    xfer += prot_->serializedFieldSize("fieldW", apache::thrift::protocol::T_SET, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::serializedSize<false>(*prot_, this->fieldW);
  }
  xfer += prot_->serializedFieldSize("fieldX", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSizeZC(prot_, &this->fieldX);
  xfer += prot_->serializedFieldSize("req_fieldX", apache::thrift::protocol::T_STRUCT, 125);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSizeZC(prot_, &this->req_fieldX);
  if (this->__isset.opt_fieldX) {
    xfer += prot_->serializedFieldSize("opt_fieldX", apache::thrift::protocol::T_STRUCT, 225);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::serializedSizeZC(prot_, &this->opt_fieldX);
  }
  if (!this->fieldY.empty()) {
    xfer += prot_->serializedFieldSize("fieldY", apache::thrift::protocol::T_LIST, 26);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::ComplexUnion>>::serializedSize<false>(*prot_, this->fieldY);
  }
  if (!this->fieldZ.empty()) {
    xfer += prot_->serializedFieldSize("fieldZ", apache::thrift::protocol::T_SET, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::serializedSize<false>(*prot_, this->fieldZ);
  }
  if (!this->fieldAA.empty()) {
    xfer += prot_->serializedFieldSize("fieldAA", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::serializedSize<false>(*prot_, this->fieldAA);
  }
  if (!this->fieldAB.empty()) {
    xfer += prot_->serializedFieldSize("fieldAB", apache::thrift::protocol::T_MAP, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>, ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>>::serializedSize<false>(*prot_, this->fieldAB);
  }
  if (this->fieldAC !=  ::some::valid::ns::MyEnumB::AField) {
    xfer += prot_->serializedFieldSize("fieldAC", apache::thrift::protocol::T_I32, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumB>::serializedSize<false>(*prot_, this->fieldAC);
  }
  if (this->fieldAD != static_cast< ::a::different::ns::AnEnum>(0)) {
    xfer += prot_->serializedFieldSize("fieldAD", apache::thrift::protocol::T_I32, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::a::different::ns::AnEnum>::serializedSize<false>(*prot_, this->fieldAD);
  }
  if (!this->fieldAE.empty()) {
    xfer += prot_->serializedFieldSize("fieldAE", apache::thrift::protocol::T_MAP, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->fieldAE);
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldSD)) {
    xfer += prot_->serializedFieldSize("fieldSD", apache::thrift::protocol::T_STRING, 33);
    xfer += prot_->serializedSizeString(this->fieldSD.value);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t containerStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("containerStruct");
  if (this->fieldA != 0) {
    xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->writeBool(this->fieldA);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_fieldA", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->writeBool(this->req_fieldA);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldA) {
    xfer += prot_->writeFieldBegin("opt_fieldA", apache::thrift::protocol::T_BOOL, 201);
    xfer += prot_->writeBool(this->opt_fieldA);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldB.empty()) {
    xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_MAP, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->fieldB);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_fieldB", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->req_fieldB);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldB) {
    xfer += prot_->writeFieldBegin("opt_fieldB", apache::thrift::protocol::T_MAP, 202);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->opt_fieldB);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldC.empty()) {
    xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_SET, 3);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->fieldC);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_fieldC", apache::thrift::protocol::T_SET, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->req_fieldC);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldC) {
    xfer += prot_->writeFieldBegin("opt_fieldC", apache::thrift::protocol::T_SET, 203);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->opt_fieldC);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldD)) {
    xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->fieldD);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldE)) {
    xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeString(this->fieldE);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_fieldE", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->writeString(this->req_fieldE);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldE) {
    xfer += prot_->writeFieldBegin("opt_fieldE", apache::thrift::protocol::T_STRING, 205);
    xfer += prot_->writeString(this->opt_fieldE);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldF.empty()) {
    xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_LIST, 6);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::write(*prot_, this->fieldF);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldG.empty()) {
    xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_MAP, 7);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>>, std::map<std::string, std::map<std::string, std::map<std::string, int32_t>>>>::write(*prot_, this->fieldG);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldH.empty()) {
    xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_LIST, 8);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::write(*prot_, this->fieldH);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldI != true) {
    xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_BOOL, 9);
    xfer += prot_->writeBool(this->fieldI);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldJ.empty()) {
    xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_MAP, 10);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::write(*prot_, this->fieldJ);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldK.empty()) {
    xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>>, std::vector<std::vector<std::vector<std::vector<int32_t>>>>>::write(*prot_, this->fieldK);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldL.empty()) {
    xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_SET, 12);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<bool>>>>::write(*prot_, this->fieldL);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldM.empty()) {
    xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_MAP, 13);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, std::map<std::set<std::vector<int32_t>>, std::map<std::vector<std::set<std::string>>, std::string>>>::write(*prot_, this->fieldM);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldN != 0) {
    xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_I32, 14);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::simpleTypeDef>::write(*prot_, this->fieldN);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldO.empty()) {
    xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_LIST, 15);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,  ::some::valid::ns::complexStructTypeDef>::write(*prot_, this->fieldO);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldP.empty()) {
    xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_LIST, 16);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>>>, std::vector< ::some::valid::ns::mostComplexTypeDef>>::write(*prot_, this->fieldP);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldQ != static_cast< ::some::valid::ns::MyEnumA>(0)) {
    xfer += prot_->writeFieldBegin("fieldQ", apache::thrift::protocol::T_I32, 17);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->fieldQ);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldR !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->writeFieldBegin("fieldR", apache::thrift::protocol::T_I32, 18);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->fieldR);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_fieldR", apache::thrift::protocol::T_I32, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->req_fieldR);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldR) {
    xfer += prot_->writeFieldBegin("opt_fieldR", apache::thrift::protocol::T_I32, 218);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->opt_fieldR);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldS !=  ::some::valid::ns::MyEnumA::fieldB) {
    xfer += prot_->writeFieldBegin("fieldS", apache::thrift::protocol::T_I32, 19);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumA>::write(*prot_, this->fieldS);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldT.empty()) {
    xfer += prot_->writeFieldBegin("fieldT", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::write(*prot_, this->fieldT);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldU.empty()) {
    xfer += prot_->writeFieldBegin("fieldU", apache::thrift::protocol::T_LIST, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::some::valid::ns::MyEnumA>>::write(*prot_, this->fieldU);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("fieldV", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, &this->fieldV);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_fieldV", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, &this->req_fieldV);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldV) {
    xfer += prot_->writeFieldBegin("opt_fieldV", apache::thrift::protocol::T_STRUCT, 223);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::MyStruct>::write(prot_, &this->opt_fieldV);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldW.empty()) {
    xfer += prot_->writeFieldBegin("fieldW", apache::thrift::protocol::T_SET, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::some::valid::ns::MyStruct>>::write(*prot_, this->fieldW);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("fieldX", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::write(prot_, &this->fieldX);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_fieldX", apache::thrift::protocol::T_STRUCT, 125);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::write(prot_, &this->req_fieldX);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.opt_fieldX) {
    xfer += prot_->writeFieldBegin("opt_fieldX", apache::thrift::protocol::T_STRUCT, 225);
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::ComplexUnion>::write(prot_, &this->opt_fieldX);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldY.empty()) {
    xfer += prot_->writeFieldBegin("fieldY", apache::thrift::protocol::T_LIST, 26);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::some::valid::ns::ComplexUnion>>::write(*prot_, this->fieldY);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldZ.empty()) {
    xfer += prot_->writeFieldBegin("fieldZ", apache::thrift::protocol::T_SET, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,  ::some::valid::ns::unionTypeDef>::write(*prot_, this->fieldZ);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldAA.empty()) {
    xfer += prot_->writeFieldBegin("fieldAA", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector< ::some::valid::ns::unionTypeDef>>::write(*prot_, this->fieldAA);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldAB.empty()) {
    xfer += prot_->writeFieldBegin("fieldAB", apache::thrift::protocol::T_MAP, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>, ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::map< ::some::valid::ns::IndirectionB,  ::some::valid::ns::IndirectionC>>::write(*prot_, this->fieldAB);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldAC !=  ::some::valid::ns::MyEnumB::AField) {
    xfer += prot_->writeFieldBegin("fieldAC", apache::thrift::protocol::T_I32, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::some::valid::ns::MyEnumB>::write(*prot_, this->fieldAC);
    xfer += prot_->writeFieldEnd();
  }
  if (this->fieldAD != static_cast< ::a::different::ns::AnEnum>(0)) {
    xfer += prot_->writeFieldBegin("fieldAD", apache::thrift::protocol::T_I32, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::a::different::ns::AnEnum>::write(*prot_, this->fieldAD);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->fieldAE.empty()) {
    xfer += prot_->writeFieldBegin("fieldAE", apache::thrift::protocol::T_MAP, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->fieldAE);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::string>::isEmpty(this->fieldSD)) {
    xfer += prot_->writeFieldBegin("fieldSD", apache::thrift::protocol::T_STRING, 33);
    xfer += prot_->writeString(this->fieldSD.value);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void MyIncludedStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_ARequiredField = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_MyIncludedInt:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::a::different::ns::IncludedInt64>::read(*iprot, this->MyIncludedInt);
    this->__isset.MyIncludedInt = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_MyIncludedStruct:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::read(iprot, &this->MyIncludedStruct);
    this->__isset.MyIncludedStruct = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_ARefField:
  {
    std::unique_ptr< ::some::valid::ns::AStruct> ptr = std::make_unique< ::some::valid::ns::AStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::read(iprot, ptr.get());
    this->ARefField = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_ARequiredField:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::read(iprot, &this->ARequiredField);
    isset_ARequiredField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_ARequiredField) {
    TProtocolException::throwMissingRequiredField("ARequiredField", "MyIncludedStruct");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_MyIncludedInt;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_MyIncludedStruct;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_ARefField;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_ARequiredField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyIncludedStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyIncludedStruct");
  if (this->MyIncludedInt != 42LL) {
    xfer += prot_->serializedFieldSize("MyIncludedInt", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::a::different::ns::IncludedInt64>::serializedSize<false>(*prot_, this->MyIncludedInt);
  }
  xfer += prot_->serializedFieldSize("MyIncludedStruct", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSize(prot_, &this->MyIncludedStruct);
  if (!this->ARefField.empty()) {
    xfer += prot_->serializedFieldSize("ARefField", apache::thrift::protocol::T_STRUCT, 3);
    if (this->ARefField) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSize(prot_, this->ARefField.get());
    }
    else {
    xfer += prot_->serializedStructSize("AStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  xfer += prot_->serializedFieldSize("ARequiredField", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSize(prot_, &this->ARequiredField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyIncludedStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyIncludedStruct");
  if (this->MyIncludedInt != 42LL) {
    xfer += prot_->serializedFieldSize("MyIncludedInt", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::a::different::ns::IncludedInt64>::serializedSize<false>(*prot_, this->MyIncludedInt);
  }
  xfer += prot_->serializedFieldSize("MyIncludedStruct", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSizeZC(prot_, &this->MyIncludedStruct);
  if (!this->ARefField.empty()) {
    xfer += prot_->serializedFieldSize("ARefField", apache::thrift::protocol::T_STRUCT, 3);
    if (this->ARefField) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSizeZC(prot_, this->ARefField.get());
    }
    else {
    xfer += prot_->serializedStructSize("AStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  xfer += prot_->serializedFieldSize("ARequiredField", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::serializedSizeZC(prot_, &this->ARequiredField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyIncludedStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyIncludedStruct");
  if (this->MyIncludedInt != 42LL) {
    xfer += prot_->writeFieldBegin("MyIncludedInt", apache::thrift::protocol::T_I64, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::a::different::ns::IncludedInt64>::write(*prot_, this->MyIncludedInt);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("MyIncludedStruct", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::write(prot_, &this->MyIncludedStruct);
  xfer += prot_->writeFieldEnd();
  if (!this->ARefField.empty()) {
    xfer += prot_->writeFieldBegin("ARefField", apache::thrift::protocol::T_STRUCT, 3);
    if (this->ARefField) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::write(prot_, this->ARefField.get());
    }
    else {
    xfer += prot_->writeStructBegin("AStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("ARequiredField", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::AStruct>::write(prot_, &this->ARequiredField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void AnnotatedStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_req_cpp_unique_ref = false;
  bool isset_req_cpp2_unique_ref = false;
  bool isset_req_container_with_ref = false;
  bool isset_req_ref_type_shared = false;
  bool isset_req_ref_type_const = false;
  bool isset_req_ref_type_unique = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_no_annotation:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, &this->no_annotation);
    this->__isset.no_annotation = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_cpp_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->cpp_unique_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_cpp2_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->cpp2_unique_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_container_with_ref:
  {
    std::unique_ptr<std::map<int32_t, std::vector<std::string>>> ptr = std::make_unique<std::map<int32_t, std::vector<std::string>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::read(*iprot, *ptr);
    this->container_with_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_cpp_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->req_cpp_unique_ref = std::move(ptr);
    isset_req_cpp_unique_ref = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_cpp2_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->req_cpp2_unique_ref = std::move(ptr);
    isset_req_cpp2_unique_ref = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_req_container_with_ref:
  {
    std::unique_ptr<std::vector<std::string>> ptr = std::make_unique<std::vector<std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, *ptr);
    this->req_container_with_ref = std::move(ptr);
    isset_req_container_with_ref = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_cpp_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->opt_cpp_unique_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_cpp2_unique_ref:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->opt_cpp2_unique_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_opt_container_with_ref:
  {
    std::unique_ptr<std::set<int32_t>> ptr = std::make_unique<std::set<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, *ptr);
    this->opt_container_with_ref = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_ref_type_unique:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->ref_type_unique = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_ref_type_shared:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->ref_type_shared = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_ref_type_const:
  {
    std::unique_ptr<std::map<int32_t, std::vector<std::string>>> ptr = std::make_unique<std::map<int32_t, std::vector<std::string>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::read(*iprot, *ptr);
    this->ref_type_const = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_ref_type_shared:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->req_ref_type_shared = std::move(ptr);
    isset_req_ref_type_shared = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_req_ref_type_const:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->req_ref_type_const = std::move(ptr);
    isset_req_ref_type_const = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_req_ref_type_unique:
  {
    std::unique_ptr<std::vector<std::string>> ptr = std::make_unique<std::vector<std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, *ptr);
    this->req_ref_type_unique = std::move(ptr);
    isset_req_ref_type_unique = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_ref_type_const:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->opt_ref_type_const = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_opt_ref_type_unique:
  {
    std::unique_ptr< ::some::valid::ns::containerStruct> ptr = std::make_unique< ::some::valid::ns::containerStruct>();
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, ptr.get());
    this->opt_ref_type_unique = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          19,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_opt_ref_type_shared:
  {
    std::unique_ptr<std::set<int32_t>> ptr = std::make_unique<std::set<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, *ptr);
    this->opt_ref_type_shared = std::move(ptr);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          19,
          20,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_base_type:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::CppFakeI32>::read(*iprot, this->base_type);
    this->__isset.base_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          20,
          21,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_list_type:
  {
    this->list_type =  ::some::valid::ns::FollySmallVectorI64();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::FollySmallVectorI64>::read(*iprot, this->list_type);
    this->__isset.list_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          21,
          22,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_set_type:
  {
    this->set_type =  ::some::valid::ns::SortedVectorSetString();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::SortedVectorSetString>::read(*iprot, this->set_type);
    this->__isset.set_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          22,
          23,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_map_type:
  {
    this->map_type =  ::some::valid::ns::FakeMap();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,  ::some::valid::ns::FakeMap>::read(*iprot, this->map_type);
    this->__isset.map_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          23,
          24,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_map_struct_type:
  {
    this->map_struct_type =  ::some::valid::ns::UnorderedMapStruct();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,  ::some::valid::ns::UnorderedMapStruct>::read(*iprot, this->map_struct_type);
    this->__isset.map_struct_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          24,
          25,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_iobuf_type:
  {
    iprot->readBinary(this->iobuf_type);
    this->__isset.iobuf_type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          25,
          26,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_iobuf_ptr:
  {
    iprot->readBinary(this->iobuf_ptr);
    this->__isset.iobuf_ptr = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          26,
          27,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_list_i32_template:
  {
    this->list_i32_template = std::list<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::list<int32_t>>::read(*iprot, this->list_i32_template);
    this->__isset.list_i32_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          27,
          28,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_list_string_template:
  {
    this->list_string_template = std::deque<std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::deque<std::string>>::read(*iprot, this->list_string_template);
    this->__isset.list_string_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          28,
          29,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_set_template:
  {
    this->set_template = folly::sorted_vector_set<std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, folly::sorted_vector_set<std::string>>::read(*iprot, this->set_template);
    this->__isset.set_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          29,
          30,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_map_template:
  {
    this->map_template = folly::sorted_vector_map<int64_t, std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, folly::sorted_vector_map<int64_t, std::string>>::read(*iprot, this->map_template);
    this->__isset.map_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          30,
          31,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_typedef_list_template:
  {
    this->typedef_list_template =  ::some::valid::ns::std_list();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::std_list>::read(*iprot, this->typedef_list_template);
    this->__isset.typedef_list_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          31,
          32,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_typedef_deque_template:
  {
    this->typedef_deque_template =  ::some::valid::ns::std_deque();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,  ::some::valid::ns::std_deque>::read(*iprot, this->typedef_deque_template);
    this->__isset.typedef_deque_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          32,
          33,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_typedef_set_template:
  {
    this->typedef_set_template =  ::some::valid::ns::folly_set();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::folly_set>::read(*iprot, this->typedef_set_template);
    this->__isset.typedef_set_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          33,
          34,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_typedef_map_template:
  {
    this->typedef_map_template =  ::some::valid::ns::folly_map();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::some::valid::ns::folly_map>::read(*iprot, this->typedef_map_template);
    this->__isset.typedef_map_template = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          34,
          35,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_indirection_a:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionA, ::apache::thrift::type_class::integral>,  ::some::valid::ns::IndirectionA>::read(*iprot, this->indirection_a);
    this->__isset.indirection_a = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          35,
          36,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_indirection_b:
  {
    this->indirection_b = std::vector< ::some::valid::ns::IndirectionB>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>>, std::vector< ::some::valid::ns::IndirectionB>>::read(*iprot, this->indirection_b);
    this->__isset.indirection_b = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          36,
          37,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_indirection_c:
  {
    this->indirection_c = std::set< ::some::valid::ns::IndirectionC>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::set< ::some::valid::ns::IndirectionC>>::read(*iprot, this->indirection_c);
    this->__isset.indirection_c = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          37,
          38,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_iobuf_type_val:
  {
    iprot->readBinary(this->iobuf_type_val);
    this->__isset.iobuf_type_val = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          38,
          39,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_iobuf_ptr_val:
  {
    iprot->readBinary(this->iobuf_ptr_val);
    this->__isset.iobuf_ptr_val = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          39,
          40,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_struct_struct:
  {
    ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::read(iprot, &this->struct_struct);
    this->__isset.struct_struct = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          40,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_req_cpp_unique_ref) {
    TProtocolException::throwMissingRequiredField("req_cpp_unique_ref", "AnnotatedStruct");
  }
  if (!isset_req_cpp2_unique_ref) {
    TProtocolException::throwMissingRequiredField("req_cpp2_unique_ref", "AnnotatedStruct");
  }
  if (!isset_req_container_with_ref) {
    TProtocolException::throwMissingRequiredField("req_container_with_ref", "AnnotatedStruct");
  }
  if (!isset_req_ref_type_shared) {
    TProtocolException::throwMissingRequiredField("req_ref_type_shared", "AnnotatedStruct");
  }
  if (!isset_req_ref_type_const) {
    TProtocolException::throwMissingRequiredField("req_ref_type_const", "AnnotatedStruct");
  }
  if (!isset_req_ref_type_unique) {
    TProtocolException::throwMissingRequiredField("req_ref_type_unique", "AnnotatedStruct");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_no_annotation;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_cpp_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_cpp2_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_container_with_ref;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_cpp_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_cpp2_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_req_container_with_ref;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_cpp_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_cpp2_unique_ref;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_opt_container_with_ref;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_ref_type_unique;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_ref_type_shared;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_ref_type_const;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_ref_type_shared;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_req_ref_type_const;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_req_ref_type_unique;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_ref_type_const;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_opt_ref_type_unique;
      } else {
        goto _skip;
      }
    }
    case 19:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_opt_ref_type_shared;
      } else {
        goto _skip;
      }
    }
    case 20:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I32)) {
        goto _readField_base_type;
      } else {
        goto _skip;
      }
    }
    case 21:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_list_type;
      } else {
        goto _skip;
      }
    }
    case 22:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_set_type;
      } else {
        goto _skip;
      }
    }
    case 23:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_map_type;
      } else {
        goto _skip;
      }
    }
    case 24:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_map_struct_type;
      } else {
        goto _skip;
      }
    }
    case 25:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_iobuf_type;
      } else {
        goto _skip;
      }
    }
    case 26:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_iobuf_ptr;
      } else {
        goto _skip;
      }
    }
    case 27:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_list_i32_template;
      } else {
        goto _skip;
      }
    }
    case 28:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_list_string_template;
      } else {
        goto _skip;
      }
    }
    case 29:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_set_template;
      } else {
        goto _skip;
      }
    }
    case 30:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_map_template;
      } else {
        goto _skip;
      }
    }
    case 31:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_typedef_list_template;
      } else {
        goto _skip;
      }
    }
    case 32:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_typedef_deque_template;
      } else {
        goto _skip;
      }
    }
    case 33:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_typedef_set_template;
      } else {
        goto _skip;
      }
    }
    case 34:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_MAP)) {
        goto _readField_typedef_map_template;
      } else {
        goto _skip;
      }
    }
    case 35:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_indirection_a;
      } else {
        goto _skip;
      }
    }
    case 36:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_LIST)) {
        goto _readField_indirection_b;
      } else {
        goto _skip;
      }
    }
    case 37:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_SET)) {
        goto _readField_indirection_c;
      } else {
        goto _skip;
      }
    }
    case 38:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_iobuf_type_val;
      } else {
        goto _skip;
      }
    }
    case 39:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRING)) {
        goto _readField_iobuf_ptr_val;
      } else {
        goto _skip;
      }
    }
    case 40:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_STRUCT)) {
        goto _readField_struct_struct;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AnnotatedStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnnotatedStruct");
  xfer += prot_->serializedFieldSize("no_annotation", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, &this->no_annotation);
  if (!this->cpp_unique_ref.empty()) {
    xfer += prot_->serializedFieldSize("cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 2);
    if (this->cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->cpp_unique_ref.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  if (!this->cpp2_unique_ref.empty()) {
    xfer += prot_->serializedFieldSize("cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 3);
    if (this->cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->cpp2_unique_ref.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  if (!this->container_with_ref.empty()) {
  if (!this->container_with_ref.empty()) {
    xfer += prot_->serializedFieldSize("container_with_ref", apache::thrift::protocol::T_MAP, 4);
    if (this->container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, *this->container_with_ref);
    }
    else {
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->serializedSizeMapEnd();
  }
  }
  xfer += prot_->serializedFieldSize("req_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 5);
  if (this->req_cpp_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->req_cpp_unique_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 6);
  if (this->req_cpp2_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->req_cpp2_unique_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_container_with_ref", apache::thrift::protocol::T_LIST, 7);
  if (this->req_container_with_ref) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, *this->req_container_with_ref);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->opt_cpp_unique_ref) {
    xfer += prot_->serializedFieldSize("opt_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 8);
    if (this->opt_cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->opt_cpp_unique_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_cpp2_unique_ref) {
    xfer += prot_->serializedFieldSize("opt_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 9);
    if (this->opt_cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->opt_cpp2_unique_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_container_with_ref) {
    xfer += prot_->serializedFieldSize("opt_container_with_ref", apache::thrift::protocol::T_SET, 10);
    if (this->opt_container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, *this->opt_container_with_ref);
    }
    else {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->serializedSizeSetEnd();
    }
  }
  if (!this->ref_type_unique.empty()) {
    xfer += prot_->serializedFieldSize("ref_type_unique", apache::thrift::protocol::T_STRUCT, 11);
    if (this->ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->ref_type_unique.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  xfer += prot_->serializedFieldSize("ref_type_shared", apache::thrift::protocol::T_STRUCT, 12);
  if (this->ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->ref_type_shared.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  if (!this->ref_type_const.empty()) {
  if (!this->ref_type_const.empty()) {
    xfer += prot_->serializedFieldSize("ref_type_const", apache::thrift::protocol::T_MAP, 13);
    if (this->ref_type_const) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, *this->ref_type_const);
    }
    else {
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->serializedSizeMapEnd();
  }
  }
  xfer += prot_->serializedFieldSize("req_ref_type_shared", apache::thrift::protocol::T_STRUCT, 14);
  if (this->req_ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->req_ref_type_shared.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref_type_const", apache::thrift::protocol::T_STRUCT, 15);
  if (this->req_ref_type_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->req_ref_type_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref_type_unique", apache::thrift::protocol::T_LIST, 16);
  if (this->req_ref_type_unique) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, *this->req_ref_type_unique);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->opt_ref_type_const) {
    xfer += prot_->serializedFieldSize("opt_ref_type_const", apache::thrift::protocol::T_STRUCT, 17);
    if (this->opt_ref_type_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->opt_ref_type_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_ref_type_unique) {
    xfer += prot_->serializedFieldSize("opt_ref_type_unique", apache::thrift::protocol::T_STRUCT, 18);
    if (this->opt_ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, this->opt_ref_type_unique.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_ref_type_shared) {
    xfer += prot_->serializedFieldSize("opt_ref_type_shared", apache::thrift::protocol::T_SET, 19);
    if (this->opt_ref_type_shared) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, *this->opt_ref_type_shared);
    }
    else {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->serializedSizeSetEnd();
    }
  }
  if (this->base_type != 0) {
    xfer += prot_->serializedFieldSize("base_type", apache::thrift::protocol::T_I32, 20);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::CppFakeI32>::serializedSize<false>(*prot_, this->base_type);
  }
  if (!this->list_type.empty()) {
    xfer += prot_->serializedFieldSize("list_type", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::FollySmallVectorI64>::serializedSize<false>(*prot_, this->list_type);
  }
  if (!this->set_type.empty()) {
    xfer += prot_->serializedFieldSize("set_type", apache::thrift::protocol::T_SET, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::SortedVectorSetString>::serializedSize<false>(*prot_, this->set_type);
  }
  if (!this->map_type.empty()) {
    xfer += prot_->serializedFieldSize("map_type", apache::thrift::protocol::T_MAP, 23);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,  ::some::valid::ns::FakeMap>::serializedSize<false>(*prot_, this->map_type);
  }
  if (!this->map_struct_type.empty()) {
    xfer += prot_->serializedFieldSize("map_struct_type", apache::thrift::protocol::T_MAP, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,  ::some::valid::ns::UnorderedMapStruct>::serializedSize<false>(*prot_, this->map_struct_type);
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type)) {
    xfer += prot_->serializedFieldSize("iobuf_type", apache::thrift::protocol::T_STRING, 25);
    xfer += prot_->serializedSizeBinary(this->iobuf_type);
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr)) {
    xfer += prot_->serializedFieldSize("iobuf_ptr", apache::thrift::protocol::T_STRING, 26);
    xfer += prot_->serializedSizeBinary(this->iobuf_ptr);
  }
  if (!this->list_i32_template.empty()) {
    xfer += prot_->serializedFieldSize("list_i32_template", apache::thrift::protocol::T_LIST, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::list<int32_t>>::serializedSize<false>(*prot_, this->list_i32_template);
  }
  if (!this->list_string_template.empty()) {
    xfer += prot_->serializedFieldSize("list_string_template", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::deque<std::string>>::serializedSize<false>(*prot_, this->list_string_template);
  }
  if (!this->set_template.empty()) {
    xfer += prot_->serializedFieldSize("set_template", apache::thrift::protocol::T_SET, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, folly::sorted_vector_set<std::string>>::serializedSize<false>(*prot_, this->set_template);
  }
  if (!this->map_template.empty()) {
    xfer += prot_->serializedFieldSize("map_template", apache::thrift::protocol::T_MAP, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, folly::sorted_vector_map<int64_t, std::string>>::serializedSize<false>(*prot_, this->map_template);
  }
  if (!this->typedef_list_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_list_template", apache::thrift::protocol::T_LIST, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::std_list>::serializedSize<false>(*prot_, this->typedef_list_template);
  }
  if (!this->typedef_deque_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_deque_template", apache::thrift::protocol::T_LIST, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,  ::some::valid::ns::std_deque>::serializedSize<false>(*prot_, this->typedef_deque_template);
  }
  if (!this->typedef_set_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_set_template", apache::thrift::protocol::T_SET, 33);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::folly_set>::serializedSize<false>(*prot_, this->typedef_set_template);
  }
  if (!this->typedef_map_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_map_template", apache::thrift::protocol::T_MAP, 34);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::some::valid::ns::folly_map>::serializedSize<false>(*prot_, this->typedef_map_template);
  }
  if (this->indirection_a != 0) {
    xfer += prot_->serializedFieldSize("indirection_a", apache::thrift::protocol::T_I64, 35);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionA, ::apache::thrift::type_class::integral>,  ::some::valid::ns::IndirectionA>::serializedSize<false>(*prot_, this->indirection_a);
  }
  if (!this->indirection_b.empty()) {
    xfer += prot_->serializedFieldSize("indirection_b", apache::thrift::protocol::T_LIST, 36);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>>, std::vector< ::some::valid::ns::IndirectionB>>::serializedSize<false>(*prot_, this->indirection_b);
  }
  if (!this->indirection_c.empty()) {
    xfer += prot_->serializedFieldSize("indirection_c", apache::thrift::protocol::T_SET, 37);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::set< ::some::valid::ns::IndirectionC>>::serializedSize<false>(*prot_, this->indirection_c);
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type_val)) {
    xfer += prot_->serializedFieldSize("iobuf_type_val", apache::thrift::protocol::T_STRING, 38);
    xfer += prot_->serializedSizeBinary(this->iobuf_type_val);
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr_val)) {
    xfer += prot_->serializedFieldSize("iobuf_ptr_val", apache::thrift::protocol::T_STRING, 39);
    xfer += prot_->serializedSizeBinary(this->iobuf_ptr_val);
  }
  xfer += prot_->serializedFieldSize("struct_struct", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSize(prot_, &this->struct_struct);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnnotatedStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AnnotatedStruct");
  xfer += prot_->serializedFieldSize("no_annotation", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, &this->no_annotation);
  if (!this->cpp_unique_ref.empty()) {
    xfer += prot_->serializedFieldSize("cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 2);
    if (this->cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->cpp_unique_ref.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  if (!this->cpp2_unique_ref.empty()) {
    xfer += prot_->serializedFieldSize("cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 3);
    if (this->cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->cpp2_unique_ref.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  if (!this->container_with_ref.empty()) {
  if (!this->container_with_ref.empty()) {
    xfer += prot_->serializedFieldSize("container_with_ref", apache::thrift::protocol::T_MAP, 4);
    if (this->container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, *this->container_with_ref);
    }
    else {
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->serializedSizeMapEnd();
  }
  }
  xfer += prot_->serializedFieldSize("req_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 5);
  if (this->req_cpp_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->req_cpp_unique_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 6);
  if (this->req_cpp2_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->req_cpp2_unique_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_container_with_ref", apache::thrift::protocol::T_LIST, 7);
  if (this->req_container_with_ref) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, *this->req_container_with_ref);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->opt_cpp_unique_ref) {
    xfer += prot_->serializedFieldSize("opt_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 8);
    if (this->opt_cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->opt_cpp_unique_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_cpp2_unique_ref) {
    xfer += prot_->serializedFieldSize("opt_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 9);
    if (this->opt_cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->opt_cpp2_unique_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_container_with_ref) {
    xfer += prot_->serializedFieldSize("opt_container_with_ref", apache::thrift::protocol::T_SET, 10);
    if (this->opt_container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, *this->opt_container_with_ref);
    }
    else {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->serializedSizeSetEnd();
    }
  }
  if (!this->ref_type_unique.empty()) {
    xfer += prot_->serializedFieldSize("ref_type_unique", apache::thrift::protocol::T_STRUCT, 11);
    if (this->ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->ref_type_unique.get());
    }
    else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  }
  xfer += prot_->serializedFieldSize("ref_type_shared", apache::thrift::protocol::T_STRUCT, 12);
  if (this->ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->ref_type_shared.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  if (!this->ref_type_const.empty()) {
  if (!this->ref_type_const.empty()) {
    xfer += prot_->serializedFieldSize("ref_type_const", apache::thrift::protocol::T_MAP, 13);
    if (this->ref_type_const) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::serializedSize<false>(*prot_, *this->ref_type_const);
    }
    else {
      xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->serializedSizeMapEnd();
  }
  }
  xfer += prot_->serializedFieldSize("req_ref_type_shared", apache::thrift::protocol::T_STRUCT, 14);
  if (this->req_ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->req_ref_type_shared.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref_type_const", apache::thrift::protocol::T_STRUCT, 15);
  if (this->req_ref_type_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->req_ref_type_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("containerStruct");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref_type_unique", apache::thrift::protocol::T_LIST, 16);
  if (this->req_ref_type_unique) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, *this->req_ref_type_unique);
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->opt_ref_type_const) {
    xfer += prot_->serializedFieldSize("opt_ref_type_const", apache::thrift::protocol::T_STRUCT, 17);
    if (this->opt_ref_type_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->opt_ref_type_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_ref_type_unique) {
    xfer += prot_->serializedFieldSize("opt_ref_type_unique", apache::thrift::protocol::T_STRUCT, 18);
    if (this->opt_ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, this->opt_ref_type_unique.get());
    }
    else {
      xfer += prot_->serializedStructSize("containerStruct");
      xfer += prot_->serializedSizeStop();
    }
  }
  if (this->opt_ref_type_shared) {
    xfer += prot_->serializedFieldSize("opt_ref_type_shared", apache::thrift::protocol::T_SET, 19);
    if (this->opt_ref_type_shared) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, *this->opt_ref_type_shared);
    }
    else {
      xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->serializedSizeSetEnd();
    }
  }
  if (this->base_type != 0) {
    xfer += prot_->serializedFieldSize("base_type", apache::thrift::protocol::T_I32, 20);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::CppFakeI32>::serializedSize<false>(*prot_, this->base_type);
  }
  if (!this->list_type.empty()) {
    xfer += prot_->serializedFieldSize("list_type", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::FollySmallVectorI64>::serializedSize<false>(*prot_, this->list_type);
  }
  if (!this->set_type.empty()) {
    xfer += prot_->serializedFieldSize("set_type", apache::thrift::protocol::T_SET, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::SortedVectorSetString>::serializedSize<false>(*prot_, this->set_type);
  }
  if (!this->map_type.empty()) {
    xfer += prot_->serializedFieldSize("map_type", apache::thrift::protocol::T_MAP, 23);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,  ::some::valid::ns::FakeMap>::serializedSize<false>(*prot_, this->map_type);
  }
  if (!this->map_struct_type.empty()) {
    xfer += prot_->serializedFieldSize("map_struct_type", apache::thrift::protocol::T_MAP, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,  ::some::valid::ns::UnorderedMapStruct>::serializedSize<false>(*prot_, this->map_struct_type);
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type)) {
    xfer += prot_->serializedFieldSize("iobuf_type", apache::thrift::protocol::T_STRING, 25);
    xfer += prot_->serializedSizeZCBinary(this->iobuf_type);
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr)) {
    xfer += prot_->serializedFieldSize("iobuf_ptr", apache::thrift::protocol::T_STRING, 26);
    xfer += prot_->serializedSizeZCBinary(this->iobuf_ptr);
  }
  if (!this->list_i32_template.empty()) {
    xfer += prot_->serializedFieldSize("list_i32_template", apache::thrift::protocol::T_LIST, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::list<int32_t>>::serializedSize<false>(*prot_, this->list_i32_template);
  }
  if (!this->list_string_template.empty()) {
    xfer += prot_->serializedFieldSize("list_string_template", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::deque<std::string>>::serializedSize<false>(*prot_, this->list_string_template);
  }
  if (!this->set_template.empty()) {
    xfer += prot_->serializedFieldSize("set_template", apache::thrift::protocol::T_SET, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, folly::sorted_vector_set<std::string>>::serializedSize<false>(*prot_, this->set_template);
  }
  if (!this->map_template.empty()) {
    xfer += prot_->serializedFieldSize("map_template", apache::thrift::protocol::T_MAP, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, folly::sorted_vector_map<int64_t, std::string>>::serializedSize<false>(*prot_, this->map_template);
  }
  if (!this->typedef_list_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_list_template", apache::thrift::protocol::T_LIST, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::std_list>::serializedSize<false>(*prot_, this->typedef_list_template);
  }
  if (!this->typedef_deque_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_deque_template", apache::thrift::protocol::T_LIST, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,  ::some::valid::ns::std_deque>::serializedSize<false>(*prot_, this->typedef_deque_template);
  }
  if (!this->typedef_set_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_set_template", apache::thrift::protocol::T_SET, 33);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::folly_set>::serializedSize<false>(*prot_, this->typedef_set_template);
  }
  if (!this->typedef_map_template.empty()) {
    xfer += prot_->serializedFieldSize("typedef_map_template", apache::thrift::protocol::T_MAP, 34);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::some::valid::ns::folly_map>::serializedSize<false>(*prot_, this->typedef_map_template);
  }
  if (this->indirection_a != 0) {
    xfer += prot_->serializedFieldSize("indirection_a", apache::thrift::protocol::T_I64, 35);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionA, ::apache::thrift::type_class::integral>,  ::some::valid::ns::IndirectionA>::serializedSize<false>(*prot_, this->indirection_a);
  }
  if (!this->indirection_b.empty()) {
    xfer += prot_->serializedFieldSize("indirection_b", apache::thrift::protocol::T_LIST, 36);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>>, std::vector< ::some::valid::ns::IndirectionB>>::serializedSize<false>(*prot_, this->indirection_b);
  }
  if (!this->indirection_c.empty()) {
    xfer += prot_->serializedFieldSize("indirection_c", apache::thrift::protocol::T_SET, 37);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::set< ::some::valid::ns::IndirectionC>>::serializedSize<false>(*prot_, this->indirection_c);
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type_val)) {
    xfer += prot_->serializedFieldSize("iobuf_type_val", apache::thrift::protocol::T_STRING, 38);
    xfer += prot_->serializedSizeZCBinary(this->iobuf_type_val);
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr_val)) {
    xfer += prot_->serializedFieldSize("iobuf_ptr_val", apache::thrift::protocol::T_STRING, 39);
    xfer += prot_->serializedSizeZCBinary(this->iobuf_ptr_val);
  }
  xfer += prot_->serializedFieldSize("struct_struct", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::serializedSizeZC(prot_, &this->struct_struct);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AnnotatedStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AnnotatedStruct");
  xfer += prot_->writeFieldBegin("no_annotation", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, &this->no_annotation);
  xfer += prot_->writeFieldEnd();
  if (!this->cpp_unique_ref.empty()) {
    xfer += prot_->writeFieldBegin("cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 2);
    if (this->cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->cpp_unique_ref.get());
    }
    else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (!this->cpp2_unique_ref.empty()) {
    xfer += prot_->writeFieldBegin("cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 3);
    if (this->cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->cpp2_unique_ref.get());
    }
    else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (!this->container_with_ref.empty()) {
  if (!this->container_with_ref.empty()) {
    xfer += prot_->writeFieldBegin("container_with_ref", apache::thrift::protocol::T_MAP, 4);
    if (this->container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::write(*prot_, *this->container_with_ref);
    }
    else {
      xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->writeMapEnd();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 5);
  if (this->req_cpp_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->req_cpp_unique_ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 6);
  if (this->req_cpp2_unique_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->req_cpp2_unique_ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_container_with_ref", apache::thrift::protocol::T_LIST, 7);
  if (this->req_container_with_ref) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, *this->req_container_with_ref);
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_cpp_unique_ref) {
    xfer += prot_->writeFieldBegin("opt_cpp_unique_ref", apache::thrift::protocol::T_STRUCT, 8);
    if (this->opt_cpp_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->opt_cpp_unique_ref.get());
    }
    else {
      xfer += prot_->writeStructBegin("containerStruct");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->opt_cpp2_unique_ref) {
    xfer += prot_->writeFieldBegin("opt_cpp2_unique_ref", apache::thrift::protocol::T_STRUCT, 9);
    if (this->opt_cpp2_unique_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->opt_cpp2_unique_ref.get());
    }
    else {
      xfer += prot_->writeStructBegin("containerStruct");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->opt_container_with_ref) {
    xfer += prot_->writeFieldBegin("opt_container_with_ref", apache::thrift::protocol::T_SET, 10);
    if (this->opt_container_with_ref) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, *this->opt_container_with_ref);
    }
    else {
      xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->writeSetEnd();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (!this->ref_type_unique.empty()) {
    xfer += prot_->writeFieldBegin("ref_type_unique", apache::thrift::protocol::T_STRUCT, 11);
    if (this->ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->ref_type_unique.get());
    }
    else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("ref_type_shared", apache::thrift::protocol::T_STRUCT, 12);
  if (this->ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->ref_type_shared.get());
  }
  else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  if (!this->ref_type_const.empty()) {
  if (!this->ref_type_const.empty()) {
    xfer += prot_->writeFieldBegin("ref_type_const", apache::thrift::protocol::T_MAP, 13);
    if (this->ref_type_const) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int32_t, std::vector<std::string>>>::write(*prot_, *this->ref_type_const);
    }
    else {
      xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_LIST, 0);
      xfer += prot_->writeMapEnd();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("req_ref_type_shared", apache::thrift::protocol::T_STRUCT, 14);
  if (this->req_ref_type_shared) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->req_ref_type_shared.get());
  }
  else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_ref_type_const", apache::thrift::protocol::T_STRUCT, 15);
  if (this->req_ref_type_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->req_ref_type_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("containerStruct");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_ref_type_unique", apache::thrift::protocol::T_LIST, 16);
  if (this->req_ref_type_unique) {
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, *this->req_ref_type_unique);
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  if (this->opt_ref_type_const) {
    xfer += prot_->writeFieldBegin("opt_ref_type_const", apache::thrift::protocol::T_STRUCT, 17);
    if (this->opt_ref_type_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->opt_ref_type_const.get());
    }
    else {
      xfer += prot_->writeStructBegin("containerStruct");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->opt_ref_type_unique) {
    xfer += prot_->writeFieldBegin("opt_ref_type_unique", apache::thrift::protocol::T_STRUCT, 18);
    if (this->opt_ref_type_unique) {
      xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, this->opt_ref_type_unique.get());
    }
    else {
      xfer += prot_->writeStructBegin("containerStruct");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->opt_ref_type_shared) {
    xfer += prot_->writeFieldBegin("opt_ref_type_shared", apache::thrift::protocol::T_SET, 19);
    if (this->opt_ref_type_shared) {
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, *this->opt_ref_type_shared);
    }
    else {
      xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
      xfer += prot_->writeSetEnd();
    }
    xfer += prot_->writeFieldEnd();
  }
  if (this->base_type != 0) {
    xfer += prot_->writeFieldBegin("base_type", apache::thrift::protocol::T_I32, 20);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::some::valid::ns::CppFakeI32>::write(*prot_, this->base_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->list_type.empty()) {
    xfer += prot_->writeFieldBegin("list_type", apache::thrift::protocol::T_LIST, 21);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::FollySmallVectorI64>::write(*prot_, this->list_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->set_type.empty()) {
    xfer += prot_->writeFieldBegin("set_type", apache::thrift::protocol::T_SET, 22);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::SortedVectorSetString>::write(*prot_, this->set_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->map_type.empty()) {
    xfer += prot_->writeFieldBegin("map_type", apache::thrift::protocol::T_MAP, 23);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,  ::some::valid::ns::FakeMap>::write(*prot_, this->map_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->map_struct_type.empty()) {
    xfer += prot_->writeFieldBegin("map_struct_type", apache::thrift::protocol::T_MAP, 24);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,  ::some::valid::ns::UnorderedMapStruct>::write(*prot_, this->map_struct_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type)) {
    xfer += prot_->writeFieldBegin("iobuf_type", apache::thrift::protocol::T_STRING, 25);
    xfer += prot_->writeBinary(this->iobuf_type);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr)) {
    xfer += prot_->writeFieldBegin("iobuf_ptr", apache::thrift::protocol::T_STRING, 26);
    xfer += prot_->writeBinary(this->iobuf_ptr);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->list_i32_template.empty()) {
    xfer += prot_->writeFieldBegin("list_i32_template", apache::thrift::protocol::T_LIST, 27);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::list<int32_t>>::write(*prot_, this->list_i32_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->list_string_template.empty()) {
    xfer += prot_->writeFieldBegin("list_string_template", apache::thrift::protocol::T_LIST, 28);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::deque<std::string>>::write(*prot_, this->list_string_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->set_template.empty()) {
    xfer += prot_->writeFieldBegin("set_template", apache::thrift::protocol::T_SET, 29);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, folly::sorted_vector_set<std::string>>::write(*prot_, this->set_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->map_template.empty()) {
    xfer += prot_->writeFieldBegin("map_template", apache::thrift::protocol::T_MAP, 30);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, folly::sorted_vector_map<int64_t, std::string>>::write(*prot_, this->map_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->typedef_list_template.empty()) {
    xfer += prot_->writeFieldBegin("typedef_list_template", apache::thrift::protocol::T_LIST, 31);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,  ::some::valid::ns::std_list>::write(*prot_, this->typedef_list_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->typedef_deque_template.empty()) {
    xfer += prot_->writeFieldBegin("typedef_deque_template", apache::thrift::protocol::T_LIST, 32);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,  ::some::valid::ns::std_deque>::write(*prot_, this->typedef_deque_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->typedef_set_template.empty()) {
    xfer += prot_->writeFieldBegin("typedef_set_template", apache::thrift::protocol::T_SET, 33);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>,  ::some::valid::ns::folly_set>::write(*prot_, this->typedef_set_template);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->typedef_map_template.empty()) {
    xfer += prot_->writeFieldBegin("typedef_map_template", apache::thrift::protocol::T_MAP, 34);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::some::valid::ns::folly_map>::write(*prot_, this->typedef_map_template);
    xfer += prot_->writeFieldEnd();
  }
  if (this->indirection_a != 0) {
    xfer += prot_->writeFieldBegin("indirection_a", apache::thrift::protocol::T_I64, 35);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionA, ::apache::thrift::type_class::integral>,  ::some::valid::ns::IndirectionA>::write(*prot_, this->indirection_a);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->indirection_b.empty()) {
    xfer += prot_->writeFieldBegin("indirection_b", apache::thrift::protocol::T_LIST, 36);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionB, ::apache::thrift::type_class::floating_point>>, std::vector< ::some::valid::ns::IndirectionB>>::write(*prot_, this->indirection_b);
    xfer += prot_->writeFieldEnd();
  }
  if (!this->indirection_c.empty()) {
    xfer += prot_->writeFieldBegin("indirection_c", apache::thrift::protocol::T_SET, 37);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::detail::pm::IndirectionTag< ::some::valid::ns::apache_thrift_indirection_module_IndirectionC, ::apache::thrift::type_class::integral>>, std::set< ::some::valid::ns::IndirectionC>>::write(*prot_, this->indirection_c);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< folly::IOBuf>::isEmpty(this->iobuf_type_val)) {
    xfer += prot_->writeFieldBegin("iobuf_type_val", apache::thrift::protocol::T_STRING, 38);
    xfer += prot_->writeBinary(this->iobuf_type_val);
    xfer += prot_->writeFieldEnd();
  }
  if (!apache::thrift::StringTraits< std::unique_ptr<folly::IOBuf>>::isEmpty(this->iobuf_ptr_val)) {
    xfer += prot_->writeFieldBegin("iobuf_ptr_val", apache::thrift::protocol::T_STRING, 39);
    xfer += prot_->writeBinary(this->iobuf_ptr_val);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("struct_struct", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::some::valid::ns::containerStruct>::write(prot_, &this->struct_struct);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void FloatStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_FLOAT))) {
    goto _loop;
  }
_readField_floatField:
  {
    iprot->readFloat(this->floatField);
    this->__isset.floatField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_doubleField:
  {
    iprot->readDouble(this->doubleField);
    this->__isset.doubleField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_FLOAT)) {
        goto _readField_floatField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_DOUBLE)) {
        goto _readField_doubleField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t FloatStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FloatStruct");
  if (this->floatField != 0) {
    xfer += prot_->serializedFieldSize("floatField", apache::thrift::protocol::T_FLOAT, 1);
    xfer += prot_->serializedSizeFloat(this->floatField);
  }
  if (this->doubleField != 0) {
    xfer += prot_->serializedFieldSize("doubleField", apache::thrift::protocol::T_DOUBLE, 2);
    xfer += prot_->serializedSizeDouble(this->doubleField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FloatStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FloatStruct");
  if (this->floatField != 0) {
    xfer += prot_->serializedFieldSize("floatField", apache::thrift::protocol::T_FLOAT, 1);
    xfer += prot_->serializedSizeFloat(this->floatField);
  }
  if (this->doubleField != 0) {
    xfer += prot_->serializedFieldSize("doubleField", apache::thrift::protocol::T_DOUBLE, 2);
    xfer += prot_->serializedSizeDouble(this->doubleField);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FloatStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("FloatStruct");
  if (this->floatField != 0) {
    xfer += prot_->writeFieldBegin("floatField", apache::thrift::protocol::T_FLOAT, 1);
    xfer += prot_->writeFloat(this->floatField);
    xfer += prot_->writeFieldEnd();
  }
  if (this->doubleField != 0) {
    xfer += prot_->writeFieldBegin("doubleField", apache::thrift::protocol::T_DOUBLE, 2);
    xfer += prot_->writeDouble(this->doubleField);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void FloatUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_FLOAT) {
          this->set_floatSide();
          iprot->readFloat(this->mutable_floatSide());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 2:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_DOUBLE) {
          this->set_doubleSide();
          iprot->readDouble(this->mutable_doubleSide());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

}
template <class Protocol_>
uint32_t FloatUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FloatUnion");
  switch(this->getType()) {
    case FloatUnion::Type::floatSide:
    {
      xfer += prot_->serializedFieldSize("floatSide", apache::thrift::protocol::T_FLOAT, 1);
      xfer += prot_->serializedSizeFloat(this->get_floatSide());
      break;
    }
    case FloatUnion::Type::doubleSide:
    {
      xfer += prot_->serializedFieldSize("doubleSide", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_doubleSide());
      break;
    }
    case FloatUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FloatUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FloatUnion");
  switch(this->getType()) {
    case FloatUnion::Type::floatSide:
    {
      xfer += prot_->serializedFieldSize("floatSide", apache::thrift::protocol::T_FLOAT, 1);
      xfer += prot_->serializedSizeFloat(this->get_floatSide());
      break;
    }
    case FloatUnion::Type::doubleSide:
    {
      xfer += prot_->serializedFieldSize("doubleSide", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_doubleSide());
      break;
    }
    case FloatUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FloatUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("FloatUnion");
  switch(this->getType()) {
    case FloatUnion::Type::floatSide:
    {
      xfer += prot_->writeFieldBegin("floatSide", apache::thrift::protocol::T_FLOAT, 1);
      xfer += prot_->writeFloat(this->get_floatSide());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case FloatUnion::Type::doubleSide:
    {
      xfer += prot_->writeFieldBegin("doubleSide", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_doubleSide());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case FloatUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
namespace some { namespace valid { namespace ns {

template <class Protocol_>
void AllRequiredNoExceptMoveCtrStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

  bool isset_intField = false;

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_intField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->intField);
    isset_intField = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  if (!isset_intField) {
    TProtocolException::throwMissingRequiredField("intField", "AllRequiredNoExceptMoveCtrStruct");
  }
  return;

_loop:
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.fieldType == apache::thrift::protocol::T_I64)) {
        goto _readField_intField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      iprot->skip(_readState.fieldType);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AllRequiredNoExceptMoveCtrStruct");
  xfer += prot_->serializedFieldSize("intField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->intField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("AllRequiredNoExceptMoveCtrStruct");
  xfer += prot_->serializedFieldSize("intField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->intField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t AllRequiredNoExceptMoveCtrStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("AllRequiredNoExceptMoveCtrStruct");
  xfer += prot_->writeFieldBegin("intField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->intField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // some::valid::ns
