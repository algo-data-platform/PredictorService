/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once


#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/reflection_types.h"

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/reflection_fatal.h"

#include <fatal/type/traits.h>
#include <fatal/type/list.h>

namespace cpp2 {

namespace thrift_fatal_impl_detail {

struct cpp2_reflection__struct_unique_data_member_getters_list {
  FATAL_DATA_MEMBER_GETTER(fieldA, fieldA);
};

struct cpp2_reflection__struct_unique_member_pod_list {
  template <typename T_cpp2_reflection_struct_member_pod>

  struct cpp2_reflection_struct_member_pod_fieldA {
    T_cpp2_reflection_struct_member_pod fieldA;
  };

};

class ReflectionStruct_cpp2_reflection__struct_unique_annotations {
  class ReflectionStruct_cpp2_reflection__struct_unique_annotations_members {
    class ReflectionStruct_cpp2_reflection__struct_unique_annotations_members_fieldA {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
    public:
    using fieldA = ::apache::thrift::reflected_annotations<ReflectionStruct_cpp2_reflection__struct_unique_annotations_members_fieldA>;
  };

  class annotations {
    public:
    using keys = void;
    using values = void;
    using map = ::fatal::list<
    >;
  };
  public:
  using keys = annotations::keys;
  using values = annotations::values;
  using map = annotations::map;
  using members = ReflectionStruct_cpp2_reflection__struct_unique_annotations_members;
};

struct ReflectionStruct_cpp2_reflection__struct_unique_member_info_list {
  using fieldA = ::apache::thrift::reflected_struct_data_member<
    thrift_fatal_impl_detail::cpp2_reflection__unique_strings_list::fieldA,
    int32_t,
    1,
    ::apache::thrift::optionality::required_of_writer,
    thrift_fatal_impl_detail::cpp2_reflection__struct_unique_data_member_getters_list::fieldA,
    ::apache::thrift::type_class::integral,
    thrift_fatal_impl_detail::cpp2_reflection__struct_unique_member_pod_list::cpp2_reflection_struct_member_pod_fieldA,
    ::apache::thrift::reflected_annotations<thrift_fatal_impl_detail::ReflectionStruct_cpp2_reflection__struct_unique_annotations::members::fieldA>,
    ReflectionStruct,
    true
  >;
};

} // thrift_fatal_impl_detail
THRIFT_REGISTER_STRUCT_TRAITS(
  ReflectionStruct,
  thrift_fatal_impl_detail::cpp2_reflection__unique_strings_list::ReflectionStruct,
  thrift_fatal_impl_detail::ReflectionStruct_cpp2_reflection__struct_unique_member_info_list,
  ::fatal::list<
      thrift_fatal_impl_detail::ReflectionStruct_cpp2_reflection__struct_unique_member_info_list::fieldA
  >,
  thrift_fatal_impl_detail::ReflectionStruct_cpp2_reflection__struct_unique_annotations::members,
  ::apache::thrift::detail::type_common_metadata_impl<
    reflection_tags::module,
    ::apache::thrift::reflected_annotations<thrift_fatal_impl_detail::ReflectionStruct_cpp2_reflection__struct_unique_annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(4987617794584644204ull)
  >
);

} // cpp2
namespace apache { namespace thrift { namespace detail {

}}} // apache::thrift::detail
