#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from folly.iobuf import IOBuf as __IOBuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET, NOTSETTYPE
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
import enum as __enum


class AnEnum(__enum.Enum, _typing.SupportsInt):
    FIELDA: AnEnum = ...
    FIELDB: AnEnum = ...
    value: int
    def __int__(self) -> int: ...


class AStruct(thrift.py3.types.Struct, _typing.Hashable, _typing.Iterable[_typing.Tuple[str, _typing.Any]]):
    def __init__(
        self, *,
        FieldA: _typing.Optional[int]=None
    ) -> None: ...

    def __call__(
        self, *,
        FieldA: _typing.Union[int, NOTSETTYPE, None]=NOTSET
    ) -> AStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['AStruct'], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'AStruct') -> bool: ...

    @property
    def FieldA(self) -> int: ...


class AStructB(thrift.py3.types.Struct, _typing.Hashable, _typing.Iterable[_typing.Tuple[str, _typing.Any]]):
    def __init__(
        self, *,
        FieldA: _typing.Optional['AStruct']=None
    ) -> None: ...

    def __call__(
        self, *,
        FieldA: _typing.Union['AStruct', NOTSETTYPE, None]=NOTSET
    ) -> AStructB: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['AStructB'], bytes]]: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'AStructB') -> bool: ...

    @property
    def FieldA(self) -> _typing.Optional['AStruct']: ...


IncludedConstant: int = ...
IncludedInt64 = int
