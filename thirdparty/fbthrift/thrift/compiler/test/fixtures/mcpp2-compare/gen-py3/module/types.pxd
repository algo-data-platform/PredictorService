#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap, pair as cpair
from thrift.py3.exceptions cimport cTException
cimport folly.iobuf as __iobuf
cimport thrift.py3.exceptions
cimport thrift.py3.types
from folly.optional cimport cOptional
cimport includes.types as _includes_types

cdef extern from "<folly/small_vector.h>":
  pass
cdef extern from * nogil:
    cdef cppclass std_list "std::list"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_list() except +
        std_list(std_list&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass std_deque "std::deque"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_deque() except +
        std_deque(std_deque&) except +

        T& operator[](size_type)
        void push_back(T&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_sorted_vector_set "folly::sorted_vector_set"[T]:
        ctypedef T value_type
        ctypedef size_t size_type

        cppclass iterator:
            T& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            T& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_sorted_vector_set() except +
        folly_sorted_vector_set(folly_sorted_vector_set&) except +

        cpair[iterator, bint] insert(const T&) except +
        size_type size()
        size_type count(const T&)
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_sorted_vector_map "folly::sorted_vector_map"[T, U]:
        ctypedef T key_type
        ctypedef U mapped_type
        ctypedef size_t size_type

        cppclass iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cpair[T, U]& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_sorted_vector_map() except +
        folly_sorted_vector_map(folly_sorted_vector_map&) except +

        cpair[iterator, bint] insert(cpair[T, U]) except +
        iterator find(const T&)
        size_type count(const T&)
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from *:
    ctypedef string folly_IOBuf "folly::IOBuf"
cdef extern from *:
    ctypedef string std_unique_ptr_folly_IOBuf "std::unique_ptr<folly::IOBuf>"
cdef extern from *:
    ctypedef double Bar "Bar"
cdef extern from *:
    ctypedef int32_t Baz "Baz"
cdef extern from *:
    ctypedef string FooBar "FooBar"
cdef extern from *:
    ctypedef int32_t CppFakeI32 "CppFakeI32"
cdef extern from * nogil:
    cdef cppclass folly_small_vector_int64_t_8 "folly::small_vector<int64_t, 8 /* maxInline */>":
        ctypedef int64_t value_type
        ctypedef size_t size_type

        cppclass iterator:
            int64_t& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            int64_t& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_small_vector_int64_t_8() except +
        folly_small_vector_int64_t_8(folly_small_vector_int64_t_8&) except +

        int64_t& operator[](size_type)
        void push_back(int64_t&) except +
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass folly_sorted_vector_set_std_string "folly::sorted_vector_set<std::string>":
        ctypedef string value_type
        ctypedef size_t size_type

        cppclass iterator:
            string& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            string& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        folly_sorted_vector_set_std_string() except +
        folly_sorted_vector_set_std_string(folly_sorted_vector_set_std_string&) except +

        cpair[iterator, bint] insert(const string&) except +
        size_type size()
        size_type count(const string&)
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass FakeMap "FakeMap":
        ctypedef int64_t key_type
        ctypedef double mapped_type
        ctypedef size_t size_type

        cppclass iterator:
            cpair[int64_t, double]& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cpair[int64_t, double]& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        FakeMap() except +
        FakeMap(FakeMap&) except +

        cpair[iterator, bint] insert(cpair[int64_t, double]) except +
        iterator find(const int64_t&)
        size_type count(const int64_t&)
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from * nogil:
    cdef cppclass std_unordered_map_std_string_containerStruct "std::unordered_map<std::string, containerStruct>":
        ctypedef string key_type
        ctypedef ccontainerStruct mapped_type
        ctypedef size_t size_type

        cppclass iterator:
            cpair[string, ccontainerStruct]& operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        cppclass reverse_iterator:
            cpair[string, ccontainerStruct]& operator*()
            iterator operator++()
            bint operator==(reverse_iterator)
            bint operator!=(reverse_iterator)

        std_unordered_map_std_string_containerStruct() except +
        std_unordered_map_std_string_containerStruct(std_unordered_map_std_string_containerStruct&) except +

        cpair[iterator, bint] insert(cpair[string, ccontainerStruct]) except +
        iterator find(const string&)
        size_type count(const string&)
        size_type size()
        iterator begin()
        iterator end()
        reverse_iterator rbegin()
        reverse_iterator rend()
        void clear()
        bint empty()

cdef extern from *:
    ctypedef int64_t Foo "Foo"

cdef extern from "src/gen-cpp2/module_types.h" namespace "some::valid::ns":
    cdef cppclass cMyEnumA "some::valid::ns::MyEnumA":
        bint operator==(cMyEnumA&)
    cMyEnumA MyEnumA__fieldA "some::valid::ns::MyEnumA::fieldA"
    cMyEnumA MyEnumA__fieldB "some::valid::ns::MyEnumA::fieldB"
    cMyEnumA MyEnumA__fieldC "some::valid::ns::MyEnumA::fieldC"
    cdef cppclass cAnnotatedEnum "some::valid::ns::AnnotatedEnum":
        bint operator==(cAnnotatedEnum&)
    cAnnotatedEnum AnnotatedEnum__FIELDA "some::valid::ns::AnnotatedEnum::FIELDA"
    cAnnotatedEnum AnnotatedEnum__FIELDB "some::valid::ns::AnnotatedEnum::FIELDB"
    cAnnotatedEnum AnnotatedEnum__FIELDC "some::valid::ns::AnnotatedEnum::FIELDC"
    cdef cppclass cAnnotatedEnum2 "some::valid::ns::AnnotatedEnum2":
        bint operator==(cAnnotatedEnum2&)
    cAnnotatedEnum2 AnnotatedEnum2__FIELDA "some::valid::ns::AnnotatedEnum2::FIELDA"
    cAnnotatedEnum2 AnnotatedEnum2__FIELDB "some::valid::ns::AnnotatedEnum2::FIELDB"
    cAnnotatedEnum2 AnnotatedEnum2__FIELDC "some::valid::ns::AnnotatedEnum2::FIELDC"
    cdef cppclass cMyEnumB "some::valid::ns::MyEnumB":
        bint operator==(cMyEnumB&)
    cMyEnumB MyEnumB__AField "some::valid::ns::MyEnumB::AField"

cdef cMyEnumA MyEnumA_to_cpp(value)
cdef cAnnotatedEnum AnnotatedEnum_to_cpp(value)
cdef cAnnotatedEnum2 AnnotatedEnum2_to_cpp(value)
cdef cMyEnumB MyEnumB_to_cpp(value)

cdef extern from "src/gen-cpp2/module_types_custom_protocol.h" namespace "some::valid::ns":
    # Forward Declaration
    cdef cppclass cEmpty "some::valid::ns::Empty"
    # Forward Declaration
    cdef cppclass cASimpleStruct "some::valid::ns::ASimpleStruct"
    # Forward Declaration
    cdef cppclass cASimpleStructNoexcept "some::valid::ns::ASimpleStructNoexcept"
    # Forward Declaration
    cdef cppclass cMyStruct "some::valid::ns::MyStruct"
    # Forward Declaration
    cdef cppclass cSimpleUnion "some::valid::ns::SimpleUnion"
    # Forward Declaration
    cdef cppclass cComplexUnion "some::valid::ns::ComplexUnion"
    # Forward Declaration
    cdef cppclass cAnException "some::valid::ns::AnException"(cTException)
    # Forward Declaration
    cdef cppclass cAnotherException "some::valid::ns::AnotherException"(cTException)
    # Forward Declaration
    cdef cppclass ccontainerStruct "some::valid::ns::containerStruct"
    # Forward Declaration
    cdef cppclass cMyIncludedStruct "some::valid::ns::MyIncludedStruct"
    # Forward Declaration
    cdef cppclass cAnnotatedStruct "some::valid::ns::AnnotatedStruct"
    # Forward Declaration
    cdef cppclass cFloatStruct "some::valid::ns::FloatStruct"
    # Forward Declaration
    cdef cppclass cFloatUnion "some::valid::ns::FloatUnion"
    # Forward Declaration
    cdef cppclass cAllRequiredNoExceptMoveCtrStruct "some::valid::ns::AllRequiredNoExceptMoveCtrStruct"

cdef extern from "src/gen-cpp2/module_types.h" namespace "some::valid::ns":
    cdef cppclass cEmpty__isset "some::valid::ns::Empty::__isset":
        pass

    cdef cppclass cEmpty "some::valid::ns::Empty":
        cEmpty() except +
        cEmpty(const cEmpty&) except +
        bint operator==(cEmpty&)
        cEmpty__isset __isset

    cdef cppclass cASimpleStruct__isset "some::valid::ns::ASimpleStruct::__isset":
        bint boolField

    cdef cppclass cASimpleStruct "some::valid::ns::ASimpleStruct":
        cASimpleStruct() except +
        cASimpleStruct(const cASimpleStruct&) except +
        bint operator==(cASimpleStruct&)
        int64_t boolField
        cASimpleStruct__isset __isset

    cdef cppclass cASimpleStructNoexcept__isset "some::valid::ns::ASimpleStructNoexcept::__isset":
        bint boolField

    cdef cppclass cASimpleStructNoexcept "some::valid::ns::ASimpleStructNoexcept":
        cASimpleStructNoexcept() except +
        cASimpleStructNoexcept(const cASimpleStructNoexcept&) except +
        bint operator==(cASimpleStructNoexcept&)
        int64_t boolField
        cASimpleStructNoexcept__isset __isset

    cdef cppclass cMyStruct__isset "some::valid::ns::MyStruct::__isset":
        bint MyBoolField
        bint MyIntField
        bint MyStringField
        bint MyStringField2
        bint MyBinaryField
        bint MyBinaryField2
        bint MyBinaryField3
        bint MyBinaryListField4
        bint MyMapEnumAndInt

    cdef cppclass cMyStruct "some::valid::ns::MyStruct":
        cMyStruct() except +
        cMyStruct(const cMyStruct&) except +
        bint operator==(cMyStruct&)
        cbool MyBoolField
        int64_t MyIntField
        string MyStringField
        string MyStringField2
        string MyBinaryField
        string MyBinaryField2
        string MyBinaryField3
        vector[string] MyBinaryListField4
        cmap[cMyEnumA,string] MyMapEnumAndInt
        cMyStruct__isset __isset

    cdef enum cSimpleUnion__type "some::valid::ns::SimpleUnion::Type":
        cSimpleUnion__type___EMPTY__ "some::valid::ns::SimpleUnion::Type::__EMPTY__",
        cSimpleUnion__type_intValue "some::valid::ns::SimpleUnion::Type::intValue",
        cSimpleUnion__type_stringValue "some::valid::ns::SimpleUnion::Type::stringValue",

    cdef cppclass cSimpleUnion "some::valid::ns::SimpleUnion":
        cSimpleUnion() except +
        cSimpleUnion(const cSimpleUnion&) except +
        bint operator==(cSimpleUnion&)
        cSimpleUnion__type getType() const
        const int64_t& get_intValue() const
        int64_t& set_intValue(const int64_t&)
        const string& get_stringValue() const
        string& set_stringValue(const string&)

    cdef enum cComplexUnion__type "some::valid::ns::ComplexUnion::Type":
        cComplexUnion__type___EMPTY__ "some::valid::ns::ComplexUnion::Type::__EMPTY__",
        cComplexUnion__type_intValue "some::valid::ns::ComplexUnion::Type::intValue",
        cComplexUnion__type_req_intValue "some::valid::ns::ComplexUnion::Type::req_intValue",
        cComplexUnion__type_opt_intValue "some::valid::ns::ComplexUnion::Type::opt_intValue",
        cComplexUnion__type_stringValue "some::valid::ns::ComplexUnion::Type::stringValue",
        cComplexUnion__type_req_stringValue "some::valid::ns::ComplexUnion::Type::req_stringValue",
        cComplexUnion__type_opt_stringValue "some::valid::ns::ComplexUnion::Type::opt_stringValue",
        cComplexUnion__type_intValue2 "some::valid::ns::ComplexUnion::Type::intValue2",
        cComplexUnion__type_intValue3 "some::valid::ns::ComplexUnion::Type::intValue3",
        cComplexUnion__type_doubelValue "some::valid::ns::ComplexUnion::Type::doubelValue",
        cComplexUnion__type_boolValue "some::valid::ns::ComplexUnion::Type::boolValue",
        cComplexUnion__type_union_list "some::valid::ns::ComplexUnion::Type::union_list",
        cComplexUnion__type_union_set "some::valid::ns::ComplexUnion::Type::union_set",
        cComplexUnion__type_union_map "some::valid::ns::ComplexUnion::Type::union_map",
        cComplexUnion__type_req_union_map "some::valid::ns::ComplexUnion::Type::req_union_map",
        cComplexUnion__type_opt_union_map "some::valid::ns::ComplexUnion::Type::opt_union_map",
        cComplexUnion__type_enum_field "some::valid::ns::ComplexUnion::Type::enum_field",
        cComplexUnion__type_enum_container "some::valid::ns::ComplexUnion::Type::enum_container",
        cComplexUnion__type_a_struct "some::valid::ns::ComplexUnion::Type::a_struct",
        cComplexUnion__type_a_set_struct "some::valid::ns::ComplexUnion::Type::a_set_struct",
        cComplexUnion__type_a_union "some::valid::ns::ComplexUnion::Type::a_union",
        cComplexUnion__type_req_a_union "some::valid::ns::ComplexUnion::Type::req_a_union",
        cComplexUnion__type_opt_a_union "some::valid::ns::ComplexUnion::Type::opt_a_union",
        cComplexUnion__type_a_union_list "some::valid::ns::ComplexUnion::Type::a_union_list",
        cComplexUnion__type_a_union_typedef "some::valid::ns::ComplexUnion::Type::a_union_typedef",
        cComplexUnion__type_a_union_typedef_list "some::valid::ns::ComplexUnion::Type::a_union_typedef_list",
        cComplexUnion__type_MyBinaryField "some::valid::ns::ComplexUnion::Type::MyBinaryField",
        cComplexUnion__type_MyBinaryField2 "some::valid::ns::ComplexUnion::Type::MyBinaryField2",
        cComplexUnion__type_MyBinaryField3 "some::valid::ns::ComplexUnion::Type::MyBinaryField3",
        cComplexUnion__type_MyBinaryListField4 "some::valid::ns::ComplexUnion::Type::MyBinaryListField4",
        cComplexUnion__type_ref_field "some::valid::ns::ComplexUnion::Type::ref_field",
        cComplexUnion__type_ref_field2 "some::valid::ns::ComplexUnion::Type::ref_field2",
        cComplexUnion__type_excp_field "some::valid::ns::ComplexUnion::Type::excp_field",

    cdef cppclass cComplexUnion "some::valid::ns::ComplexUnion":
        cComplexUnion() except +
        cComplexUnion(const cComplexUnion&) except +
        bint operator==(cComplexUnion&)
        cComplexUnion__type getType() const
        const int64_t& get_intValue() const
        int64_t& set_intValue(const int64_t&)
        const int64_t& get_req_intValue() const
        int64_t& set_req_intValue(const int64_t&)
        const int64_t& get_opt_intValue() const
        int64_t& set_opt_intValue(const int64_t&)
        const string& get_stringValue() const
        string& set_stringValue(const string&)
        const string& get_req_stringValue() const
        string& set_req_stringValue(const string&)
        const string& get_opt_stringValue() const
        string& set_opt_stringValue(const string&)
        const int16_t& get_intValue2() const
        int16_t& set_intValue2(const int16_t&)
        const int32_t& get_intValue3() const
        int32_t& set_intValue3(const int32_t&)
        const double& get_doubelValue() const
        double& set_doubelValue(const double&)
        const cbool& get_boolValue() const
        cbool& set_boolValue(const cbool&)
        const vector[int32_t]& get_union_list() const
        vector[int32_t]& set_union_list(const vector[int32_t]&)
        const cset[int64_t]& get_union_set() const
        cset[int64_t]& set_union_set(const cset[int64_t]&)
        const cmap[string,int32_t]& get_union_map() const
        cmap[string,int32_t]& set_union_map(const cmap[string,int32_t]&)
        const cmap[string,int32_t]& get_req_union_map() const
        cmap[string,int32_t]& set_req_union_map(const cmap[string,int32_t]&)
        const cmap[string,int32_t]& get_opt_union_map() const
        cmap[string,int32_t]& set_opt_union_map(const cmap[string,int32_t]&)
        const cMyEnumA& get_enum_field() const
        cMyEnumA& set_enum_field(const cMyEnumA&)
        const vector[cMyEnumA]& get_enum_container() const
        vector[cMyEnumA]& set_enum_container(const vector[cMyEnumA]&)
        const cMyStruct& get_a_struct() const
        cMyStruct& set_a_struct(const cMyStruct&)
        const cset[cMyStruct]& get_a_set_struct() const
        cset[cMyStruct]& set_a_set_struct(const cset[cMyStruct]&)
        const cSimpleUnion& get_a_union() const
        cSimpleUnion& set_a_union(const cSimpleUnion&)
        const cSimpleUnion& get_req_a_union() const
        cSimpleUnion& set_req_a_union(const cSimpleUnion&)
        const cSimpleUnion& get_opt_a_union() const
        cSimpleUnion& set_opt_a_union(const cSimpleUnion&)
        const vector[cSimpleUnion]& get_a_union_list() const
        vector[cSimpleUnion]& set_a_union_list(const vector[cSimpleUnion]&)
        const cset[cSimpleUnion]& get_a_union_typedef() const
        cset[cSimpleUnion]& set_a_union_typedef(const cset[cSimpleUnion]&)
        const vector[cset[cSimpleUnion]]& get_a_union_typedef_list() const
        vector[cset[cSimpleUnion]]& set_a_union_typedef_list(const vector[cset[cSimpleUnion]]&)
        const string& get_MyBinaryField() const
        string& set_MyBinaryField(const string&)
        const string& get_MyBinaryField2() const
        string& set_MyBinaryField2(const string&)
        const string& get_MyBinaryField3() const
        string& set_MyBinaryField3(const string&)
        const vector[string]& get_MyBinaryListField4() const
        vector[string]& set_MyBinaryListField4(const vector[string]&)
        const unique_ptr[cMyStruct]& get_ref_field() const
        unique_ptr[cMyStruct]& set_ref_field(const cMyStruct&)
        const shared_ptr[const cMyStruct]& get_ref_field2() const
        shared_ptr[const cMyStruct]& set_ref_field2(const cMyStruct&)
        const cAnException& get_excp_field() const
        cAnException& set_excp_field(const cAnException&)

    cdef cppclass cAnException__isset "some::valid::ns::AnException::__isset":
        bint code
        bint req_code
        bint message2
        bint req_message
        bint exception_list
        bint exception_set
        bint exception_map
        bint req_exception_map
        bint enum_field
        bint enum_container
        bint a_struct
        bint a_set_struct
        bint a_union_list
        bint union_typedef
        bint a_union_typedef_list

    cdef cppclass cAnException "some::valid::ns::AnException"(cTException):
        cAnException() except +
        cAnException(const cAnException&) except +
        bint operator==(cAnException&)
        int32_t code
        int32_t req_code
        string message2
        string req_message
        vector[int32_t] exception_list
        cset[int64_t] exception_set
        cmap[string,int32_t] exception_map
        cmap[string,int32_t] req_exception_map
        cMyEnumA enum_field
        vector[cMyEnumA] enum_container
        cMyStruct a_struct
        cset[cMyStruct] a_set_struct
        vector[cSimpleUnion] a_union_list
        cset[cSimpleUnion] union_typedef
        vector[cset[cSimpleUnion]] a_union_typedef_list
        cAnException__isset __isset

    cdef cppclass cAnotherException__isset "some::valid::ns::AnotherException::__isset":
        bint code
        bint req_code
        bint message

    cdef cppclass cAnotherException "some::valid::ns::AnotherException"(cTException):
        cAnotherException() except +
        cAnotherException(const cAnotherException&) except +
        bint operator==(cAnotherException&)
        int32_t code
        int32_t req_code
        string message
        cAnotherException__isset __isset

    cdef cppclass ccontainerStruct__isset "some::valid::ns::containerStruct::__isset":
        bint fieldA
        bint req_fieldA
        bint opt_fieldA
        bint fieldB
        bint req_fieldB
        bint opt_fieldB
        bint fieldC
        bint req_fieldC
        bint opt_fieldC
        bint fieldD
        bint fieldE
        bint req_fieldE
        bint opt_fieldE
        bint fieldF
        bint fieldG
        bint fieldH
        bint fieldI
        bint fieldJ
        bint fieldK
        bint fieldL
        bint fieldM
        bint fieldN
        bint fieldO
        bint fieldP
        bint fieldQ
        bint fieldR
        bint req_fieldR
        bint opt_fieldR
        bint fieldS
        bint fieldT
        bint fieldU
        bint fieldV
        bint req_fieldV
        bint opt_fieldV
        bint fieldW
        bint fieldX
        bint req_fieldX
        bint opt_fieldX
        bint fieldY
        bint fieldZ
        bint fieldAA
        bint fieldAB
        bint fieldAC
        bint fieldAD
        bint fieldAE
        bint fieldSD

    cdef cppclass ccontainerStruct "some::valid::ns::containerStruct":
        ccontainerStruct() except +
        ccontainerStruct(const ccontainerStruct&) except +
        bint operator==(ccontainerStruct&)
        cbool fieldA
        cbool req_fieldA
        cbool opt_fieldA
        cmap[string,cbool] fieldB
        cmap[string,cbool] req_fieldB
        cmap[string,cbool] opt_fieldB
        cset[int32_t] fieldC
        cset[int32_t] req_fieldC
        cset[int32_t] opt_fieldC
        string fieldD
        string fieldE
        string req_fieldE
        string opt_fieldE
        vector[vector[int32_t]] fieldF
        cmap[string,cmap[string,cmap[string,int32_t]]] fieldG
        vector[cset[int32_t]] fieldH
        cbool fieldI
        cmap[string,vector[int32_t]] fieldJ
        vector[vector[vector[vector[int32_t]]]] fieldK
        cset[cset[cset[cbool]]] fieldL
        cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]] fieldM
        int32_t fieldN
        vector[cmap[cEmpty,cMyStruct]] fieldO
        vector[vector[vector[cmap[cEmpty,cMyStruct]]]] fieldP
        cMyEnumA fieldQ
        cMyEnumA fieldR
        cMyEnumA req_fieldR
        cMyEnumA opt_fieldR
        cMyEnumA fieldS
        vector[cMyEnumA] fieldT
        vector[cMyEnumA] fieldU
        cMyStruct fieldV
        cMyStruct req_fieldV
        cMyStruct opt_fieldV
        cset[cMyStruct] fieldW
        cComplexUnion fieldX
        cComplexUnion req_fieldX
        cComplexUnion opt_fieldX
        vector[cComplexUnion] fieldY
        cset[cSimpleUnion] fieldZ
        vector[cset[cSimpleUnion]] fieldAA
        cmap[Bar,Baz] fieldAB
        cMyEnumB fieldAC
        _includes_types.cAnEnum fieldAD
        cmap[string,int32_t] fieldAE
        FooBar fieldSD
        ccontainerStruct__isset __isset

    cdef cppclass cMyIncludedStruct__isset "some::valid::ns::MyIncludedStruct::__isset":
        bint MyIncludedInt
        bint MyIncludedStruct
        bint ARefField
        bint ARequiredField

    cdef cppclass cMyIncludedStruct "some::valid::ns::MyIncludedStruct":
        cMyIncludedStruct() except +
        cMyIncludedStruct(const cMyIncludedStruct&) except +
        bint operator==(cMyIncludedStruct&)
        int64_t MyIncludedInt
        _includes_types.cAStruct MyIncludedStruct
        unique_ptr[_includes_types.cAStruct] ARefField
        _includes_types.cAStruct ARequiredField
        cMyIncludedStruct__isset __isset

    cdef cppclass cAnnotatedStruct__isset "some::valid::ns::AnnotatedStruct::__isset":
        bint no_annotation
        bint cpp_unique_ref
        bint cpp2_unique_ref
        bint container_with_ref
        bint req_cpp_unique_ref
        bint req_cpp2_unique_ref
        bint req_container_with_ref
        bint opt_cpp_unique_ref
        bint opt_cpp2_unique_ref
        bint opt_container_with_ref
        bint ref_type_unique
        bint ref_type_shared
        bint ref_type_const
        bint req_ref_type_shared
        bint req_ref_type_const
        bint req_ref_type_unique
        bint opt_ref_type_const
        bint opt_ref_type_unique
        bint opt_ref_type_shared
        bint base_type
        bint list_type
        bint set_type
        bint map_type
        bint map_struct_type
        bint iobuf_type
        bint iobuf_ptr
        bint list_i32_template
        bint list_string_template
        bint set_template
        bint map_template
        bint typedef_list_template
        bint typedef_deque_template
        bint typedef_set_template
        bint typedef_map_template
        bint indirection_a
        bint indirection_b
        bint indirection_c
        bint iobuf_type_val
        bint iobuf_ptr_val
        bint struct_struct

    cdef cppclass cAnnotatedStruct "some::valid::ns::AnnotatedStruct":
        cAnnotatedStruct() except +
        cAnnotatedStruct(const cAnnotatedStruct&) except +
        bint operator==(cAnnotatedStruct&)
        ccontainerStruct no_annotation
        unique_ptr[ccontainerStruct] cpp_unique_ref
        unique_ptr[ccontainerStruct] cpp2_unique_ref
        unique_ptr[cmap[int32_t,vector[string]]] container_with_ref
        unique_ptr[ccontainerStruct] req_cpp_unique_ref
        unique_ptr[ccontainerStruct] req_cpp2_unique_ref
        unique_ptr[vector[string]] req_container_with_ref
        unique_ptr[ccontainerStruct] opt_cpp_unique_ref
        unique_ptr[ccontainerStruct] opt_cpp2_unique_ref
        unique_ptr[cset[int32_t]] opt_container_with_ref
        unique_ptr[ccontainerStruct] ref_type_unique
        shared_ptr[ccontainerStruct] ref_type_shared
        shared_ptr[const cmap[int32_t,vector[string]]] ref_type_const
        shared_ptr[ccontainerStruct] req_ref_type_shared
        shared_ptr[const ccontainerStruct] req_ref_type_const
        unique_ptr[vector[string]] req_ref_type_unique
        shared_ptr[const ccontainerStruct] opt_ref_type_const
        unique_ptr[ccontainerStruct] opt_ref_type_unique
        shared_ptr[cset[int32_t]] opt_ref_type_shared
        CppFakeI32 base_type
        folly_small_vector_int64_t_8 list_type
        folly_sorted_vector_set_std_string set_type
        FakeMap map_type
        std_unordered_map_std_string_containerStruct map_struct_type
        __iobuf.cIOBuf iobuf_type
        unique_ptr[__iobuf.cIOBuf] iobuf_ptr
        std_list[int32_t] list_i32_template
        std_deque[string] list_string_template
        folly_sorted_vector_set[string] set_template
        folly_sorted_vector_map[int64_t,string] map_template
        std_list[int32_t] typedef_list_template
        std_deque[string] typedef_deque_template
        folly_sorted_vector_set[string] typedef_set_template
        folly_sorted_vector_map[int64_t,string] typedef_map_template
        Foo indirection_a
        vector[Bar] indirection_b
        cset[Baz] indirection_c
        __iobuf.cIOBuf iobuf_type_val
        unique_ptr[__iobuf.cIOBuf] iobuf_ptr_val
        ccontainerStruct struct_struct
        cAnnotatedStruct__isset __isset

    cdef cppclass cFloatStruct__isset "some::valid::ns::FloatStruct::__isset":
        bint floatField
        bint doubleField

    cdef cppclass cFloatStruct "some::valid::ns::FloatStruct":
        cFloatStruct() except +
        cFloatStruct(const cFloatStruct&) except +
        bint operator==(cFloatStruct&)
        float floatField
        double doubleField
        cFloatStruct__isset __isset

    cdef enum cFloatUnion__type "some::valid::ns::FloatUnion::Type":
        cFloatUnion__type___EMPTY__ "some::valid::ns::FloatUnion::Type::__EMPTY__",
        cFloatUnion__type_floatSide "some::valid::ns::FloatUnion::Type::floatSide",
        cFloatUnion__type_doubleSide "some::valid::ns::FloatUnion::Type::doubleSide",

    cdef cppclass cFloatUnion "some::valid::ns::FloatUnion":
        cFloatUnion() except +
        cFloatUnion(const cFloatUnion&) except +
        bint operator==(cFloatUnion&)
        cFloatUnion__type getType() const
        const float& get_floatSide() const
        float& set_floatSide(const float&)
        const double& get_doubleSide() const
        double& set_doubleSide(const double&)

    cdef cppclass cAllRequiredNoExceptMoveCtrStruct__isset "some::valid::ns::AllRequiredNoExceptMoveCtrStruct::__isset":
        bint intField

    cdef cppclass cAllRequiredNoExceptMoveCtrStruct "some::valid::ns::AllRequiredNoExceptMoveCtrStruct":
        cAllRequiredNoExceptMoveCtrStruct() except +
        cAllRequiredNoExceptMoveCtrStruct(const cAllRequiredNoExceptMoveCtrStruct&) except +
        bint operator==(cAllRequiredNoExceptMoveCtrStruct&)
        int64_t intField
        cAllRequiredNoExceptMoveCtrStruct__isset __isset

    cdef shared_ptr[cMyStruct] aliasing_constructor_ref_field "std::shared_ptr<some::valid::ns::MyStruct>"(shared_ptr[cComplexUnion]&, cMyStruct*)
    cdef shared_ptr[cMyStruct] aliasing_constructor_ref_field2 "std::shared_ptr<some::valid::ns::MyStruct>"(shared_ptr[cComplexUnion]&, cMyStruct*)
    cdef shared_ptr[_includes_types.cAStruct] aliasing_constructor_ARefField "std::shared_ptr<a::different::ns::AStruct>"(shared_ptr[cMyIncludedStruct]&, _includes_types.cAStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_cpp_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_cpp2_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[cmap[int32_t,vector[string]]] aliasing_constructor_container_with_ref "std::shared_ptr<std::map<int32_t,std::vector<std::string>>>"(shared_ptr[cAnnotatedStruct]&, cmap[int32_t,vector[string]]*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_req_cpp_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_req_cpp2_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[vector[string]] aliasing_constructor_req_container_with_ref "std::shared_ptr<std::vector<std::string>>"(shared_ptr[cAnnotatedStruct]&, vector[string]*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_opt_cpp_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_opt_cpp2_unique_ref "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[cset[int32_t]] aliasing_constructor_opt_container_with_ref "std::shared_ptr<std::set<int32_t>>"(shared_ptr[cAnnotatedStruct]&, cset[int32_t]*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_ref_type_unique "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_ref_type_shared "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[cmap[int32_t,vector[string]]] aliasing_constructor_ref_type_const "std::shared_ptr<std::map<int32_t,std::vector<std::string>>>"(shared_ptr[cAnnotatedStruct]&, cmap[int32_t,vector[string]]*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_req_ref_type_shared "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_req_ref_type_const "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[vector[string]] aliasing_constructor_req_ref_type_unique "std::shared_ptr<std::vector<std::string>>"(shared_ptr[cAnnotatedStruct]&, vector[string]*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_opt_ref_type_const "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[ccontainerStruct] aliasing_constructor_opt_ref_type_unique "std::shared_ptr<some::valid::ns::containerStruct>"(shared_ptr[cAnnotatedStruct]&, ccontainerStruct*)
    cdef shared_ptr[cset[int32_t]] aliasing_constructor_opt_ref_type_shared "std::shared_ptr<std::set<int32_t>>"(shared_ptr[cAnnotatedStruct]&, cset[int32_t]*)
    cdef shared_ptr[std_unique_ptr_folly_IOBuf] aliasing_constructor_iobuf_ptr "std::shared_ptr<std::unique_ptr<folly::IOBuf>>"(shared_ptr[cAnnotatedStruct]&, std_unique_ptr_folly_IOBuf*)
    cdef shared_ptr[std_unique_ptr_folly_IOBuf] aliasing_constructor_iobuf_ptr_val "std::shared_ptr<std::unique_ptr<folly::IOBuf>>"(shared_ptr[cAnnotatedStruct]&, std_unique_ptr_folly_IOBuf*)

cdef extern from "<utility>" namespace "std" nogil:
    cdef shared_ptr[cEmpty] move(unique_ptr[cEmpty])
    cdef shared_ptr[cEmpty] move_shared "std::move"(shared_ptr[cEmpty])
    cdef unique_ptr[cEmpty] move_unique "std::move"(unique_ptr[cEmpty])
    cdef shared_ptr[cASimpleStruct] move(unique_ptr[cASimpleStruct])
    cdef shared_ptr[cASimpleStruct] move_shared "std::move"(shared_ptr[cASimpleStruct])
    cdef unique_ptr[cASimpleStruct] move_unique "std::move"(unique_ptr[cASimpleStruct])
    cdef shared_ptr[cASimpleStructNoexcept] move(unique_ptr[cASimpleStructNoexcept])
    cdef shared_ptr[cASimpleStructNoexcept] move_shared "std::move"(shared_ptr[cASimpleStructNoexcept])
    cdef unique_ptr[cASimpleStructNoexcept] move_unique "std::move"(unique_ptr[cASimpleStructNoexcept])
    cdef shared_ptr[cMyStruct] move(unique_ptr[cMyStruct])
    cdef shared_ptr[cMyStruct] move_shared "std::move"(shared_ptr[cMyStruct])
    cdef unique_ptr[cMyStruct] move_unique "std::move"(unique_ptr[cMyStruct])
    cdef shared_ptr[cSimpleUnion] move(unique_ptr[cSimpleUnion])
    cdef shared_ptr[cSimpleUnion] move_shared "std::move"(shared_ptr[cSimpleUnion])
    cdef unique_ptr[cSimpleUnion] move_unique "std::move"(unique_ptr[cSimpleUnion])
    cdef shared_ptr[cComplexUnion] move(unique_ptr[cComplexUnion])
    cdef shared_ptr[cComplexUnion] move_shared "std::move"(shared_ptr[cComplexUnion])
    cdef unique_ptr[cComplexUnion] move_unique "std::move"(unique_ptr[cComplexUnion])
    cdef shared_ptr[cAnException] move(unique_ptr[cAnException])
    cdef shared_ptr[cAnException] move_shared "std::move"(shared_ptr[cAnException])
    cdef unique_ptr[cAnException] move_unique "std::move"(unique_ptr[cAnException])
    cdef shared_ptr[cAnotherException] move(unique_ptr[cAnotherException])
    cdef shared_ptr[cAnotherException] move_shared "std::move"(shared_ptr[cAnotherException])
    cdef unique_ptr[cAnotherException] move_unique "std::move"(unique_ptr[cAnotherException])
    cdef shared_ptr[ccontainerStruct] move(unique_ptr[ccontainerStruct])
    cdef shared_ptr[ccontainerStruct] move_shared "std::move"(shared_ptr[ccontainerStruct])
    cdef unique_ptr[ccontainerStruct] move_unique "std::move"(unique_ptr[ccontainerStruct])
    cdef shared_ptr[cMyIncludedStruct] move(unique_ptr[cMyIncludedStruct])
    cdef shared_ptr[cMyIncludedStruct] move_shared "std::move"(shared_ptr[cMyIncludedStruct])
    cdef unique_ptr[cMyIncludedStruct] move_unique "std::move"(unique_ptr[cMyIncludedStruct])
    cdef shared_ptr[cAnnotatedStruct] move(unique_ptr[cAnnotatedStruct])
    cdef shared_ptr[cAnnotatedStruct] move_shared "std::move"(shared_ptr[cAnnotatedStruct])
    cdef unique_ptr[cAnnotatedStruct] move_unique "std::move"(unique_ptr[cAnnotatedStruct])
    cdef shared_ptr[cFloatStruct] move(unique_ptr[cFloatStruct])
    cdef shared_ptr[cFloatStruct] move_shared "std::move"(shared_ptr[cFloatStruct])
    cdef unique_ptr[cFloatStruct] move_unique "std::move"(unique_ptr[cFloatStruct])
    cdef shared_ptr[cFloatUnion] move(unique_ptr[cFloatUnion])
    cdef shared_ptr[cFloatUnion] move_shared "std::move"(shared_ptr[cFloatUnion])
    cdef unique_ptr[cFloatUnion] move_unique "std::move"(unique_ptr[cFloatUnion])
    cdef shared_ptr[cAllRequiredNoExceptMoveCtrStruct] move(unique_ptr[cAllRequiredNoExceptMoveCtrStruct])
    cdef shared_ptr[cAllRequiredNoExceptMoveCtrStruct] move_shared "std::move"(shared_ptr[cAllRequiredNoExceptMoveCtrStruct])
    cdef unique_ptr[cAllRequiredNoExceptMoveCtrStruct] move_unique "std::move"(unique_ptr[cAllRequiredNoExceptMoveCtrStruct])

cdef extern from "<memory>" namespace "std" nogil:
    cdef shared_ptr[const cEmpty] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::Empty>"(shared_ptr[cEmpty])
    cdef shared_ptr[const cASimpleStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::ASimpleStruct>"(shared_ptr[cASimpleStruct])
    cdef shared_ptr[const cASimpleStructNoexcept] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::ASimpleStructNoexcept>"(shared_ptr[cASimpleStructNoexcept])
    cdef shared_ptr[const cMyStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::MyStruct>"(shared_ptr[cMyStruct])
    cdef shared_ptr[const cSimpleUnion] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::SimpleUnion>"(shared_ptr[cSimpleUnion])
    cdef shared_ptr[const cComplexUnion] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::ComplexUnion>"(shared_ptr[cComplexUnion])
    cdef shared_ptr[const cAnException] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::AnException>"(shared_ptr[cAnException])
    cdef shared_ptr[const cAnotherException] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::AnotherException>"(shared_ptr[cAnotherException])
    cdef shared_ptr[const ccontainerStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::containerStruct>"(shared_ptr[ccontainerStruct])
    cdef shared_ptr[const cMyIncludedStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::MyIncludedStruct>"(shared_ptr[cMyIncludedStruct])
    cdef shared_ptr[const cAnnotatedStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::AnnotatedStruct>"(shared_ptr[cAnnotatedStruct])
    cdef shared_ptr[const cFloatStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::FloatStruct>"(shared_ptr[cFloatStruct])
    cdef shared_ptr[const cFloatUnion] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::FloatUnion>"(shared_ptr[cFloatUnion])
    cdef shared_ptr[const cAllRequiredNoExceptMoveCtrStruct] const_pointer_cast "std::const_pointer_cast<const some::valid::ns::AllRequiredNoExceptMoveCtrStruct>"(shared_ptr[cAllRequiredNoExceptMoveCtrStruct])

# Forward Definition of the cython struct
cdef class Empty(thrift.py3.types.Struct)

cdef class Empty(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cEmpty] _cpp_obj

    @staticmethod
    cdef unique_ptr[cEmpty] _make_instance(
        cEmpty* base_instance
    ) except *

    @staticmethod
    cdef create(shared_ptr[cEmpty])

# Forward Definition of the cython struct
cdef class ASimpleStruct(thrift.py3.types.Struct)

cdef class ASimpleStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cASimpleStruct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cASimpleStruct] _make_instance(
        cASimpleStruct* base_instance,
        object boolField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cASimpleStruct])

# Forward Definition of the cython struct
cdef class ASimpleStructNoexcept(thrift.py3.types.Struct)

cdef class ASimpleStructNoexcept(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cASimpleStructNoexcept] _cpp_obj

    @staticmethod
    cdef unique_ptr[cASimpleStructNoexcept] _make_instance(
        cASimpleStructNoexcept* base_instance,
        object boolField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cASimpleStructNoexcept])

# Forward Definition of the cython struct
cdef class MyStruct(thrift.py3.types.Struct)

cdef class MyStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMyStruct] _cpp_obj
    cdef List__binary __MyBinaryListField4
    cdef Map__MyEnumA_string __MyMapEnumAndInt

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        object MyBoolField,
        object MyIntField,
        object MyStringField,
        object MyStringField2,
        object MyBinaryField,
        object MyBinaryField2,
        object MyBinaryField3,
        object MyBinaryListField4,
        object MyMapEnumAndInt
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMyStruct])

# Forward Definition of the cython struct
cdef class SimpleUnion(thrift.py3.types.Union)

cdef class SimpleUnion(thrift.py3.types.Union):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cSimpleUnion] _cpp_obj
    cdef readonly object type
    cdef readonly object value
    cdef _load_cache(SimpleUnion self)

    @staticmethod
    cdef unique_ptr[cSimpleUnion] _make_instance(
        cSimpleUnion* base_instance,
        object intValue,
        object stringValue
    ) except *

    @staticmethod
    cdef create(shared_ptr[cSimpleUnion])

# Forward Definition of the cython struct
cdef class ComplexUnion(thrift.py3.types.Union)

cdef class ComplexUnion(thrift.py3.types.Union):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cComplexUnion] _cpp_obj
    cdef readonly object type
    cdef readonly object value
    cdef _load_cache(ComplexUnion self)

    @staticmethod
    cdef unique_ptr[cComplexUnion] _make_instance(
        cComplexUnion* base_instance,
        object intValue,
        object req_intValue,
        object opt_intValue,
        object stringValue,
        object req_stringValue,
        object opt_stringValue,
        object intValue2,
        object intValue3,
        object doubelValue,
        object boolValue,
        object union_list,
        object union_set,
        object union_map,
        object req_union_map,
        object opt_union_map,
        object enum_field,
        object enum_container,
        object a_struct,
        object a_set_struct,
        object a_union,
        object req_a_union,
        object opt_a_union,
        object a_union_list,
        object a_union_typedef,
        object a_union_typedef_list,
        object MyBinaryField,
        object MyBinaryField2,
        object MyBinaryField3,
        object MyBinaryListField4,
        object ref_field,
        object ref_field2,
        object excp_field
    ) except *

    @staticmethod
    cdef create(shared_ptr[cComplexUnion])

# Forward Definition of the cython struct
cdef class AnException(thrift.py3.exceptions.Error)

cdef class AnException(thrift.py3.exceptions.Error):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cAnException] _cpp_obj
    cdef List__i32 __exception_list
    cdef Set__i64 __exception_set
    cdef Map__string_i32 __exception_map
    cdef Map__string_i32 __req_exception_map
    cdef List__MyEnumA __enum_container
    cdef MyStruct __a_struct
    cdef Set__MyStruct __a_set_struct
    cdef List__SimpleUnion __a_union_list
    cdef Set__SimpleUnion __union_typedef
    cdef List__Set__SimpleUnion __a_union_typedef_list

    @staticmethod
    cdef unique_ptr[cAnException] _make_instance(
        cAnException* base_instance,
        object code,
        object req_code,
        object message2,
        object req_message,
        object exception_list,
        object exception_set,
        object exception_map,
        object req_exception_map,
        object enum_field,
        object enum_container,
        object a_struct,
        object a_set_struct,
        object a_union_list,
        object union_typedef,
        object a_union_typedef_list
    ) except *

    @staticmethod
    cdef create(shared_ptr[cAnException])

# Forward Definition of the cython struct
cdef class AnotherException(thrift.py3.exceptions.Error)

cdef class AnotherException(thrift.py3.exceptions.Error):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cAnotherException] _cpp_obj

    @staticmethod
    cdef unique_ptr[cAnotherException] _make_instance(
        cAnotherException* base_instance,
        object code,
        object req_code,
        object message
    ) except *

    @staticmethod
    cdef create(shared_ptr[cAnotherException])

# Forward Definition of the cython struct
cdef class containerStruct(thrift.py3.types.Struct)

cdef class containerStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[ccontainerStruct] _cpp_obj
    cdef Map__string_bool __fieldB
    cdef Map__string_bool __req_fieldB
    cdef Map__string_bool __opt_fieldB
    cdef Set__i32 __fieldC
    cdef Set__i32 __req_fieldC
    cdef Set__i32 __opt_fieldC
    cdef List__List__i32 __fieldF
    cdef Map__string_Map__string_Map__string_i32 __fieldG
    cdef List__Set__i32 __fieldH
    cdef Map__string_List__i32 __fieldJ
    cdef List__List__List__List__i32 __fieldK
    cdef Set__Set__Set__bool __fieldL
    cdef Map__Set__List__i32_Map__List__Set__string_string __fieldM
    cdef List__Map__Empty_MyStruct __fieldO
    cdef List__List__List__Map__Empty_MyStruct __fieldP
    cdef List__MyEnumA __fieldT
    cdef List__MyEnumA __fieldU
    cdef MyStruct __fieldV
    cdef MyStruct __req_fieldV
    cdef MyStruct __opt_fieldV
    cdef Set__MyStruct __fieldW
    cdef ComplexUnion __fieldX
    cdef ComplexUnion __req_fieldX
    cdef ComplexUnion __opt_fieldX
    cdef List__ComplexUnion __fieldY
    cdef Set__SimpleUnion __fieldZ
    cdef List__Set__SimpleUnion __fieldAA
    cdef Map__Bar__double_Baz__i32 __fieldAB
    cdef Map__string_i32 __fieldAE

    @staticmethod
    cdef unique_ptr[ccontainerStruct] _make_instance(
        ccontainerStruct* base_instance,
        object fieldA,
        object req_fieldA,
        object opt_fieldA,
        object fieldB,
        object req_fieldB,
        object opt_fieldB,
        object fieldC,
        object req_fieldC,
        object opt_fieldC,
        object fieldD,
        object fieldE,
        object req_fieldE,
        object opt_fieldE,
        object fieldF,
        object fieldG,
        object fieldH,
        object fieldI,
        object fieldJ,
        object fieldK,
        object fieldL,
        object fieldM,
        object fieldN,
        object fieldO,
        object fieldP,
        object fieldQ,
        object fieldR,
        object req_fieldR,
        object opt_fieldR,
        object fieldS,
        object fieldT,
        object fieldU,
        object fieldV,
        object req_fieldV,
        object opt_fieldV,
        object fieldW,
        object fieldX,
        object req_fieldX,
        object opt_fieldX,
        object fieldY,
        object fieldZ,
        object fieldAA,
        object fieldAB,
        object fieldAC,
        object fieldAD,
        object fieldAE,
        object fieldSD
    ) except *

    @staticmethod
    cdef create(shared_ptr[ccontainerStruct])

# Forward Definition of the cython struct
cdef class MyIncludedStruct(thrift.py3.types.Struct)

cdef class MyIncludedStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cMyIncludedStruct] _cpp_obj
    cdef _includes_types.AStruct __MyIncludedStruct
    cdef _includes_types.AStruct __ARefField
    cdef _includes_types.AStruct __ARequiredField

    @staticmethod
    cdef unique_ptr[cMyIncludedStruct] _make_instance(
        cMyIncludedStruct* base_instance,
        object MyIncludedInt,
        object MyIncludedStruct,
        object ARefField,
        object ARequiredField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cMyIncludedStruct])

# Forward Definition of the cython struct
cdef class AnnotatedStruct(thrift.py3.types.Struct)

cdef class AnnotatedStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cAnnotatedStruct] _cpp_obj
    cdef containerStruct __no_annotation
    cdef containerStruct __cpp_unique_ref
    cdef containerStruct __cpp2_unique_ref
    cdef Map__i32_List__string __container_with_ref
    cdef containerStruct __req_cpp_unique_ref
    cdef containerStruct __req_cpp2_unique_ref
    cdef List__string __req_container_with_ref
    cdef containerStruct __opt_cpp_unique_ref
    cdef containerStruct __opt_cpp2_unique_ref
    cdef Set__i32 __opt_container_with_ref
    cdef containerStruct __ref_type_unique
    cdef containerStruct __ref_type_shared
    cdef Map__i32_List__string __ref_type_const
    cdef containerStruct __req_ref_type_shared
    cdef containerStruct __req_ref_type_const
    cdef List__string __req_ref_type_unique
    cdef containerStruct __opt_ref_type_const
    cdef containerStruct __opt_ref_type_unique
    cdef Set__i32 __opt_ref_type_shared
    cdef folly_small_vector_int64_t_8__List__i64 __list_type
    cdef folly_sorted_vector_set_std_string__Set__string __set_type
    cdef FakeMap__Map__i64_double __map_type
    cdef std_unordered_map_std_string_containerStruct__Map__string_containerStruct __map_struct_type
    cdef __iobuf.IOBuf __iobuf_type
    cdef __iobuf.IOBuf __iobuf_ptr
    cdef std_list__List__i32 __list_i32_template
    cdef std_deque__List__string __list_string_template
    cdef folly_sorted_vector_set__Set__string __set_template
    cdef folly_sorted_vector_map__Map__i64_string __map_template
    cdef std_list__List__i32 __typedef_list_template
    cdef std_deque__List__string __typedef_deque_template
    cdef folly_sorted_vector_set__Set__string __typedef_set_template
    cdef folly_sorted_vector_map__Map__i64_string __typedef_map_template
    cdef List__Bar__double __indirection_b
    cdef Set__Baz__i32 __indirection_c
    cdef __iobuf.IOBuf __iobuf_type_val
    cdef __iobuf.IOBuf __iobuf_ptr_val
    cdef containerStruct __struct_struct

    @staticmethod
    cdef unique_ptr[cAnnotatedStruct] _make_instance(
        cAnnotatedStruct* base_instance,
        object no_annotation,
        object cpp_unique_ref,
        object cpp2_unique_ref,
        object container_with_ref,
        object req_cpp_unique_ref,
        object req_cpp2_unique_ref,
        object req_container_with_ref,
        object opt_cpp_unique_ref,
        object opt_cpp2_unique_ref,
        object opt_container_with_ref,
        object ref_type_unique,
        object ref_type_shared,
        object ref_type_const,
        object req_ref_type_shared,
        object req_ref_type_const,
        object req_ref_type_unique,
        object opt_ref_type_const,
        object opt_ref_type_unique,
        object opt_ref_type_shared,
        object base_type,
        object list_type,
        object set_type,
        object map_type,
        object map_struct_type,
        object iobuf_type,
        object iobuf_ptr,
        object list_i32_template,
        object list_string_template,
        object set_template,
        object map_template,
        object typedef_list_template,
        object typedef_deque_template,
        object typedef_set_template,
        object typedef_map_template,
        object indirection_a,
        object indirection_b,
        object indirection_c,
        object iobuf_type_val,
        object iobuf_ptr_val,
        object struct_struct
    ) except *

    @staticmethod
    cdef create(shared_ptr[cAnnotatedStruct])

# Forward Definition of the cython struct
cdef class FloatStruct(thrift.py3.types.Struct)

cdef class FloatStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cFloatStruct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cFloatStruct] _make_instance(
        cFloatStruct* base_instance,
        object floatField,
        object doubleField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cFloatStruct])

# Forward Definition of the cython struct
cdef class FloatUnion(thrift.py3.types.Union)

cdef class FloatUnion(thrift.py3.types.Union):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cFloatUnion] _cpp_obj
    cdef readonly object type
    cdef readonly object value
    cdef _load_cache(FloatUnion self)

    @staticmethod
    cdef unique_ptr[cFloatUnion] _make_instance(
        cFloatUnion* base_instance,
        object floatSide,
        object doubleSide
    ) except *

    @staticmethod
    cdef create(shared_ptr[cFloatUnion])

# Forward Definition of the cython struct
cdef class AllRequiredNoExceptMoveCtrStruct(thrift.py3.types.Struct)

cdef class AllRequiredNoExceptMoveCtrStruct(thrift.py3.types.Struct):
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cAllRequiredNoExceptMoveCtrStruct] _cpp_obj

    @staticmethod
    cdef unique_ptr[cAllRequiredNoExceptMoveCtrStruct] _make_instance(
        cAllRequiredNoExceptMoveCtrStruct* base_instance,
        object intField
    ) except *

    @staticmethod
    cdef create(shared_ptr[cAllRequiredNoExceptMoveCtrStruct])


cdef class Map__string_i64:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,int64_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,int64_t]])
    @staticmethod
    cdef unique_ptr[cmap[string,int64_t]] _make_instance(object items) except *

cdef class Map__Empty_MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[cEmpty,cMyStruct]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[cEmpty,cMyStruct]])
    @staticmethod
    cdef unique_ptr[cmap[cEmpty,cMyStruct]] _make_instance(object items) except *

cdef class List__Map__Empty_MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cmap[cEmpty,cMyStruct]]])
    @staticmethod
    cdef unique_ptr[vector[cmap[cEmpty,cMyStruct]]] _make_instance(object items) except *

cdef class List__List__Map__Empty_MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]])
    @staticmethod
    cdef unique_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] _make_instance(object items) except *

cdef class List__List__List__Map__Empty_MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    @staticmethod
    cdef unique_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] _make_instance(object items) except *

cdef class List__MyEnumA:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cMyEnumA]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cMyEnumA]])
    @staticmethod
    cdef unique_ptr[vector[cMyEnumA]] _make_instance(object items) except *

cdef class Set__MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[cMyStruct]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[cMyStruct]])
    @staticmethod
    cdef unique_ptr[cset[cMyStruct]] _make_instance(object items) except *

cdef class List__ComplexUnion:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cComplexUnion]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cComplexUnion]])
    @staticmethod
    cdef unique_ptr[vector[cComplexUnion]] _make_instance(object items) except *

cdef class List__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[string]])
    @staticmethod
    cdef unique_ptr[vector[string]] _make_instance(object items) except *

cdef class Set__List__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[vector[string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[vector[string]]])
    @staticmethod
    cdef unique_ptr[cset[vector[string]]] _make_instance(object items) except *

cdef class Set__List__List__Map__Empty_MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    @staticmethod
    cdef unique_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] _make_instance(object items) except *

cdef class Map__i32_List__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[int32_t,vector[string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[int32_t,vector[string]]])
    @staticmethod
    cdef unique_ptr[cmap[int32_t,vector[string]]] _make_instance(object items) except *

cdef class List__bool:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cbool]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cbool]])
    @staticmethod
    cdef unique_ptr[vector[cbool]] _make_instance(object items) except *

cdef class List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[int32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[int32_t]])
    @staticmethod
    cdef unique_ptr[vector[int32_t]] _make_instance(object items) except *

cdef class List__List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[vector[int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[vector[int32_t]]])
    @staticmethod
    cdef unique_ptr[vector[vector[int32_t]]] _make_instance(object items) except *

cdef class List__List__List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[vector[vector[int32_t]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[int32_t]]]])
    @staticmethod
    cdef unique_ptr[vector[vector[vector[int32_t]]]] _make_instance(object items) except *

cdef class List__List__List__List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[vector[vector[vector[int32_t]]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[vector[vector[vector[int32_t]]]]])
    @staticmethod
    cdef unique_ptr[vector[vector[vector[vector[int32_t]]]]] _make_instance(object items) except *

cdef class Set__List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[vector[int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[vector[int32_t]]])
    @staticmethod
    cdef unique_ptr[cset[vector[int32_t]]] _make_instance(object items) except *

cdef class Set__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[string]])
    @staticmethod
    cdef unique_ptr[cset[string]] _make_instance(object items) except *

cdef class List__Set__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cset[string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cset[string]]])
    @staticmethod
    cdef unique_ptr[vector[cset[string]]] _make_instance(object items) except *

cdef class Map__List__Set__string_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[vector[cset[string]],string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[vector[cset[string]],string]])
    @staticmethod
    cdef unique_ptr[cmap[vector[cset[string]],string]] _make_instance(object items) except *

cdef class Map__Set__List__i32_Map__List__Set__string_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]])
    @staticmethod
    cdef unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]] _make_instance(object items) except *

cdef class List__binary:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[string]])
    @staticmethod
    cdef unique_ptr[vector[string]] _make_instance(object items) except *

cdef class Map__MyEnumA_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[cMyEnumA,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[cMyEnumA,string]])
    @staticmethod
    cdef unique_ptr[cmap[cMyEnumA,string]] _make_instance(object items) except *

cdef class Set__i64:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[int64_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[int64_t]])
    @staticmethod
    cdef unique_ptr[cset[int64_t]] _make_instance(object items) except *

cdef class Map__string_i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,int32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,int32_t]])
    @staticmethod
    cdef unique_ptr[cmap[string,int32_t]] _make_instance(object items) except *

cdef class List__SimpleUnion:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cSimpleUnion]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cSimpleUnion]])
    @staticmethod
    cdef unique_ptr[vector[cSimpleUnion]] _make_instance(object items) except *

cdef class Set__SimpleUnion:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[cSimpleUnion]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[cSimpleUnion]])
    @staticmethod
    cdef unique_ptr[cset[cSimpleUnion]] _make_instance(object items) except *

cdef class List__Set__SimpleUnion:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cset[cSimpleUnion]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cset[cSimpleUnion]]])
    @staticmethod
    cdef unique_ptr[vector[cset[cSimpleUnion]]] _make_instance(object items) except *

cdef class Map__string_bool:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,cbool]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,cbool]])
    @staticmethod
    cdef unique_ptr[cmap[string,cbool]] _make_instance(object items) except *

cdef class Set__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[int32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[int32_t]])
    @staticmethod
    cdef unique_ptr[cset[int32_t]] _make_instance(object items) except *

cdef class Map__string_Map__string_i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,cmap[string,int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,cmap[string,int32_t]]])
    @staticmethod
    cdef unique_ptr[cmap[string,cmap[string,int32_t]]] _make_instance(object items) except *

cdef class Map__string_Map__string_Map__string_i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]])
    @staticmethod
    cdef unique_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]] _make_instance(object items) except *

cdef class List__Set__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cset[int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cset[int32_t]]])
    @staticmethod
    cdef unique_ptr[vector[cset[int32_t]]] _make_instance(object items) except *

cdef class Map__string_List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[string,vector[int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[string,vector[int32_t]]])
    @staticmethod
    cdef unique_ptr[cmap[string,vector[int32_t]]] _make_instance(object items) except *

cdef class Set__bool:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[cbool]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[cbool]])
    @staticmethod
    cdef unique_ptr[cset[cbool]] _make_instance(object items) except *

cdef class Set__Set__bool:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[cset[cbool]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[cset[cbool]]])
    @staticmethod
    cdef unique_ptr[cset[cset[cbool]]] _make_instance(object items) except *

cdef class Set__Set__Set__bool:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[cset[cset[cbool]]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[cset[cset[cbool]]]])
    @staticmethod
    cdef unique_ptr[cset[cset[cset[cbool]]]] _make_instance(object items) except *

cdef class Map__Bar__double_Baz__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[Bar,Baz]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[Bar,Baz]])
    @staticmethod
    cdef unique_ptr[cmap[Bar,Baz]] _make_instance(object items) except *

cdef class folly_small_vector_int64_t_8__List__i64:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[folly_small_vector_int64_t_8] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_small_vector_int64_t_8])
    @staticmethod
    cdef unique_ptr[folly_small_vector_int64_t_8] _make_instance(object items) except *

cdef class folly_sorted_vector_set_std_string__Set__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[folly_sorted_vector_set_std_string] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_set_std_string])
    @staticmethod
    cdef unique_ptr[folly_sorted_vector_set_std_string] _make_instance(object items) except *

cdef class FakeMap__Map__i64_double:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[FakeMap] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[FakeMap])
    @staticmethod
    cdef unique_ptr[FakeMap] _make_instance(object items) except *

cdef class std_unordered_map_std_string_containerStruct__Map__string_containerStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[std_unordered_map_std_string_containerStruct] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_unordered_map_std_string_containerStruct])
    @staticmethod
    cdef unique_ptr[std_unordered_map_std_string_containerStruct] _make_instance(object items) except *

cdef class std_list__List__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[std_list[int32_t]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_list[int32_t]])
    @staticmethod
    cdef unique_ptr[std_list[int32_t]] _make_instance(object items) except *

cdef class std_deque__List__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[std_deque[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[std_deque[string]])
    @staticmethod
    cdef unique_ptr[std_deque[string]] _make_instance(object items) except *

cdef class folly_sorted_vector_set__Set__string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[folly_sorted_vector_set[string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_set[string]])
    @staticmethod
    cdef unique_ptr[folly_sorted_vector_set[string]] _make_instance(object items) except *

cdef class folly_sorted_vector_map__Map__i64_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[folly_sorted_vector_map[int64_t,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[folly_sorted_vector_map[int64_t,string]])
    @staticmethod
    cdef unique_ptr[folly_sorted_vector_map[int64_t,string]] _make_instance(object items) except *

cdef class List__Bar__double:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[Bar]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[Bar]])
    @staticmethod
    cdef unique_ptr[vector[Bar]] _make_instance(object items) except *

cdef class Set__Baz__i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cset[Baz]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cset[Baz]])
    @staticmethod
    cdef unique_ptr[cset[Baz]] _make_instance(object items) except *

cdef class Map__i32_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[int32_t,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[int32_t,string]])
    @staticmethod
    cdef unique_ptr[cmap[int32_t,string]] _make_instance(object items) except *

cdef class List__Map__string_i32:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cmap[string,int32_t]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cmap[string,int32_t]]])
    @staticmethod
    cdef unique_ptr[vector[cmap[string,int32_t]]] _make_instance(object items) except *

cdef class Map__i16_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[cmap[int16_t,string]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[cmap[int16_t,string]])
    @staticmethod
    cdef unique_ptr[cmap[int16_t,string]] _make_instance(object items) except *

cdef class List__Map__i16_string:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cmap[int16_t,string]]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cmap[int16_t,string]]])
    @staticmethod
    cdef unique_ptr[vector[cmap[int16_t,string]]] _make_instance(object items) except *

cdef class List__MyStruct:
    cdef object __hash
    cdef object __weakref__
    cdef shared_ptr[vector[cMyStruct]] _cpp_obj
    @staticmethod
    cdef create(shared_ptr[vector[cMyStruct]])
    @staticmethod
    cdef unique_ptr[vector[cMyStruct]] _make_instance(object items) except *

cdef extern from "<utility>" namespace "std" nogil:
    cdef shared_ptr[cmap[string,int64_t]] move(unique_ptr[cmap[string,int64_t]])
    cdef unique_ptr[cmap[string,int64_t]] move_unique "std::move"(unique_ptr[cmap[string,int64_t]])
    cdef shared_ptr[cmap[cEmpty,cMyStruct]] move(unique_ptr[cmap[cEmpty,cMyStruct]])
    cdef unique_ptr[cmap[cEmpty,cMyStruct]] move_unique "std::move"(unique_ptr[cmap[cEmpty,cMyStruct]])
    cdef shared_ptr[vector[cmap[cEmpty,cMyStruct]]] move(unique_ptr[vector[cmap[cEmpty,cMyStruct]]])
    cdef unique_ptr[vector[cmap[cEmpty,cMyStruct]]] move_unique "std::move"(unique_ptr[vector[cmap[cEmpty,cMyStruct]]])
    cdef shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] move(unique_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]])
    cdef unique_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]] move_unique "std::move"(unique_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]])
    cdef shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] move(unique_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    cdef unique_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] move_unique "std::move"(unique_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    cdef shared_ptr[vector[cMyEnumA]] move(unique_ptr[vector[cMyEnumA]])
    cdef unique_ptr[vector[cMyEnumA]] move_unique "std::move"(unique_ptr[vector[cMyEnumA]])
    cdef shared_ptr[cset[cMyStruct]] move(unique_ptr[cset[cMyStruct]])
    cdef unique_ptr[cset[cMyStruct]] move_unique "std::move"(unique_ptr[cset[cMyStruct]])
    cdef shared_ptr[vector[cComplexUnion]] move(unique_ptr[vector[cComplexUnion]])
    cdef unique_ptr[vector[cComplexUnion]] move_unique "std::move"(unique_ptr[vector[cComplexUnion]])
    cdef shared_ptr[vector[string]] move(unique_ptr[vector[string]])
    cdef unique_ptr[vector[string]] move_unique "std::move"(unique_ptr[vector[string]])
    cdef shared_ptr[cset[vector[string]]] move(unique_ptr[cset[vector[string]]])
    cdef unique_ptr[cset[vector[string]]] move_unique "std::move"(unique_ptr[cset[vector[string]]])
    cdef shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] move(unique_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    cdef unique_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] move_unique "std::move"(unique_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]])
    cdef shared_ptr[cmap[int32_t,vector[string]]] move(unique_ptr[cmap[int32_t,vector[string]]])
    cdef unique_ptr[cmap[int32_t,vector[string]]] move_unique "std::move"(unique_ptr[cmap[int32_t,vector[string]]])
    cdef shared_ptr[vector[cbool]] move(unique_ptr[vector[cbool]])
    cdef unique_ptr[vector[cbool]] move_unique "std::move"(unique_ptr[vector[cbool]])
    cdef shared_ptr[vector[int32_t]] move(unique_ptr[vector[int32_t]])
    cdef unique_ptr[vector[int32_t]] move_unique "std::move"(unique_ptr[vector[int32_t]])
    cdef shared_ptr[vector[vector[int32_t]]] move(unique_ptr[vector[vector[int32_t]]])
    cdef unique_ptr[vector[vector[int32_t]]] move_unique "std::move"(unique_ptr[vector[vector[int32_t]]])
    cdef shared_ptr[vector[vector[vector[int32_t]]]] move(unique_ptr[vector[vector[vector[int32_t]]]])
    cdef unique_ptr[vector[vector[vector[int32_t]]]] move_unique "std::move"(unique_ptr[vector[vector[vector[int32_t]]]])
    cdef shared_ptr[vector[vector[vector[vector[int32_t]]]]] move(unique_ptr[vector[vector[vector[vector[int32_t]]]]])
    cdef unique_ptr[vector[vector[vector[vector[int32_t]]]]] move_unique "std::move"(unique_ptr[vector[vector[vector[vector[int32_t]]]]])
    cdef shared_ptr[cset[vector[int32_t]]] move(unique_ptr[cset[vector[int32_t]]])
    cdef unique_ptr[cset[vector[int32_t]]] move_unique "std::move"(unique_ptr[cset[vector[int32_t]]])
    cdef shared_ptr[cset[string]] move(unique_ptr[cset[string]])
    cdef unique_ptr[cset[string]] move_unique "std::move"(unique_ptr[cset[string]])
    cdef shared_ptr[vector[cset[string]]] move(unique_ptr[vector[cset[string]]])
    cdef unique_ptr[vector[cset[string]]] move_unique "std::move"(unique_ptr[vector[cset[string]]])
    cdef shared_ptr[cmap[vector[cset[string]],string]] move(unique_ptr[cmap[vector[cset[string]],string]])
    cdef unique_ptr[cmap[vector[cset[string]],string]] move_unique "std::move"(unique_ptr[cmap[vector[cset[string]],string]])
    cdef shared_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]] move(unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]])
    cdef unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]] move_unique "std::move"(unique_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]])
    cdef shared_ptr[cmap[cMyEnumA,string]] move(unique_ptr[cmap[cMyEnumA,string]])
    cdef unique_ptr[cmap[cMyEnumA,string]] move_unique "std::move"(unique_ptr[cmap[cMyEnumA,string]])
    cdef shared_ptr[cset[int64_t]] move(unique_ptr[cset[int64_t]])
    cdef unique_ptr[cset[int64_t]] move_unique "std::move"(unique_ptr[cset[int64_t]])
    cdef shared_ptr[cmap[string,int32_t]] move(unique_ptr[cmap[string,int32_t]])
    cdef unique_ptr[cmap[string,int32_t]] move_unique "std::move"(unique_ptr[cmap[string,int32_t]])
    cdef shared_ptr[vector[cSimpleUnion]] move(unique_ptr[vector[cSimpleUnion]])
    cdef unique_ptr[vector[cSimpleUnion]] move_unique "std::move"(unique_ptr[vector[cSimpleUnion]])
    cdef shared_ptr[cset[cSimpleUnion]] move(unique_ptr[cset[cSimpleUnion]])
    cdef unique_ptr[cset[cSimpleUnion]] move_unique "std::move"(unique_ptr[cset[cSimpleUnion]])
    cdef shared_ptr[vector[cset[cSimpleUnion]]] move(unique_ptr[vector[cset[cSimpleUnion]]])
    cdef unique_ptr[vector[cset[cSimpleUnion]]] move_unique "std::move"(unique_ptr[vector[cset[cSimpleUnion]]])
    cdef shared_ptr[cmap[string,cbool]] move(unique_ptr[cmap[string,cbool]])
    cdef unique_ptr[cmap[string,cbool]] move_unique "std::move"(unique_ptr[cmap[string,cbool]])
    cdef shared_ptr[cset[int32_t]] move(unique_ptr[cset[int32_t]])
    cdef unique_ptr[cset[int32_t]] move_unique "std::move"(unique_ptr[cset[int32_t]])
    cdef shared_ptr[cmap[string,cmap[string,int32_t]]] move(unique_ptr[cmap[string,cmap[string,int32_t]]])
    cdef unique_ptr[cmap[string,cmap[string,int32_t]]] move_unique "std::move"(unique_ptr[cmap[string,cmap[string,int32_t]]])
    cdef shared_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]] move(unique_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]])
    cdef unique_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]] move_unique "std::move"(unique_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]])
    cdef shared_ptr[vector[cset[int32_t]]] move(unique_ptr[vector[cset[int32_t]]])
    cdef unique_ptr[vector[cset[int32_t]]] move_unique "std::move"(unique_ptr[vector[cset[int32_t]]])
    cdef shared_ptr[cmap[string,vector[int32_t]]] move(unique_ptr[cmap[string,vector[int32_t]]])
    cdef unique_ptr[cmap[string,vector[int32_t]]] move_unique "std::move"(unique_ptr[cmap[string,vector[int32_t]]])
    cdef shared_ptr[cset[cbool]] move(unique_ptr[cset[cbool]])
    cdef unique_ptr[cset[cbool]] move_unique "std::move"(unique_ptr[cset[cbool]])
    cdef shared_ptr[cset[cset[cbool]]] move(unique_ptr[cset[cset[cbool]]])
    cdef unique_ptr[cset[cset[cbool]]] move_unique "std::move"(unique_ptr[cset[cset[cbool]]])
    cdef shared_ptr[cset[cset[cset[cbool]]]] move(unique_ptr[cset[cset[cset[cbool]]]])
    cdef unique_ptr[cset[cset[cset[cbool]]]] move_unique "std::move"(unique_ptr[cset[cset[cset[cbool]]]])
    cdef shared_ptr[cmap[Bar,Baz]] move(unique_ptr[cmap[Bar,Baz]])
    cdef unique_ptr[cmap[Bar,Baz]] move_unique "std::move"(unique_ptr[cmap[Bar,Baz]])
    cdef shared_ptr[folly_small_vector_int64_t_8] move(unique_ptr[folly_small_vector_int64_t_8])
    cdef unique_ptr[folly_small_vector_int64_t_8] move_unique "std::move"(unique_ptr[folly_small_vector_int64_t_8])
    cdef shared_ptr[folly_sorted_vector_set_std_string] move(unique_ptr[folly_sorted_vector_set_std_string])
    cdef unique_ptr[folly_sorted_vector_set_std_string] move_unique "std::move"(unique_ptr[folly_sorted_vector_set_std_string])
    cdef shared_ptr[FakeMap] move(unique_ptr[FakeMap])
    cdef unique_ptr[FakeMap] move_unique "std::move"(unique_ptr[FakeMap])
    cdef shared_ptr[std_unordered_map_std_string_containerStruct] move(unique_ptr[std_unordered_map_std_string_containerStruct])
    cdef unique_ptr[std_unordered_map_std_string_containerStruct] move_unique "std::move"(unique_ptr[std_unordered_map_std_string_containerStruct])
    cdef shared_ptr[std_list[int32_t]] move(unique_ptr[std_list[int32_t]])
    cdef unique_ptr[std_list[int32_t]] move_unique "std::move"(unique_ptr[std_list[int32_t]])
    cdef shared_ptr[std_deque[string]] move(unique_ptr[std_deque[string]])
    cdef unique_ptr[std_deque[string]] move_unique "std::move"(unique_ptr[std_deque[string]])
    cdef shared_ptr[folly_sorted_vector_set[string]] move(unique_ptr[folly_sorted_vector_set[string]])
    cdef unique_ptr[folly_sorted_vector_set[string]] move_unique "std::move"(unique_ptr[folly_sorted_vector_set[string]])
    cdef shared_ptr[folly_sorted_vector_map[int64_t,string]] move(unique_ptr[folly_sorted_vector_map[int64_t,string]])
    cdef unique_ptr[folly_sorted_vector_map[int64_t,string]] move_unique "std::move"(unique_ptr[folly_sorted_vector_map[int64_t,string]])
    cdef shared_ptr[vector[Bar]] move(unique_ptr[vector[Bar]])
    cdef unique_ptr[vector[Bar]] move_unique "std::move"(unique_ptr[vector[Bar]])
    cdef shared_ptr[cset[Baz]] move(unique_ptr[cset[Baz]])
    cdef unique_ptr[cset[Baz]] move_unique "std::move"(unique_ptr[cset[Baz]])
    cdef shared_ptr[cmap[int32_t,string]] move(unique_ptr[cmap[int32_t,string]])
    cdef unique_ptr[cmap[int32_t,string]] move_unique "std::move"(unique_ptr[cmap[int32_t,string]])
    cdef shared_ptr[vector[cmap[string,int32_t]]] move(unique_ptr[vector[cmap[string,int32_t]]])
    cdef unique_ptr[vector[cmap[string,int32_t]]] move_unique "std::move"(unique_ptr[vector[cmap[string,int32_t]]])
    cdef shared_ptr[cmap[int16_t,string]] move(unique_ptr[cmap[int16_t,string]])
    cdef unique_ptr[cmap[int16_t,string]] move_unique "std::move"(unique_ptr[cmap[int16_t,string]])
    cdef shared_ptr[vector[cmap[int16_t,string]]] move(unique_ptr[vector[cmap[int16_t,string]]])
    cdef unique_ptr[vector[cmap[int16_t,string]]] move_unique "std::move"(unique_ptr[vector[cmap[int16_t,string]]])
    cdef shared_ptr[vector[cMyStruct]] move(unique_ptr[vector[cMyStruct]])
    cdef unique_ptr[vector[cMyStruct]] move_unique "std::move"(unique_ptr[vector[cMyStruct]])
cdef extern from "<memory>" namespace "std" nogil:
    cdef shared_ptr[const cmap[string,int64_t]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,int64_t>>"(shared_ptr[cmap[string,int64_t]])

    cdef shared_ptr[const cmap[cEmpty,cMyStruct]] const_pointer_cast "std::const_pointer_cast<const std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>"(shared_ptr[cmap[cEmpty,cMyStruct]])

    cdef shared_ptr[const vector[cmap[cEmpty,cMyStruct]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>"(shared_ptr[vector[cmap[cEmpty,cMyStruct]]])

    cdef shared_ptr[const vector[vector[cmap[cEmpty,cMyStruct]]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>>"(shared_ptr[vector[vector[cmap[cEmpty,cMyStruct]]]])

    cdef shared_ptr[const vector[vector[vector[cmap[cEmpty,cMyStruct]]]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::vector<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>>>"(shared_ptr[vector[vector[vector[cmap[cEmpty,cMyStruct]]]]])

    cdef shared_ptr[const vector[cMyEnumA]] const_pointer_cast "std::const_pointer_cast<const std::vector<some::valid::ns::MyEnumA>>"(shared_ptr[vector[cMyEnumA]])

    cdef shared_ptr[const cset[cMyStruct]] const_pointer_cast "std::const_pointer_cast<const std::set<some::valid::ns::MyStruct>>"(shared_ptr[cset[cMyStruct]])

    cdef shared_ptr[const vector[cComplexUnion]] const_pointer_cast "std::const_pointer_cast<const std::vector<some::valid::ns::ComplexUnion>>"(shared_ptr[vector[cComplexUnion]])

    cdef shared_ptr[const vector[string]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::string>>"(shared_ptr[vector[string]])

    cdef shared_ptr[const cset[vector[string]]] const_pointer_cast "std::const_pointer_cast<const std::set<std::vector<std::string>>>"(shared_ptr[cset[vector[string]]])

    cdef shared_ptr[const cset[vector[vector[cmap[cEmpty,cMyStruct]]]]] const_pointer_cast "std::const_pointer_cast<const std::set<std::vector<std::vector<std::map<some::valid::ns::Empty,some::valid::ns::MyStruct>>>>>"(shared_ptr[cset[vector[vector[cmap[cEmpty,cMyStruct]]]]])

    cdef shared_ptr[const cmap[int32_t,vector[string]]] const_pointer_cast "std::const_pointer_cast<const std::map<int32_t,std::vector<std::string>>>"(shared_ptr[cmap[int32_t,vector[string]]])

    cdef shared_ptr[const vector[cbool]] const_pointer_cast "std::const_pointer_cast<const std::vector<bool>>"(shared_ptr[vector[cbool]])

    cdef shared_ptr[const vector[int32_t]] const_pointer_cast "std::const_pointer_cast<const std::vector<int32_t>>"(shared_ptr[vector[int32_t]])

    cdef shared_ptr[const vector[vector[int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::vector<int32_t>>>"(shared_ptr[vector[vector[int32_t]]])

    cdef shared_ptr[const vector[vector[vector[int32_t]]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::vector<std::vector<int32_t>>>>"(shared_ptr[vector[vector[vector[int32_t]]]])

    cdef shared_ptr[const vector[vector[vector[vector[int32_t]]]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::vector<std::vector<std::vector<int32_t>>>>>"(shared_ptr[vector[vector[vector[vector[int32_t]]]]])

    cdef shared_ptr[const cset[vector[int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::set<std::vector<int32_t>>>"(shared_ptr[cset[vector[int32_t]]])

    cdef shared_ptr[const cset[string]] const_pointer_cast "std::const_pointer_cast<const std::set<std::string>>"(shared_ptr[cset[string]])

    cdef shared_ptr[const vector[cset[string]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::set<std::string>>>"(shared_ptr[vector[cset[string]]])

    cdef shared_ptr[const cmap[vector[cset[string]],string]] const_pointer_cast "std::const_pointer_cast<const std::map<std::vector<std::set<std::string>>,std::string>>"(shared_ptr[cmap[vector[cset[string]],string]])

    cdef shared_ptr[const cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]] const_pointer_cast "std::const_pointer_cast<const std::map<std::set<std::vector<int32_t>>,std::map<std::vector<std::set<std::string>>,std::string>>>"(shared_ptr[cmap[cset[vector[int32_t]],cmap[vector[cset[string]],string]]])

    cdef shared_ptr[const cmap[cMyEnumA,string]] const_pointer_cast "std::const_pointer_cast<const std::map<some::valid::ns::MyEnumA,std::string>>"(shared_ptr[cmap[cMyEnumA,string]])

    cdef shared_ptr[const cset[int64_t]] const_pointer_cast "std::const_pointer_cast<const std::set<int64_t>>"(shared_ptr[cset[int64_t]])

    cdef shared_ptr[const cmap[string,int32_t]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,int32_t>>"(shared_ptr[cmap[string,int32_t]])

    cdef shared_ptr[const vector[cSimpleUnion]] const_pointer_cast "std::const_pointer_cast<const std::vector<some::valid::ns::SimpleUnion>>"(shared_ptr[vector[cSimpleUnion]])

    cdef shared_ptr[const cset[cSimpleUnion]] const_pointer_cast "std::const_pointer_cast<const std::set<some::valid::ns::SimpleUnion>>"(shared_ptr[cset[cSimpleUnion]])

    cdef shared_ptr[const vector[cset[cSimpleUnion]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::set<some::valid::ns::SimpleUnion>>>"(shared_ptr[vector[cset[cSimpleUnion]]])

    cdef shared_ptr[const cmap[string,cbool]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,bool>>"(shared_ptr[cmap[string,cbool]])

    cdef shared_ptr[const cset[int32_t]] const_pointer_cast "std::const_pointer_cast<const std::set<int32_t>>"(shared_ptr[cset[int32_t]])

    cdef shared_ptr[const cmap[string,cmap[string,int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,std::map<std::string,int32_t>>>"(shared_ptr[cmap[string,cmap[string,int32_t]]])

    cdef shared_ptr[const cmap[string,cmap[string,cmap[string,int32_t]]]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,std::map<std::string,std::map<std::string,int32_t>>>>"(shared_ptr[cmap[string,cmap[string,cmap[string,int32_t]]]])

    cdef shared_ptr[const vector[cset[int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::set<int32_t>>>"(shared_ptr[vector[cset[int32_t]]])

    cdef shared_ptr[const cmap[string,vector[int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::map<std::string,std::vector<int32_t>>>"(shared_ptr[cmap[string,vector[int32_t]]])

    cdef shared_ptr[const cset[cbool]] const_pointer_cast "std::const_pointer_cast<const std::set<bool>>"(shared_ptr[cset[cbool]])

    cdef shared_ptr[const cset[cset[cbool]]] const_pointer_cast "std::const_pointer_cast<const std::set<std::set<bool>>>"(shared_ptr[cset[cset[cbool]]])

    cdef shared_ptr[const cset[cset[cset[cbool]]]] const_pointer_cast "std::const_pointer_cast<const std::set<std::set<std::set<bool>>>>"(shared_ptr[cset[cset[cset[cbool]]]])

    cdef shared_ptr[const cmap[Bar,Baz]] const_pointer_cast "std::const_pointer_cast<const std::map<Bar,Baz>>"(shared_ptr[cmap[Bar,Baz]])

    cdef shared_ptr[const folly_small_vector_int64_t_8] const_pointer_cast "std::const_pointer_cast<const folly::small_vector<int64_t, 8 /* maxInline */>>"(shared_ptr[folly_small_vector_int64_t_8])

    cdef shared_ptr[const folly_sorted_vector_set_std_string] const_pointer_cast "std::const_pointer_cast<const folly::sorted_vector_set<std::string>>"(shared_ptr[folly_sorted_vector_set_std_string])

    cdef shared_ptr[const FakeMap] const_pointer_cast "std::const_pointer_cast<const FakeMap>"(shared_ptr[FakeMap])

    cdef shared_ptr[const std_unordered_map_std_string_containerStruct] const_pointer_cast "std::const_pointer_cast<const std::unordered_map<std::string, containerStruct>>"(shared_ptr[std_unordered_map_std_string_containerStruct])

    cdef shared_ptr[const std_list[int32_t]] const_pointer_cast "std::const_pointer_cast<const std::list<int32_t>>"(shared_ptr[std_list[int32_t]])

    cdef shared_ptr[const std_deque[string]] const_pointer_cast "std::const_pointer_cast<const std::deque<std::string>>"(shared_ptr[std_deque[string]])

    cdef shared_ptr[const folly_sorted_vector_set[string]] const_pointer_cast "std::const_pointer_cast<const folly::sorted_vector_set<std::string>>"(shared_ptr[folly_sorted_vector_set[string]])

    cdef shared_ptr[const folly_sorted_vector_map[int64_t,string]] const_pointer_cast "std::const_pointer_cast<const folly::sorted_vector_map<int64_t,std::string>>"(shared_ptr[folly_sorted_vector_map[int64_t,string]])

    cdef shared_ptr[const vector[Bar]] const_pointer_cast "std::const_pointer_cast<const std::vector<Bar>>"(shared_ptr[vector[Bar]])

    cdef shared_ptr[const cset[Baz]] const_pointer_cast "std::const_pointer_cast<const std::set<Baz>>"(shared_ptr[cset[Baz]])

    cdef shared_ptr[const cmap[int32_t,string]] const_pointer_cast "std::const_pointer_cast<const std::map<int32_t,std::string>>"(shared_ptr[cmap[int32_t,string]])

    cdef shared_ptr[const vector[cmap[string,int32_t]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::map<std::string,int32_t>>>"(shared_ptr[vector[cmap[string,int32_t]]])

    cdef shared_ptr[const cmap[int16_t,string]] const_pointer_cast "std::const_pointer_cast<const std::map<int16_t,std::string>>"(shared_ptr[cmap[int16_t,string]])

    cdef shared_ptr[const vector[cmap[int16_t,string]]] const_pointer_cast "std::const_pointer_cast<const std::vector<std::map<int16_t,std::string>>>"(shared_ptr[vector[cmap[int16_t,string]]])

    cdef shared_ptr[const vector[cMyStruct]] const_pointer_cast "std::const_pointer_cast<const std::vector<some::valid::ns::MyStruct>>"(shared_ptr[vector[cMyStruct]])

cdef extern from "src/gen-cpp2/module_constants.h" namespace "some::valid::ns":
    cdef cbool caBool "some::valid::ns::module_constants::aBool"
    cdef int8_t caByte "some::valid::ns::module_constants::aByte"
    cdef int16_t ca16BitInt "some::valid::ns::module_constants::a16BitInt"
    cdef int32_t ca32BitInt "some::valid::ns::module_constants::a32BitInt"
    cdef int64_t ca64BitInt "some::valid::ns::module_constants::a64BitInt"
    cdef float caFloat "some::valid::ns::module_constants::aFloat"
    cdef double caDouble "some::valid::ns::module_constants::aDouble"
    cdef const char* caString "some::valid::ns::module_constants::aString"()
    cdef vector[cbool] caList "some::valid::ns::module_constants::aList"()
    cdef cmap[string,int32_t] canEmptyMap "some::valid::ns::module_constants::anEmptyMap"()
    cdef cmap[int32_t,string] caMap "some::valid::ns::module_constants::aMap"()
    cdef cset[string] caSet "some::valid::ns::module_constants::aSet"()
    cdef vector[vector[int32_t]] caListOfLists "some::valid::ns::module_constants::aListOfLists"()
    cdef vector[cmap[string,int32_t]] cstates "some::valid::ns::module_constants::states"()
    cdef vector[cMyEnumA] cAConstList "some::valid::ns::module_constants::AConstList"()
    cdef int32_t cAnIntegerEnum2 "some::valid::ns::module_constants::AnIntegerEnum2"
    cdef vector[int32_t] cAnIntegerEnum2 "some::valid::ns::module_constants::AnIntegerEnum2"()
    cdef cMyEnumA cconstEnumA "some::valid::ns::module_constants::constEnumA"()
    cdef cMyEnumA cconstEnumB "some::valid::ns::module_constants::constEnumB"()
