/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.constants;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("struct1")
public final class Struct1
{
    @ThriftConstructor
    public Struct1(
        @ThriftField(value=1, name="a", requiredness=Requiredness.NONE) final int a,
        @ThriftField(value=2, name="b", requiredness=Requiredness.NONE) final String b
    ) {
        this.a = a;
        this.b = b;
    }

    public static class Builder {
        private int a;

        public Builder setA(int a) {
            this.a = a;
            return this;
        }
        private String b;

        public Builder setB(String b) {
            this.b = b;
            return this;
        }

        public Builder() { }
        public Builder(Struct1 other) {
            this.a = other.a;
            this.b = other.b;
        }

        public Struct1 build() {
            return new Struct1 (
                this.a,
                this.b
            );
        }
    }

    private final int a;

    @ThriftField(value=1, name="a", requiredness=Requiredness.NONE)
    public int getA() { return a; }

    private final String b;

    @ThriftField(value=2, name="b", requiredness=Requiredness.NONE)
    public String getB() { return b; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("a", a)
            .add("b", b)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Struct1 other = (Struct1)o;

        return
            Objects.equals(a, other.a) &&
            Objects.equals(b, other.b);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            a,
            b
        });
    }
}
