/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.facebook.thrift.lite.*;
import com.facebook.thrift.lite.protocol.*;


public class ModuleLogger {

  public final Module.EventType mEventType;

  private final Map<ThriftProperty<?>, Object> mMap = new HashMap<ThriftProperty<?>, Object>();

  public ModuleLogger(Module.EventType type) {
    mEventType = type;
  }

  public <T> ModuleLogger addProperty(ThriftProperty<T> property, T value) {
    mMap.put(property, value);
    return this;
  }

  public static <T> void writeFieldBegin(TBinaryProtocol oprot, ThriftProperty<T> field) throws IOException {
    TField tField = new TField(field.key, field.type, field.id);
    oprot.writeFieldBegin(tField);
  }

  public void write(TBinaryProtocol oprot) throws IOException {
    switch (mEventType) {
      case Internship: {
        oprot.writeStructBegin(new TStruct("Internship"));
        if (mMap.containsKey(Module.Internship_weeks) && mMap.get(Module.Internship_weeks) != null) {
          writeFieldBegin(oprot, Module.Internship_weeks);
          oprot.writeI32((int) mMap.get(Module.Internship_weeks));
          oprot.writeFieldEnd();
        } else {
          throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'Internship.weeks' was not present!");
        }
      
        if (mMap.containsKey(Module.Internship_title) && mMap.get(Module.Internship_title) != null) {
          writeFieldBegin(oprot, Module.Internship_title);
          oprot.writeString((String) mMap.get(Module.Internship_title));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.Internship_employer) && mMap.get(Module.Internship_employer) != null) {
          writeFieldBegin(oprot, Module.Internship_employer);
          oprot.writeI32(((ModuleEnum) mMap.get(Module.Internship_employer)).getValue());
          oprot.writeFieldEnd();
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case UnEnumStruct: {
        oprot.writeStructBegin(new TStruct("UnEnumStruct"));
        if (mMap.containsKey(Module.UnEnumStruct_city) && mMap.get(Module.UnEnumStruct_city) != null) {
          writeFieldBegin(oprot, Module.UnEnumStruct_city);
          oprot.writeI32(((ModuleEnum) mMap.get(Module.UnEnumStruct_city)).getValue());
          oprot.writeFieldEnd();
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case Range: {
        oprot.writeStructBegin(new TStruct("Range"));
        if (mMap.containsKey(Module.Range_min) && mMap.get(Module.Range_min) != null) {
          writeFieldBegin(oprot, Module.Range_min);
          oprot.writeI32((int) mMap.get(Module.Range_min));
          oprot.writeFieldEnd();
        } else {
          throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'Range.min' was not present!");
        }
      
        if (mMap.containsKey(Module.Range_max) && mMap.get(Module.Range_max) != null) {
          writeFieldBegin(oprot, Module.Range_max);
          oprot.writeI32((int) mMap.get(Module.Range_max));
          oprot.writeFieldEnd();
        } else {
          throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'Range.max' was not present!");
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case struct1: {
        oprot.writeStructBegin(new TStruct("struct1"));
        if (mMap.containsKey(Module.struct1_a) && mMap.get(Module.struct1_a) != null) {
          writeFieldBegin(oprot, Module.struct1_a);
          oprot.writeI32((int) mMap.get(Module.struct1_a));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct1_b) && mMap.get(Module.struct1_b) != null) {
          writeFieldBegin(oprot, Module.struct1_b);
          oprot.writeString((String) mMap.get(Module.struct1_b));
          oprot.writeFieldEnd();
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case struct2: {
        oprot.writeStructBegin(new TStruct("struct2"));
        if (mMap.containsKey(Module.struct2_a) && mMap.get(Module.struct2_a) != null) {
          writeFieldBegin(oprot, Module.struct2_a);
          oprot.writeI32((int) mMap.get(Module.struct2_a));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct2_b) && mMap.get(Module.struct2_b) != null) {
          writeFieldBegin(oprot, Module.struct2_b);
          oprot.writeString((String) mMap.get(Module.struct2_b));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct2_c) && mMap.get(Module.struct2_c) != null) {
          writeFieldBegin(oprot, Module.struct2_c);
          ((ModuleLogger) mMap.get(Module.struct2_c)).write(oprot);
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct2_d) && mMap.get(Module.struct2_d) != null) {
          writeFieldBegin(oprot, Module.struct2_d);
          List<Integer> var0 = (List<Integer>) mMap.get(Module.struct2_d);
          oprot.writeListBegin(new TList(TType.I32, var0.size()));
          for (int iter0 : var0) {
            oprot.writeI32(iter0);
          }
          oprot.writeListEnd();
          oprot.writeFieldEnd();
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case struct3: {
        oprot.writeStructBegin(new TStruct("struct3"));
        if (mMap.containsKey(Module.struct3_a) && mMap.get(Module.struct3_a) != null) {
          writeFieldBegin(oprot, Module.struct3_a);
          oprot.writeString((String) mMap.get(Module.struct3_a));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct3_b) && mMap.get(Module.struct3_b) != null) {
          writeFieldBegin(oprot, Module.struct3_b);
          oprot.writeI32((int) mMap.get(Module.struct3_b));
          oprot.writeFieldEnd();
        }
      
        if (mMap.containsKey(Module.struct3_c) && mMap.get(Module.struct3_c) != null) {
          writeFieldBegin(oprot, Module.struct3_c);
          ((ModuleLogger) mMap.get(Module.struct3_c)).write(oprot);
          oprot.writeFieldEnd();
        }
      
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case union1: {
        if (this.mMap.size() < 1) {
          throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Cannot write a union with no set value!");
        } else if (this.mMap.size() > 1) {
          throw new TProtocolException(TProtocolException.INVALID_DATA, "Cannot write a union with more than one set value!");
        }
        oprot.writeStructBegin(new TStruct("union1"));
        switch (mMap.keySet().iterator().next().id) {
        case 1: {
          writeFieldBegin(oprot, Module.union1_i);
          oprot.writeI32((int) mMap.get(Module.union1_i));
          oprot.writeFieldEnd();
          break;
        }
      
        case 2: {
          writeFieldBegin(oprot, Module.union1_d);
          oprot.writeDouble((double) mMap.get(Module.union1_d));
          oprot.writeFieldEnd();
          break;
        }
      
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      case union2: {
        if (this.mMap.size() < 1) {
          throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Cannot write a union with no set value!");
        } else if (this.mMap.size() > 1) {
          throw new TProtocolException(TProtocolException.INVALID_DATA, "Cannot write a union with more than one set value!");
        }
        oprot.writeStructBegin(new TStruct("union2"));
        switch (mMap.keySet().iterator().next().id) {
        case 1: {
          writeFieldBegin(oprot, Module.union2_i);
          oprot.writeI32((int) mMap.get(Module.union2_i));
          oprot.writeFieldEnd();
          break;
        }
      
        case 2: {
          writeFieldBegin(oprot, Module.union2_d);
          oprot.writeDouble((double) mMap.get(Module.union2_d));
          oprot.writeFieldEnd();
          break;
        }
      
        case 3: {
          writeFieldBegin(oprot, Module.union2_s);
          ((ModuleLogger) mMap.get(Module.union2_s)).write(oprot);
          oprot.writeFieldEnd();
          break;
        }
      
        case 4: {
          writeFieldBegin(oprot, Module.union2_u);
          ((ModuleLogger) mMap.get(Module.union2_u)).write(oprot);
          oprot.writeFieldEnd();
          break;
        }
      
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
        break;
      }
      
      
    }
  }
}
