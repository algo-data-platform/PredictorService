#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from folly.iobuf import IOBuf as __IOBuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import NOTSET, NOTSETTYPE
from thrift.py3.serializer import Protocol
import typing as _typing

import sys
import itertools
import enum as __enum


class ComplexUnion(thrift.py3.types.Union, _typing.Hashable):
    def __init__(
        self, *,
        intValue: _typing.Optional[int]=None,
        stringValue: _typing.Optional[str]=None,
        intListValue: _typing.Optional[_typing.Sequence[int]]=None,
        stringListValue: _typing.Optional[_typing.Sequence[str]]=None,
        typedefValue: _typing.Optional[_typing.Mapping[int, str]]=None,
        stringRef: _typing.Optional[str]=None
    ) -> None: ...

    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'ComplexUnion') -> bool: ...

    @property
    def intValue(self) -> int: ...
    @property
    def stringValue(self) -> str: ...
    @property
    def intListValue(self) -> _typing.Sequence[int]: ...
    @property
    def stringListValue(self) -> _typing.Sequence[str]: ...
    @property
    def typedefValue(self) -> _typing.Mapping[int, str]: ...
    @property
    def stringRef(self) -> _typing.Optional[str]: ...
    class Type(__enum.Enum):
        EMPTY: ComplexUnion.Type = ...
        intValue: ComplexUnion.Type = ...
        stringValue: ComplexUnion.Type = ...
        intListValue: ComplexUnion.Type = ...
        stringListValue: ComplexUnion.Type = ...
        typedefValue: ComplexUnion.Type = ...
        stringRef: ComplexUnion.Type = ...
        value: int

    @staticmethod
    def fromValue(value: _typing.Union[int, str, _typing.Sequence[int], _typing.Sequence[str], _typing.Mapping[int, str], str]) -> ComplexUnion: ...
    @property
    def value(self) -> _typing.Union[int, str, _typing.Sequence[int], _typing.Sequence[str], _typing.Mapping[int, str], str]: ...
    @property
    def type(self) -> "ComplexUnion.Type": ...
    def get_type(self) -> "ComplexUnion.Type": ...


class VirtualComplexUnion(thrift.py3.types.Union, _typing.Hashable):
    def __init__(
        self, *,
        thingOne: _typing.Optional[str]=None,
        thingTwo: _typing.Optional[str]=None
    ) -> None: ...

    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'VirtualComplexUnion') -> bool: ...

    @property
    def thingOne(self) -> str: ...
    @property
    def thingTwo(self) -> str: ...
    class Type(__enum.Enum):
        EMPTY: VirtualComplexUnion.Type = ...
        thingOne: VirtualComplexUnion.Type = ...
        thingTwo: VirtualComplexUnion.Type = ...
        value: int

    @staticmethod
    def fromValue(value: _typing.Union[str, str]) -> VirtualComplexUnion: ...
    @property
    def value(self) -> _typing.Union[str, str]: ...
    @property
    def type(self) -> "VirtualComplexUnion.Type": ...
    def get_type(self) -> "VirtualComplexUnion.Type": ...


_List__i64T = _typing.TypeVar('_List__i64T', bound=_typing.Sequence[int])


class List__i64(_typing.Sequence[int], _typing.Hashable):
    def __init__(self, items: _typing.Sequence[int]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: object) -> bool: ...
    @_typing.overload
    def __getitem__(self, i: int) -> int: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[int]: ...
    def count(self, item: _typing.Any) -> int: ...
    def index(self, item: _typing.Any, start: int = ..., stop: int = ...) -> int: ...
    def __add__(self, other: _typing.Sequence[int]) -> 'List__i64': ...
    def __radd__(self, other: _List__i64T) -> _List__i64T: ...
    def __reversed__(self) -> _typing.Iterator[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


_List__stringT = _typing.TypeVar('_List__stringT', bound=_typing.Sequence[str])


class List__string(_typing.Sequence[str], _typing.Hashable):
    def __init__(self, items: _typing.Sequence[str]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: object) -> bool: ...
    @_typing.overload
    def __getitem__(self, i: int) -> str: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[str]: ...
    def count(self, item: _typing.Any) -> int: ...
    def index(self, item: _typing.Any, start: int = ..., stop: int = ...) -> int: ...
    def __add__(self, other: _typing.Sequence[str]) -> 'List__string': ...
    def __radd__(self, other: _List__stringT) -> _List__stringT: ...
    def __reversed__(self) -> _typing.Iterator[str]: ...
    def __iter__(self) -> _typing.Iterator[str]: ...


class Map__i16_string(_typing.Mapping[int, str], _typing.Hashable):
    def __init__(self, items: _typing.Mapping[int, str]=None) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: object) -> bool: ...
    def __getitem__(self, key: int) -> str: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


containerTypedef = Map__i16_string
