/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "src/gen-cpp2/module_types.h"

#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/ProtocolReaderStructReadState.h>

namespace cpp2 {

template <class Protocol_>
void ComplexUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_I64) {
          this->set_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::read(*iprot, this->mutable_intValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 5:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_stringValue();
          iprot->readString(this->mutable_stringValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 2:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_intListValue();
          this->mutable_intListValue() = std::vector<int64_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->mutable_intListValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 3:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_LIST) {
          this->set_stringListValue();
          this->mutable_stringListValue() = std::vector<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->mutable_stringListValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 9:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_MAP) {
          this->set_typedefValue();
          this->mutable_typedefValue() =  ::cpp2::containerTypedef();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::containerTypedef>::read(*iprot, this->mutable_typedefValue());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 14:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_stringRef();
          iprot->readString((*this->mutable_stringRef()));
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

}
template <class Protocol_>
uint32_t ComplexUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 5);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case ComplexUnion::Type::intListValue:
    {
      xfer += prot_->serializedFieldSize("intListValue", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->get_intListValue());
      break;
    }
    case ComplexUnion::Type::stringListValue:
    {
      xfer += prot_->serializedFieldSize("stringListValue", apache::thrift::protocol::T_LIST, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->get_stringListValue());
      break;
    }
    case ComplexUnion::Type::typedefValue:
    {
      xfer += prot_->serializedFieldSize("typedefValue", apache::thrift::protocol::T_MAP, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::containerTypedef>::serializedSize<false>(*prot_, this->get_typedefValue());
      break;
    }
    case ComplexUnion::Type::stringRef:
    {
      xfer += prot_->serializedFieldSize("stringRef", apache::thrift::protocol::T_STRING, 14);
      xfer += prot_->serializedSizeString((*this->get_stringRef()));
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->serializedFieldSize("stringValue", apache::thrift::protocol::T_STRING, 5);
      xfer += prot_->serializedSizeString(this->get_stringValue());
      break;
    }
    case ComplexUnion::Type::intListValue:
    {
      xfer += prot_->serializedFieldSize("intListValue", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->get_intListValue());
      break;
    }
    case ComplexUnion::Type::stringListValue:
    {
      xfer += prot_->serializedFieldSize("stringListValue", apache::thrift::protocol::T_LIST, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->get_stringListValue());
      break;
    }
    case ComplexUnion::Type::typedefValue:
    {
      xfer += prot_->serializedFieldSize("typedefValue", apache::thrift::protocol::T_MAP, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::containerTypedef>::serializedSize<false>(*prot_, this->get_typedefValue());
      break;
    }
    case ComplexUnion::Type::stringRef:
    {
      xfer += prot_->serializedFieldSize("stringRef", apache::thrift::protocol::T_STRING, 14);
      xfer += prot_->serializedSizeString((*this->get_stringRef()));
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ComplexUnion");
  switch(this->getType()) {
    case ComplexUnion::Type::intValue:
    {
      xfer += prot_->writeFieldBegin("intValue", apache::thrift::protocol::T_I64, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_intValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::stringValue:
    {
      xfer += prot_->writeFieldBegin("stringValue", apache::thrift::protocol::T_STRING, 5);
      xfer += prot_->writeString(this->get_stringValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::intListValue:
    {
      xfer += prot_->writeFieldBegin("intListValue", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->get_intListValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::stringListValue:
    {
      xfer += prot_->writeFieldBegin("stringListValue", apache::thrift::protocol::T_LIST, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->get_stringListValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::typedefValue:
    {
      xfer += prot_->writeFieldBegin("typedefValue", apache::thrift::protocol::T_MAP, 9);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::containerTypedef>::write(*prot_, this->get_typedefValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::stringRef:
    {
      xfer += prot_->writeFieldBegin("stringRef", apache::thrift::protocol::T_STRING, 14);
      xfer += prot_->writeString((*this->get_stringRef()));
      xfer += prot_->writeFieldEnd();
      break;
    }
    case ComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
void VirtualComplexUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  _readState.readFieldBegin(iprot);
  if (_readState.fieldType == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_readState.fieldName(), _readState.fieldId, _readState.fieldType);
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_thingOne();
          iprot->readString(this->mutable_thingOne());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      case 2:
      {
        if (_readState.fieldType == apache::thrift::protocol::T_STRING) {
          this->set_thingTwo();
          iprot->readString(this->mutable_thingTwo());
        } else {
          iprot->skip(_readState.fieldType);
        }
        break;
      }
      default:
      {
        iprot->skip(_readState.fieldType);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(_readState.fieldType != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);

}
template <class Protocol_>
uint32_t VirtualComplexUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("VirtualComplexUnion");
  switch(this->getType()) {
    case VirtualComplexUnion::Type::thingOne:
    {
      xfer += prot_->serializedFieldSize("thingOne", apache::thrift::protocol::T_STRING, 1);
      xfer += prot_->serializedSizeString(this->get_thingOne());
      break;
    }
    case VirtualComplexUnion::Type::thingTwo:
    {
      xfer += prot_->serializedFieldSize("thingTwo", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_thingTwo());
      break;
    }
    case VirtualComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t VirtualComplexUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("VirtualComplexUnion");
  switch(this->getType()) {
    case VirtualComplexUnion::Type::thingOne:
    {
      xfer += prot_->serializedFieldSize("thingOne", apache::thrift::protocol::T_STRING, 1);
      xfer += prot_->serializedSizeString(this->get_thingOne());
      break;
    }
    case VirtualComplexUnion::Type::thingTwo:
    {
      xfer += prot_->serializedFieldSize("thingTwo", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_thingTwo());
      break;
    }
    case VirtualComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t VirtualComplexUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("VirtualComplexUnion");
  switch(this->getType()) {
    case VirtualComplexUnion::Type::thingOne:
    {
      xfer += prot_->writeFieldBegin("thingOne", apache::thrift::protocol::T_STRING, 1);
      xfer += prot_->writeString(this->get_thingOne());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case VirtualComplexUnion::Type::thingTwo:
    {
      xfer += prot_->writeFieldBegin("thingTwo", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->writeString(this->get_thingTwo());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case VirtualComplexUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
