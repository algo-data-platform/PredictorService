<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift service:-
 * SomeService
 */
interface SomeServiceAsyncIf extends \IThriftAsyncIf {
  /**
   * Original thrift definition:-
   * include.SomeMap
   *   bounce_map(1: include.SomeMap m);
   */
  public function bounce_map(Map<int, string> $m): Awaitable<Map<int, string>>;
}

/**
 * Original thrift service:-
 * SomeService
 */
interface SomeServiceIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * include.SomeMap
   *   bounce_map(1: include.SomeMap m);
   */
  public function bounce_map(Map<int, string> $m): Map<int, string>;
}

/**
 * Original thrift service:-
 * SomeService
 */
trait SomeServiceClientBase {
  require extends ThriftClientBase;

  protected function sendImpl_bounce_map(Map<int, string> $m): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new SomeService_bounce_map_args(
      $m,
    );
    try {
      $this->eventHandler_->preSend('bounce_map', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'bounce_map', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'bounce_map', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('bounce_map', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('bounce_map', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('bounce_map', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('bounce_map', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('bounce_map', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_bounce_map(?int $expectedsequenceid = null): Map<int, string> {
    try {
      $this->eventHandler_->preRecv('bounce_map', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'SomeService_bounce_map_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'SomeService_bounce_map_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new SomeService_bounce_map_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("bounce_map failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('bounce_map', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('bounce_map', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('bounce_map', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('bounce_map', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $success = $result->success;
      $this->eventHandler_->postRecv('bounce_map', $expectedsequenceid, $success);
      return $success;
    }
    $x = new \TApplicationException("bounce_map failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('bounce_map', $expectedsequenceid, $x);
    throw $x;
  }

}

class SomeServiceAsyncClient extends ThriftClientBase implements SomeServiceAsyncIf {
  use SomeServiceClientBase;

  /**
   * Original thrift definition:-
   * include.SomeMap
   *   bounce_map(1: include.SomeMap m);
   */
  public async function bounce_map(Map<int, string> $m): Awaitable<Map<int, string>> {
    $currentseqid = $this->sendImpl_bounce_map($m);
    await $this->asyncHandler_->genWait($currentseqid);
    return $this->recvImpl_bounce_map($currentseqid);
  }

}

class SomeServiceClient extends ThriftClientBase implements SomeServiceIf {
  use SomeServiceClientBase;

  <<__Deprecated('use gen_bounce_map()')>>
  public function bounce_map(Map<int, string> $m): Map<int, string> {
    $currentseqid = $this->sendImpl_bounce_map($m);
    return $this->recvImpl_bounce_map($currentseqid);
  }

  /**
   * Original thrift definition:-
   * include.SomeMap
   *   bounce_map(1: include.SomeMap m);
   */
  public async function gen_bounce_map(Map<int, string> $m): Awaitable<Map<int, string>> {
    $currentseqid = $this->sendImpl_bounce_map($m);
    await $this->asyncHandler_->genWait($currentseqid);
    return $this->recvImpl_bounce_map($currentseqid);
  }

  /* send and recv functions */
  public function send_bounce_map(Map<int, string> $m): int {
    return $this->sendImpl_bounce_map($m);
  }
  public function recv_bounce_map(?int $expectedsequenceid = null): Map<int, string> {
    return $this->recvImpl_bounce_map($expectedsequenceid);
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class SomeService_bounce_map_args implements \IThriftStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'm',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::STRING,
      'key' => dict[
        'type' => \TType::I32,
      ],
      'val' => dict[
        'type' => \TType::STRING,
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'm' => 1,
  };
  const int STRUCTURAL_ID = 1590329293490505564;
  public Map<int, string> $m;

  public function __construct(?Map<int, string> $m = null  ) {
    if ($m === null) {
      $this->m = Map {};
    } else {
      $this->m = $m;
    }
  }

  public function getName(): string {
    return 'SomeService_bounce_map_args';
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !is_array($parsed)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'm') !== null) {
      $_json3 = $parsed['m'];
      $_container4 = Map {};
      foreach($_json3 as $_key1 => $_value2) {
        $_value5 = '';
        $_value5 = $_value2;
        $_container4[$_key1] = $_value5;
      }
      $this->m = $_container4;
    }    
  }

}

class SomeService_bounce_map_result implements \IThriftStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    0 => dict[
      'var' => 'success',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::STRING,
      'key' => dict[
        'type' => \TType::I32,
      ],
      'val' => dict[
        'type' => \TType::STRING,
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'success' => 0,
  };
  const int STRUCTURAL_ID = 390979496709511735;
  public ?Map<int, string> $success;

  public function __construct(?Map<int, string> $success = null  ) {
  }

  public function getName(): string {
    return 'SomeService_bounce_map_result';
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !is_array($parsed)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'success') !== null) {
      $_json3 = $parsed['success'];
      $_container4 = Map {};
      foreach($_json3 as $_key1 => $_value2) {
        $_value5 = '';
        $_value5 = $_value2;
        $_container4[$_key1] = $_value5;
      }
      $this->success = $_container4;
    }    
  }

}

