/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace apache {
namespace thrift {
namespace fixtures {
namespace types {


SomeServiceClientWrapper::SomeServiceClientWrapper(
    std::shared_ptr<apache::thrift::fixtures::types::SomeServiceAsyncClient> async_client,
    std::shared_ptr<apache::thrift::RequestChannel> channel) : 
    async_client(async_client),
      channel_(channel) {}

SomeServiceClientWrapper::~SomeServiceClientWrapper() {}

folly::Future<folly::Unit> SomeServiceClientWrapper::disconnect() {
  return folly::via(
    this->async_client->getChannel()->getEventBase(),
    [this] { disconnectInLoop(); });
}

void SomeServiceClientWrapper::disconnectInLoop() {
    channel_.reset();
    async_client.reset();
}

void SomeServiceClientWrapper::setPersistentHeader(const std::string& key, const std::string& value) {
    auto headerChannel = async_client->getHeaderChannel();
    if (headerChannel != nullptr) {
        headerChannel->setPersistentHeader(key, value);
    }
}


folly::Future<std::unordered_map<int32_t,std::string>>
SomeServiceClientWrapper::bounce_map(
    apache::thrift::RpcOptions& rpcOptions,
    std::unordered_map<int32_t,std::string> arg_m) {
  folly::Promise<std::unordered_map<int32_t,std::string>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::unordered_map<int32_t,std::string>>>(
    std::move(_promise), rpcOptions, async_client->recv_wrapped_bounce_map, channel_);
  async_client->bounce_map(
    rpcOptions,
    std::move(callback),
    arg_m
  );
  return _future;
}


} // namespace apache
} // namespace thrift
} // namespace fixtures
} // namespace types
