#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport (
    cTApplicationException,
    ApplicationError as __ApplicationError,
    cTApplicationExceptionType__UNKNOWN)
from thrift.py3.server cimport ServiceInterface, RequestContext, Cpp2RequestContext
from thrift.py3.server import RequestContext, pass_context
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)

cimport folly.futures
from folly.executor cimport get_executor

cimport module.types as _module_types
import module.types as _module_types
import include.types as _include_types
cimport include.types as _include_types

import asyncio
import functools
import sys
import traceback
import types as _py_types

from module.services_wrapper cimport cSomeServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[unique_ptr[_module_types.std_unordered_map[int32_t,string]]] move(
        cFollyPromise[unique_ptr[_module_types.std_unordered_map[int32_t,string]]])

cdef class Promise_std_unordered_map__Map__i32_string:
    cdef cFollyPromise[unique_ptr[_module_types.std_unordered_map[int32_t,string]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[_module_types.std_unordered_map[int32_t,string]]] cPromise):
        inst = <Promise_std_unordered_map__Map__i32_string>Promise_std_unordered_map__Map__i32_string.__new__(Promise_std_unordered_map__Map__i32_string)
        inst.cPromise = move(cPromise)
        return inst

cdef object _SomeService_annotations = _py_types.MappingProxyType({
})


cdef class SomeServiceInterface(
    ServiceInterface
):
    annotations = _SomeService_annotations

    def __cinit__(self):
        self.interface_wrapper = cSomeServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    @staticmethod
    def pass_context_bounce_map(fn):
        return pass_context(fn)

    async def bounce_map(
            self,
            m):
        raise NotImplementedError("async def bounce_map is not implemented")


cdef api void call_cy_SomeService_bounce_map(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[_module_types.std_unordered_map[int32_t,string]]] cPromise,
    unique_ptr[_module_types.std_unordered_map[int32_t,string]] m
):
    cdef SomeServiceInterface __iface
    __iface = self
    __promise = Promise_std_unordered_map__Map__i32_string.create(move(cPromise))
    arg_m = _module_types.std_unordered_map__Map__i32_string.create(_module_types.move(m))
    __context = None
    if __iface._pass_context_bounce_map:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SomeService_bounce_map_coro(
            self,
            __context,
            __promise,
            arg_m
        )
    )

async def SomeService_bounce_map_coro(
    object self,
    object ctx,
    Promise_std_unordered_map__Map__i32_string promise,
    m
):
    try:
        if ctx is not None:
            result = await self.bounce_map(ctx,
                      m)
        else:
            result = await self.bounce_map(
                      m)
        result = _module_types.std_unordered_map__Map__i32_string(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler bounce_map:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[_module_types.std_unordered_map[int32_t,string]](deref((<_module_types.std_unordered_map__Map__i32_string?> result)._cpp_obj)))

