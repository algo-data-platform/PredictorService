/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "src/gen-cpp2/SomeService.h"
#include "src/gen-cpp2/SomeService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

namespace apache { namespace thrift { namespace fixtures { namespace types {
std::unique_ptr<apache::thrift::AsyncProcessor> SomeServiceSvIf::getProcessor() {
  return std::make_unique<SomeServiceAsyncProcessor>(this);
}

void SomeServiceSvIf::bounce_map( ::apache::thrift::fixtures::types::SomeMap& /*_return*/, std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap> /*m*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("bounce_map");
}

folly::Future<std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap>> SomeServiceSvIf::future_bounce_map(std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap> m) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::apache::thrift::fixtures::types::SomeMap& _return) { bounce_map(_return, std::move(m)); });
}

void SomeServiceSvIf::async_tm_bounce_map(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap>>> callback, std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap> m) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_bounce_map(std::move(m)); });
}

void SomeServiceSvNull::bounce_map( ::apache::thrift::fixtures::types::SomeMap& /*_return*/, std::unique_ptr< ::apache::thrift::fixtures::types::SomeMap> /*m*/) {}

const char* SomeServiceAsyncProcessor::getServiceName() {
  return "SomeService";
}

folly::Optional<std::string> SomeServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void SomeServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool SomeServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> SomeServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> SomeServiceAsyncProcessor::cacheKeyMap_ {};
const SomeServiceAsyncProcessor::BinaryProtocolProcessMap& SomeServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const SomeServiceAsyncProcessor::BinaryProtocolProcessMap SomeServiceAsyncProcessor::binaryProcessMap_ {
  {"bounce_map", &SomeServiceAsyncProcessor::_processInThread_bounce_map<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const SomeServiceAsyncProcessor::CompactProtocolProcessMap& SomeServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const SomeServiceAsyncProcessor::CompactProtocolProcessMap SomeServiceAsyncProcessor::compactProcessMap_ {
  {"bounce_map", &SomeServiceAsyncProcessor::_processInThread_bounce_map<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift {

}} // apache::thrift
