/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.includes;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;

import static com.google.common.base.MoreObjects.toStringHelper;

@ThriftStruct("MyStruct")
public final class MyStruct
{
    @ThriftConstructor
    public MyStruct(
        @ThriftField(value=1, name="MyIncludedField", requiredness=Requiredness.NONE) final test.fixtures.includes.includes.Included myIncludedField,
        @ThriftField(value=2, name="MyOtherIncludedField", requiredness=Requiredness.NONE) final test.fixtures.includes.includes.Included myOtherIncludedField,
        @ThriftField(value=3, name="MyIncludedInt", requiredness=Requiredness.NONE) final long myIncludedInt
    ) {
        this.myIncludedField = myIncludedField;
        this.myOtherIncludedField = myOtherIncludedField;
        this.myIncludedInt = myIncludedInt;
    }

    public static class Builder {
        private test.fixtures.includes.includes.Included myIncludedField;

        public Builder setMyIncludedField(test.fixtures.includes.includes.Included myIncludedField) {
            this.myIncludedField = myIncludedField;
            return this;
        }
        private test.fixtures.includes.includes.Included myOtherIncludedField;

        public Builder setMyOtherIncludedField(test.fixtures.includes.includes.Included myOtherIncludedField) {
            this.myOtherIncludedField = myOtherIncludedField;
            return this;
        }
        private long myIncludedInt;

        public Builder setMyIncludedInt(long myIncludedInt) {
            this.myIncludedInt = myIncludedInt;
            return this;
        }

        public Builder() { }
        public Builder(MyStruct other) {
            this.myIncludedField = other.myIncludedField;
            this.myOtherIncludedField = other.myOtherIncludedField;
            this.myIncludedInt = other.myIncludedInt;
        }

        public MyStruct build() {
            return new MyStruct (
                this.myIncludedField,
                this.myOtherIncludedField,
                this.myIncludedInt
            );
        }
    }

    private final test.fixtures.includes.includes.Included myIncludedField;

    @ThriftField(value=1, name="MyIncludedField", requiredness=Requiredness.NONE)
    public test.fixtures.includes.includes.Included getMyIncludedField() { return myIncludedField; }

    private final test.fixtures.includes.includes.Included myOtherIncludedField;

    @ThriftField(value=2, name="MyOtherIncludedField", requiredness=Requiredness.NONE)
    public test.fixtures.includes.includes.Included getMyOtherIncludedField() { return myOtherIncludedField; }

    private final long myIncludedInt;

    @ThriftField(value=3, name="MyIncludedInt", requiredness=Requiredness.NONE)
    public long getMyIncludedInt() { return myIncludedInt; }

    @Override
    public String toString()
    {
        return toStringHelper(this)
            .add("myIncludedField", myIncludedField)
            .add("myOtherIncludedField", myOtherIncludedField)
            .add("myIncludedInt", myIncludedInt)
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        MyStruct other = (MyStruct)o;

        return
            Objects.equals(myIncludedField, other.myIncludedField) &&
            Objects.equals(myOtherIncludedField, other.myOtherIncludedField) &&
            Objects.equals(myIncludedInt, other.myIncludedInt);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            myIncludedField,
            myOtherIncludedField,
            myIncludedInt
        });
    }
}
