/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/service/services_wrapper.h>
#include <src/gen-py3/service/services_api.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

namespace cpp2 {

MyServiceWrapper::MyServiceWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_service__services();
    Py_XINCREF(this->if_object);
  }

MyServiceWrapper::~MyServiceWrapper() {
    Py_XDECREF(this->if_object);
}

folly::Future<folly::Unit> MyServiceWrapper::future_query(
  std::unique_ptr<cpp2::MyStruct> s,
  std::unique_ptr<cpp2::Included> i
) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
s = std::move(s),
i = std::move(i)    ]() mutable {
        call_cy_MyService_query(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(s),
            std::move(i)        );
    });

  return future;
}

folly::Future<folly::Unit> MyServiceWrapper::future_has_arg_docs(
  std::unique_ptr<cpp2::MyStruct> s,
  std::unique_ptr<cpp2::Included> i
) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto ctx = getConnectionContext();
  folly::via(
    this->executor,
    [this, ctx,
     promise = std::move(promise),
s = std::move(s),
i = std::move(i)    ]() mutable {
        call_cy_MyService_has_arg_docs(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(s),
            std::move(i)        );
    });

  return future;
}

std::shared_ptr<apache::thrift::ServerInterface> MyServiceInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<MyServiceWrapper>(if_object, exc);
}
} // namespace cpp2
