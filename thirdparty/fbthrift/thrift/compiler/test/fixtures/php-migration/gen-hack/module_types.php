<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct {
  use \ThriftSerializationTrait;

  public static darray<int, darray<string, mixed>> $_TSPEC = darray[
    1 => darray[
      'var' => 'a',
      'type' => \TType::LST,
      'etype' => \TType::STRING,
      'elem' => darray[
        'type' => \TType::STRING,
        ],
        'format' => 'array',
      ],
    2 => darray[
      'var' => 'b',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => darray[
        'type' => \TType::STRING,
      ],
      'val' => darray[
        'type' => \TType::LST,
        'etype' => \TType::SET,
        'elem' => darray[
          'type' => \TType::SET,
          'etype' => \TType::I32,
          'elem' => darray[
            'type' => \TType::I32,
            ],
            'format' => 'array',
          ],
          'format' => 'array',
        ],
        'format' => 'array',
      ],
    3 => darray[
      'var' => 'c',
      'type' => \TType::I64,
      ],
    4 => darray[
      'var' => 'd',
      'type' => \TType::BOOL,
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'a' => 1,
    'b' => 2,
    'c' => 3,
    'd' => 4,
  };
  const int STRUCTURAL_ID = 3946809642153193229;
  /**
   * Original thrift field:-
   * 1: list<string> a
   */
  public ?varray<string> $a;
  /**
   * Original thrift field:-
   * 2: map<string, list<set<i32>>> b
   */
  public ?darray<string, varray<darray<int, bool>>> $b;
  /**
   * Original thrift field:-
   * 3: i64 c
   */
  public ?int $c;
  /**
   * Original thrift field:-
   * 4: bool d
   */
  public ?bool $d;

  public function __construct(@\Indexish<string, mixed> $vals = darray[]) {
    // UNSAFE_BLOCK $vals is not type safe :(, and we don't cast structs (yet)
    $this->a = idx($vals, 'a', null);
    if (C\contains_key($vals, 'b')) {
      $this->b = idx($vals, 'b', null);
    }
    $this->c = idx($vals, 'c', 7);
    $this->d = idx($vals, 'd', false);
  }

  public function getName(): string {
    return 'Foo';
  }

}

/**
 * Original thrift exception:-
 * Baz
 */
class Baz extends \TException implements \IThriftStruct {
  use \ThriftSerializationTrait;

  public static darray<int, darray<string, mixed>> $_TSPEC = darray[
    1 => darray[
      'var' => 'message',
      'type' => \TType::STRING,
      ],
    2 => darray[
      'var' => 'some_field',
      'type' => \TType::STRUCT,
      'class' => 'Foo',
      ],
    3 => darray[
      'var' => 'some_container',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => darray[
        'type' => \TType::STRING,
        ],
        'format' => 'array',
      ],
    4 => darray[
      'var' => 'code',
      'type' => \TType::I32,
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'message' => 1,
    'some_field' => 2,
    'some_container' => 3,
    'code' => 4,
  };
  const int STRUCTURAL_ID = 1663976252517274137;
  /**
   * Original thrift field:-
   * 1: string message
   */
  public string $message;
  /**
   * Original thrift field:-
   * 2: struct module.Foo some_field
   */
  public ?Foo $some_field;
  /**
   * Original thrift field:-
   * 3: set<string> some_container
   */
  public ?darray<string, bool> $some_container;
  /**
   * Original thrift field:-
   * 4: i32 code
   */
  public int $code;

  public function __construct(@\Indexish<string, mixed> $vals = darray[]) {
    // UNSAFE_BLOCK $vals is not type safe :(, and we don't cast structs (yet)
    parent::__construct();
    $this->message = (string)idx($vals, 'message', '');
    $this->some_field = idx($vals, 'some_field', null);
    $this->some_container = idx($vals, 'some_container', null);
    $this->code = (int)idx($vals, 'code', 0);
  }

  public function getName(): string {
    return 'Baz';
  }

}

