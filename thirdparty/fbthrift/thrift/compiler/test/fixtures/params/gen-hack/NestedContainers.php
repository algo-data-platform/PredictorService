<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift service:-
 * NestedContainers
 */
interface NestedContainersAsyncIf extends \IThriftAsyncIf {
  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public function mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public function listSet(\Indexish<int, Set<int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void>;
}

/**
 * Original thrift service:-
 * NestedContainers
 */
interface NestedContainersIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public function mapSet(\Indexish<int, Set<int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public function listSet(\Indexish<int, Set<int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): void;
}

/**
 * Original thrift service:-
 * NestedContainers
 */
trait NestedContainersClientBase {
  require extends ThriftClientBase;

  protected function sendImpl_mapList(\Indexish<int, \Indexish<int, int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_mapList_args(
      (new Map($foo))->map(
        $_val0 ==> new Vector($_val0)
      ),
    );
    try {
      $this->eventHandler_->preSend('mapList', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'mapList', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'mapList', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('mapList', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('mapList', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('mapList', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('mapList', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('mapList', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_mapList(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('mapList', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_mapList_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_mapList_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_mapList_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("mapList failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('mapList', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('mapList', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('mapList', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('mapList', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('mapList', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_mapSet(\Indexish<int, Set<int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_mapSet_args(
      new Map($foo),
    );
    try {
      $this->eventHandler_->preSend('mapSet', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'mapSet', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'mapSet', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('mapSet', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('mapSet', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('mapSet', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('mapSet', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('mapSet', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_mapSet(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('mapSet', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_mapSet_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_mapSet_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_mapSet_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("mapSet failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('mapSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('mapSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('mapSet', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('mapSet', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('mapSet', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_listMap(\Indexish<int, \Indexish<int, int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_listMap_args(
      (new Vector($foo))->map(
        $_val0 ==> new Map($_val0)
      ),
    );
    try {
      $this->eventHandler_->preSend('listMap', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'listMap', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'listMap', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('listMap', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('listMap', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('listMap', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('listMap', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('listMap', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_listMap(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('listMap', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_listMap_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_listMap_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_listMap_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("listMap failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('listMap', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('listMap', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('listMap', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('listMap', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('listMap', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_listSet(\Indexish<int, Set<int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_listSet_args(
      new Vector($foo),
    );
    try {
      $this->eventHandler_->preSend('listSet', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'listSet', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'listSet', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('listSet', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('listSet', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('listSet', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('listSet', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('listSet', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_listSet(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('listSet', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_listSet_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_listSet_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_listSet_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("listSet failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('listSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('listSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('listSet', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('listSet', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('listSet', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_turtles_args(
      (new Vector($foo))->map(
        $_val0 ==> (new Vector($_val0))->map(
          $_val1 ==> (new Map($_val1))->map(
            $_val2 ==> new Map($_val2)
          )
        )
      ),
    );
    try {
      $this->eventHandler_->preSend('turtles', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'turtles', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'turtles', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('turtles', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('turtles', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('turtles', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('turtles', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('turtles', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_turtles(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('turtles', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_turtles_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_turtles_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin(&$fname, &$mtype, &$rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_turtles_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("turtles failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('turtles', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('turtles', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('turtles', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('turtles', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('turtles', $expectedsequenceid, null);
return;
  }

}

class NestedContainersAsyncClient extends ThriftClientBase implements NestedContainersAsyncIf {
  use NestedContainersClientBase;

  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public async function mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapList($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapList($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public async function mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public async function listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listMap($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listMap($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public async function listSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public async function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_turtles($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_turtles($currentseqid);
  }

}

class NestedContainersClient extends ThriftClientBase implements NestedContainersIf {
  use NestedContainersClientBase;

  <<__Deprecated('use gen_mapList()')>>
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): void {
    $currentseqid = $this->sendImpl_mapList($foo);
    $this->recvImpl_mapList($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public async function gen_mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapList($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapList($currentseqid);
  }

  <<__Deprecated('use gen_mapSet()')>>
  public function mapSet(\Indexish<int, Set<int>> $foo): void {
    $currentseqid = $this->sendImpl_mapSet($foo);
    $this->recvImpl_mapSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public async function gen_mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapSet($currentseqid);
  }

  <<__Deprecated('use gen_listMap()')>>
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): void {
    $currentseqid = $this->sendImpl_listMap($foo);
    $this->recvImpl_listMap($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public async function gen_listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listMap($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listMap($currentseqid);
  }

  <<__Deprecated('use gen_listSet()')>>
  public function listSet(\Indexish<int, Set<int>> $foo): void {
    $currentseqid = $this->sendImpl_listSet($foo);
    $this->recvImpl_listSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public async function gen_listSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listSet($currentseqid);
  }

  <<__Deprecated('use gen_turtles()')>>
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): void {
    $currentseqid = $this->sendImpl_turtles($foo);
    $this->recvImpl_turtles($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public async function gen_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_turtles($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_turtles($currentseqid);
  }

  /* send and recv functions */
  public function send_mapList(\Indexish<int, \Indexish<int, int>> $foo): int {
    return $this->sendImpl_mapList($foo);
  }
  public function recv_mapList(?int $expectedsequenceid = null): void {
    $this->recvImpl_mapList($expectedsequenceid);
  }
  public function send_mapSet(\Indexish<int, Set<int>> $foo): int {
    return $this->sendImpl_mapSet($foo);
  }
  public function recv_mapSet(?int $expectedsequenceid = null): void {
    $this->recvImpl_mapSet($expectedsequenceid);
  }
  public function send_listMap(\Indexish<int, \Indexish<int, int>> $foo): int {
    return $this->sendImpl_listMap($foo);
  }
  public function recv_listMap(?int $expectedsequenceid = null): void {
    $this->recvImpl_listMap($expectedsequenceid);
  }
  public function send_listSet(\Indexish<int, Set<int>> $foo): int {
    return $this->sendImpl_listSet($foo);
  }
  public function recv_listSet(?int $expectedsequenceid = null): void {
    $this->recvImpl_listSet($expectedsequenceid);
  }
  public function send_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): int {
    return $this->sendImpl_turtles($foo);
  }
  public function recv_turtles(?int $expectedsequenceid = null): void {
    $this->recvImpl_turtles($expectedsequenceid);
  }
}

abstract class NestedContainersAsyncProcessorBase extends ThriftAsyncProcessor {
  abstract const type TThriftIf as NestedContainersAsyncIf;
  protected async function process_mapList(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapList');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapList', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapList_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapList_args');
    } else {
      $args = new NestedContainers_mapList_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapList', $args);
    $result = new NestedContainers_mapList_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapList', $args);
      await $this->handler->mapList($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapList', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapList', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapList', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapList', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapList', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapList", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapList', $result);
  }
  protected async function process_mapSet(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapSet', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapSet_args');
    } else {
      $args = new NestedContainers_mapSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapSet', $args);
    $result = new NestedContainers_mapSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapSet', $args);
      await $this->handler->mapSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapSet', $result);
  }
  protected async function process_listMap(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listMap');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listMap', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listMap_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listMap_args');
    } else {
      $args = new NestedContainers_listMap_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listMap', $args);
    $result = new NestedContainers_listMap_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listMap', $args);
      await $this->handler->listMap($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listMap', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listMap', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listMap', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listMap', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listMap', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listMap", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listMap', $result);
  }
  protected async function process_listSet(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listSet', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listSet_args');
    } else {
      $args = new NestedContainers_listSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listSet', $args);
    $result = new NestedContainers_listSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listSet', $args);
      await $this->handler->listSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listSet', $result);
  }
  protected async function process_turtles(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('turtles');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'turtles', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_turtles_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_turtles_args');
    } else {
      $args = new NestedContainers_turtles_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'turtles', $args);
    $result = new NestedContainers_turtles_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'turtles', $args);
      await $this->handler->turtles($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'turtles', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'turtles', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'turtles', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'turtles', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'turtles', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("turtles", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'turtles', $result);
  }
}
class NestedContainersAsyncProcessor extends NestedContainersAsyncProcessorBase {
  const type TThriftIf = NestedContainersAsyncIf;
}

abstract class NestedContainersSyncProcessorBase extends ThriftSyncProcessor {
  abstract const type TThriftIf as NestedContainersIf;
  protected function process_mapList(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapList');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapList', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapList_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapList_args');
    } else {
      $args = new NestedContainers_mapList_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapList', $args);
    $result = new NestedContainers_mapList_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapList', $args);
      $this->handler->mapList($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapList', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapList', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapList', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapList', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapList', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapList", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapList', $result);
  }
  protected function process_mapSet(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapSet', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapSet_args');
    } else {
      $args = new NestedContainers_mapSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapSet', $args);
    $result = new NestedContainers_mapSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapSet', $args);
      $this->handler->mapSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapSet', $result);
  }
  protected function process_listMap(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listMap');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listMap', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listMap_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listMap_args');
    } else {
      $args = new NestedContainers_listMap_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listMap', $args);
    $result = new NestedContainers_listMap_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listMap', $args);
      $this->handler->listMap($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listMap', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listMap', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listMap', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listMap', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listMap', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listMap", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listMap', $result);
  }
  protected function process_listSet(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listSet', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listSet_args');
    } else {
      $args = new NestedContainers_listSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listSet', $args);
    $result = new NestedContainers_listSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listSet', $args);
      $this->handler->listSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listSet', $result);
  }
  protected function process_turtles(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('turtles');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'turtles', dict[]);

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_turtles_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_turtles_args');
    } else {
      $args = new NestedContainers_turtles_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'turtles', $args);
    $result = new NestedContainers_turtles_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'turtles', $args);
      $this->handler->turtles($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'turtles', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'turtles', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'turtles', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'turtles', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'turtles', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("turtles", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'turtles', $result);
  }
}
class NestedContainersSyncProcessor extends NestedContainersSyncProcessorBase {
  const type TThriftIf = NestedContainersIf;
}
// For backwards compatibility
class NestedContainersProcessor extends NestedContainersSyncProcessor {}

// HELPER FUNCTIONS AND STRUCTURES

class NestedContainers_mapList_args implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'foo',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::LST,
      'key' => dict[
        'type' => \TType::I32,
      ],
      'val' => dict[
        'type' => \TType::LST,
        'etype' => \TType::I32,
        'elem' => dict[
          'type' => \TType::I32,
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => dict<int, vec<int>>,
    ...
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Map<int, Vector<int>> $foo;

  public function __construct(?Map<int, Vector<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Map {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_mapList_args';
  }

  public static function __jsonArrayToShape(
    dict<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'foo')) {
      $shape_data['foo'] = Map {};
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_int($value3)) {
          return null;
        }
        /* HH_IGNORE_ERROR[4005] */
        /* HH_IGNORE_ERROR[4063] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Map($shape['foo']))->map(
      $val4 ==> (new Vector($val4)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->toVec(),
      )->toDict(),
    );
  }
}

class NestedContainers_mapList_result implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_mapList_result';
  }

}

class NestedContainers_mapSet_args implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'foo',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::SET,
      'key' => dict[
        'type' => \TType::I32,
      ],
      'val' => dict[
        'type' => \TType::SET,
        'etype' => \TType::I32,
        'elem' => dict[
          'type' => \TType::I32,
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => dict<int, dict<int, bool>>,
    ...
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Map<int, Set<int>> $foo;

  public function __construct(?Map<int, Set<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Map {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_mapSet_args';
  }

  public static function __jsonArrayToShape(
    dict<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'foo')) {
      $shape_data['foo'] = Map {};
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      $the_set4 = dict[];
      foreach (/* HH_IGNORE_ERROR[4110] */ $value1 as $key2 => $shape_data3) {
        if (!is_int($shape_data3)) {
          return null;
        }
        $the_set4[$shape_data3] = true;
      }
      $value1 = $the_set4;
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Map($shape['foo']))->map(
      $val5 ==> new Set(Keyset\keys($val5)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> darray(Dict\fill_keys($_val0, true)),
      )->toDict(),
    );
  }
}

class NestedContainers_mapSet_result implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_mapSet_result';
  }

}

class NestedContainers_listMap_args implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::MAP,
      'elem' => dict[
        'type' => \TType::MAP,
        'ktype' => \TType::I32,
        'vtype' => \TType::I32,
        'key' => dict[
          'type' => \TType::I32,
        ],
        'val' => dict[
          'type' => \TType::I32,
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => vec<dict<int, int>>,
    ...
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Map<int, int>> $foo;

  public function __construct(?Vector<Map<int, int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_listMap_args';
  }

  public static function __jsonArrayToShape(
    dict<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'foo')) {
      $shape_data['foo'] = Vector {};
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_int($value3)) {
          return null;
        }
        /* HH_IGNORE_ERROR[4005] */
        /* HH_IGNORE_ERROR[4063] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val4 ==> (new Map($val4)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->toDict(),
      )->toVec(),
    );
  }
}

class NestedContainers_listMap_result implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_listMap_result';
  }

}

class NestedContainers_listSet_args implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::SET,
      'elem' => dict[
        'type' => \TType::SET,
        'etype' => \TType::I32,
        'elem' => dict[
          'type' => \TType::I32,
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => vec<dict<int, bool>>,
    ...
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Set<int>> $foo;

  public function __construct(?Vector<Set<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_listSet_args';
  }

  public static function __jsonArrayToShape(
    dict<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'foo')) {
      $shape_data['foo'] = Vector {};
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      $the_set4 = dict[];
      foreach (/* HH_IGNORE_ERROR[4110] */ $value1 as $key2 => $shape_data3) {
        if (!is_int($shape_data3)) {
          return null;
        }
        $the_set4[$shape_data3] = true;
      }
      $value1 = $the_set4;
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val5 ==> new Set(Keyset\keys($val5)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> darray(Dict\fill_keys($_val0, true)),
      )->toVec(),
    );
  }
}

class NestedContainers_listSet_result implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_listSet_result';
  }

}

class NestedContainers_turtles_args implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    1 => dict[
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::LST,
      'elem' => dict[
        'type' => \TType::LST,
        'etype' => \TType::MAP,
        'elem' => dict[
          'type' => \TType::MAP,
          'ktype' => \TType::I32,
          'vtype' => \TType::MAP,
          'key' => dict[
            'type' => \TType::I32,
          ],
          'val' => dict[
            'type' => \TType::MAP,
            'ktype' => \TType::I32,
            'vtype' => \TType::SET,
            'key' => dict[
              'type' => \TType::I32,
            ],
            'val' => dict[
              'type' => \TType::SET,
              'etype' => \TType::I32,
              'elem' => dict[
                'type' => \TType::I32,
                ],
                'format' => 'collection',
              ],
              'format' => 'collection',
            ],
            'format' => 'collection',
          ],
          'format' => 'collection',
        ],
        'format' => 'collection',
      ],
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => vec<vec<dict<int, dict<int, dict<int, bool>>>>>,
    ...
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Vector<Map<int, Map<int, Set<int>>>>> $foo;

  public function __construct(?Vector<Vector<Map<int, Map<int, Set<int>>>>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_turtles_args';
  }

  public static function __jsonArrayToShape(
    dict<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!C\contains_key($shape_data, 'foo')) {
      $shape_data['foo'] = Vector {};
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_array($value3)) {
          return null;
        }
        foreach (/* HH_IGNORE_ERROR[4110] */$value3 as $key4 => $value5) {
          if (!is_int($key4)) {
            return null;
          }
          if (!is_array($value5)) {
            return null;
          }
          foreach (/* HH_IGNORE_ERROR[4110] */$value5 as $key6 => $value7) {
            if (!is_int($key6)) {
              return null;
            }
            if (!is_array($value7)) {
              return null;
            }
            $the_set10 = dict[];
            foreach (/* HH_IGNORE_ERROR[4110] */ $value7 as $key8 => $shape_data9) {
              if (!is_int($shape_data9)) {
                return null;
              }
              $the_set10[$shape_data9] = true;
            }
            $value7 = $the_set10;
            /* HH_IGNORE_ERROR[4005] */
            /* HH_IGNORE_ERROR[4063] */
            $value5[$key6] = $value7;
          }
          /* HH_IGNORE_ERROR[4005] */
          /* HH_IGNORE_ERROR[4063] */
          $value3[$key4] = $value5;
        }
        /* HH_IGNORE_ERROR[4005] */
        /* HH_IGNORE_ERROR[4063] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      /* HH_IGNORE_ERROR[4063] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val11 ==> (new Vector($val11))->map(
        $val12 ==> (new Map($val12))->map(
          $val13 ==> (new Map($val13))->map(
            $val14 ==> new Set(Keyset\keys($val14)),
          ),
        ),
      ),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->map(
          $_val1 ==> $_val1->map(
            $_val2 ==> $_val2->map(
              $_val3 ==> darray(Dict\fill_keys($_val3, true)),
            )->toDict(),
          )->toDict(),
        )->toVec(),
      )->toVec(),
    );
  }
}

class NestedContainers_turtles_result implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  public static dict<int, dict<string, mixed>> $_TSPEC = dict[
    ];
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_turtles_result';
  }

}

