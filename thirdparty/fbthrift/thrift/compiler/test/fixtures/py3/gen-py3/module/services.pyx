#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport (
    cTApplicationException,
    ApplicationError as __ApplicationError,
    cTApplicationExceptionType__UNKNOWN)
from thrift.py3.server cimport ServiceInterface, RequestContext, Cpp2RequestContext
from thrift.py3.server import RequestContext, pass_context
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)

cimport folly.futures
from folly.executor cimport get_executor

cimport module.types as _module_types
import module.types as _module_types

import asyncio
import functools
import sys
import traceback
import types as _py_types

from module.services_wrapper cimport cSimpleServiceInterface
from module.services_wrapper cimport cDerivedServiceInterface
from module.services_wrapper cimport cRederivedServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[unique_ptr[string]] move(cFollyPromise[unique_ptr[string]])
    cdef cFollyPromise[int32_t] move(
        cFollyPromise[int32_t])
    cdef cFollyPromise[cFollyUnit] move(
        cFollyPromise[cFollyUnit])
    cdef cFollyPromise[cbool] move(
        cFollyPromise[cbool])
    cdef cFollyPromise[int8_t] move(
        cFollyPromise[int8_t])
    cdef cFollyPromise[int16_t] move(
        cFollyPromise[int16_t])
    cdef cFollyPromise[int64_t] move(
        cFollyPromise[int64_t])
    cdef cFollyPromise[double] move(
        cFollyPromise[double])
    cdef cFollyPromise[unique_ptr[_module_types.cSimpleStruct]] move(
        cFollyPromise[unique_ptr[_module_types.cSimpleStruct]])
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] move(
        cFollyPromise[unique_ptr[vector[int32_t]]])
    cdef cFollyPromise[unique_ptr[cset[string]]] move(
        cFollyPromise[unique_ptr[cset[string]]])
    cdef cFollyPromise[unique_ptr[cmap[string,int16_t]]] move(
        cFollyPromise[unique_ptr[cmap[string,int16_t]]])
    cdef cFollyPromise[_module_types.cAnEnum] move(
        cFollyPromise[_module_types.cAnEnum])
    cdef cFollyPromise[unique_ptr[vector[vector[int32_t]]]] move(
        cFollyPromise[unique_ptr[vector[vector[int32_t]]]])
    cdef cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] move(
        cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]])
    cdef cFollyPromise[unique_ptr[vector[cset[string]]]] move(
        cFollyPromise[unique_ptr[vector[cset[string]]]])
    cdef cFollyPromise[unique_ptr[cset[int32_t]]] move(
        cFollyPromise[unique_ptr[cset[int32_t]]])
    cdef cFollyPromise[unique_ptr[cset[string]]] move(
        cFollyPromise[unique_ptr[cset[string]]])
    cdef cFollyPromise[unique_ptr[vector[_module_types.cAnEnum]]] move(
        cFollyPromise[unique_ptr[vector[_module_types.cAnEnum]]])

cdef class Promise_i32:
    cdef cFollyPromise[int32_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int32_t] cPromise):
        inst = <Promise_i32>Promise_i32.__new__(Promise_i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_void:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        inst = <Promise_void>Promise_void.__new__(Promise_void)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_string:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_string>Promise_string.__new__(Promise_string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_bool:
    cdef cFollyPromise[cbool] cPromise

    @staticmethod
    cdef create(cFollyPromise[cbool] cPromise):
        inst = <Promise_bool>Promise_bool.__new__(Promise_bool)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_byte:
    cdef cFollyPromise[int8_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int8_t] cPromise):
        inst = <Promise_byte>Promise_byte.__new__(Promise_byte)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i16:
    cdef cFollyPromise[int16_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int16_t] cPromise):
        inst = <Promise_i16>Promise_i16.__new__(Promise_i16)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_i64:
    cdef cFollyPromise[int64_t] cPromise

    @staticmethod
    cdef create(cFollyPromise[int64_t] cPromise):
        inst = <Promise_i64>Promise_i64.__new__(Promise_i64)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_double:
    cdef cFollyPromise[double] cPromise

    @staticmethod
    cdef create(cFollyPromise[double] cPromise):
        inst = <Promise_double>Promise_double.__new__(Promise_double)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_SimpleStruct:
    cdef cFollyPromise[unique_ptr[_module_types.cSimpleStruct]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[_module_types.cSimpleStruct]] cPromise):
        inst = <Promise_SimpleStruct>Promise_SimpleStruct.__new__(Promise_SimpleStruct)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__i32:
    cdef cFollyPromise[unique_ptr[vector[int32_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[int32_t]]] cPromise):
        inst = <Promise_List__i32>Promise_List__i32.__new__(Promise_List__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__string:
    cdef cFollyPromise[unique_ptr[cset[string]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[string]]] cPromise):
        inst = <Promise_Set__string>Promise_Set__string.__new__(Promise_Set__string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__string_i16:
    cdef cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise):
        inst = <Promise_Map__string_i16>Promise_Map__string_i16.__new__(Promise_Map__string_i16)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_AnEnum:
    cdef cFollyPromise[_module_types.cAnEnum] cPromise

    @staticmethod
    cdef create(cFollyPromise[_module_types.cAnEnum] cPromise):
        inst = <Promise_AnEnum>Promise_AnEnum.__new__(Promise_AnEnum)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__List__i32:
    cdef cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise):
        inst = <Promise_List__List__i32>Promise_List__List__i32.__new__(Promise_List__List__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Map__string_Map__string_i32:
    cdef cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise):
        inst = <Promise_Map__string_Map__string_i32>Promise_Map__string_Map__string_i32.__new__(Promise_Map__string_Map__string_i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__Set__string:
    cdef cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise):
        inst = <Promise_List__Set__string>Promise_List__Set__string.__new__(Promise_List__Set__string)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__i32:
    cdef cFollyPromise[unique_ptr[cset[int32_t]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[int32_t]]] cPromise):
        inst = <Promise_Set__i32>Promise_Set__i32.__new__(Promise_Set__i32)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_binary:
    cdef cFollyPromise[unique_ptr[string]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[string]] cPromise):
        inst = <Promise_binary>Promise_binary.__new__(Promise_binary)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_Set__binary:
    cdef cFollyPromise[unique_ptr[cset[string]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[cset[string]]] cPromise):
        inst = <Promise_Set__binary>Promise_Set__binary.__new__(Promise_Set__binary)
        inst.cPromise = move(cPromise)
        return inst

cdef class Promise_List__AnEnum:
    cdef cFollyPromise[unique_ptr[vector[_module_types.cAnEnum]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[_module_types.cAnEnum]]] cPromise):
        inst = <Promise_List__AnEnum>Promise_List__AnEnum.__new__(Promise_List__AnEnum)
        inst.cPromise = move(cPromise)
        return inst

cdef object _SimpleService_annotations = _py_types.MappingProxyType({
})


cdef class SimpleServiceInterface(
    ServiceInterface
):
    annotations = _SimpleService_annotations

    def __cinit__(self):
        self.interface_wrapper = cSimpleServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    @staticmethod
    def pass_context_get_five(fn):
        return pass_context(fn)

    async def get_five(
            self):
        raise NotImplementedError("async def get_five is not implemented")

    @staticmethod
    def pass_context_add_five(fn):
        return pass_context(fn)

    async def add_five(
            self,
            num):
        raise NotImplementedError("async def add_five is not implemented")

    @staticmethod
    def pass_context_do_nothing(fn):
        return pass_context(fn)

    async def do_nothing(
            self):
        raise NotImplementedError("async def do_nothing is not implemented")

    @staticmethod
    def pass_context_concat(fn):
        return pass_context(fn)

    async def concat(
            self,
            first,
            second):
        raise NotImplementedError("async def concat is not implemented")

    @staticmethod
    def pass_context_get_value(fn):
        return pass_context(fn)

    async def get_value(
            self,
            simple_struct):
        raise NotImplementedError("async def get_value is not implemented")

    @staticmethod
    def pass_context_negate(fn):
        return pass_context(fn)

    async def negate(
            self,
            input):
        raise NotImplementedError("async def negate is not implemented")

    @staticmethod
    def pass_context_tiny(fn):
        return pass_context(fn)

    async def tiny(
            self,
            input):
        raise NotImplementedError("async def tiny is not implemented")

    @staticmethod
    def pass_context_small(fn):
        return pass_context(fn)

    async def small(
            self,
            input):
        raise NotImplementedError("async def small is not implemented")

    @staticmethod
    def pass_context_big(fn):
        return pass_context(fn)

    async def big(
            self,
            input):
        raise NotImplementedError("async def big is not implemented")

    @staticmethod
    def pass_context_two(fn):
        return pass_context(fn)

    async def two(
            self,
            input):
        raise NotImplementedError("async def two is not implemented")

    @staticmethod
    def pass_context_expected_exception(fn):
        return pass_context(fn)

    async def expected_exception(
            self):
        raise NotImplementedError("async def expected_exception is not implemented")

    @staticmethod
    def pass_context_unexpected_exception(fn):
        return pass_context(fn)

    async def unexpected_exception(
            self):
        raise NotImplementedError("async def unexpected_exception is not implemented")

    @staticmethod
    def pass_context_sum_i16_list(fn):
        return pass_context(fn)

    async def sum_i16_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i16_list is not implemented")

    @staticmethod
    def pass_context_sum_i32_list(fn):
        return pass_context(fn)

    async def sum_i32_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i32_list is not implemented")

    @staticmethod
    def pass_context_sum_i64_list(fn):
        return pass_context(fn)

    async def sum_i64_list(
            self,
            numbers):
        raise NotImplementedError("async def sum_i64_list is not implemented")

    @staticmethod
    def pass_context_concat_many(fn):
        return pass_context(fn)

    async def concat_many(
            self,
            words):
        raise NotImplementedError("async def concat_many is not implemented")

    @staticmethod
    def pass_context_count_structs(fn):
        return pass_context(fn)

    async def count_structs(
            self,
            items):
        raise NotImplementedError("async def count_structs is not implemented")

    @staticmethod
    def pass_context_sum_set(fn):
        return pass_context(fn)

    async def sum_set(
            self,
            numbers):
        raise NotImplementedError("async def sum_set is not implemented")

    @staticmethod
    def pass_context_contains_word(fn):
        return pass_context(fn)

    async def contains_word(
            self,
            words,
            word):
        raise NotImplementedError("async def contains_word is not implemented")

    @staticmethod
    def pass_context_get_map_value(fn):
        return pass_context(fn)

    async def get_map_value(
            self,
            words,
            key):
        raise NotImplementedError("async def get_map_value is not implemented")

    @staticmethod
    def pass_context_map_length(fn):
        return pass_context(fn)

    async def map_length(
            self,
            items):
        raise NotImplementedError("async def map_length is not implemented")

    @staticmethod
    def pass_context_sum_map_values(fn):
        return pass_context(fn)

    async def sum_map_values(
            self,
            items):
        raise NotImplementedError("async def sum_map_values is not implemented")

    @staticmethod
    def pass_context_complex_sum_i32(fn):
        return pass_context(fn)

    async def complex_sum_i32(
            self,
            counter):
        raise NotImplementedError("async def complex_sum_i32 is not implemented")

    @staticmethod
    def pass_context_repeat_name(fn):
        return pass_context(fn)

    async def repeat_name(
            self,
            counter):
        raise NotImplementedError("async def repeat_name is not implemented")

    @staticmethod
    def pass_context_get_struct(fn):
        return pass_context(fn)

    async def get_struct(
            self):
        raise NotImplementedError("async def get_struct is not implemented")

    @staticmethod
    def pass_context_fib(fn):
        return pass_context(fn)

    async def fib(
            self,
            n):
        raise NotImplementedError("async def fib is not implemented")

    @staticmethod
    def pass_context_unique_words(fn):
        return pass_context(fn)

    async def unique_words(
            self,
            words):
        raise NotImplementedError("async def unique_words is not implemented")

    @staticmethod
    def pass_context_words_count(fn):
        return pass_context(fn)

    async def words_count(
            self,
            words):
        raise NotImplementedError("async def words_count is not implemented")

    @staticmethod
    def pass_context_set_enum(fn):
        return pass_context(fn)

    async def set_enum(
            self,
            in_enum):
        raise NotImplementedError("async def set_enum is not implemented")

    @staticmethod
    def pass_context_list_of_lists(fn):
        return pass_context(fn)

    async def list_of_lists(
            self,
            num_lists,
            num_items):
        raise NotImplementedError("async def list_of_lists is not implemented")

    @staticmethod
    def pass_context_word_character_frequency(fn):
        return pass_context(fn)

    async def word_character_frequency(
            self,
            sentence):
        raise NotImplementedError("async def word_character_frequency is not implemented")

    @staticmethod
    def pass_context_list_of_sets(fn):
        return pass_context(fn)

    async def list_of_sets(
            self,
            some_words):
        raise NotImplementedError("async def list_of_sets is not implemented")

    @staticmethod
    def pass_context_nested_map_argument(fn):
        return pass_context(fn)

    async def nested_map_argument(
            self,
            struct_map):
        raise NotImplementedError("async def nested_map_argument is not implemented")

    @staticmethod
    def pass_context_make_sentence(fn):
        return pass_context(fn)

    async def make_sentence(
            self,
            word_chars):
        raise NotImplementedError("async def make_sentence is not implemented")

    @staticmethod
    def pass_context_get_union(fn):
        return pass_context(fn)

    async def get_union(
            self,
            sets):
        raise NotImplementedError("async def get_union is not implemented")

    @staticmethod
    def pass_context_get_keys(fn):
        return pass_context(fn)

    async def get_keys(
            self,
            string_map):
        raise NotImplementedError("async def get_keys is not implemented")

    @staticmethod
    def pass_context_lookup_double(fn):
        return pass_context(fn)

    async def lookup_double(
            self,
            key):
        raise NotImplementedError("async def lookup_double is not implemented")

    @staticmethod
    def pass_context_retrieve_binary(fn):
        return pass_context(fn)

    async def retrieve_binary(
            self,
            something):
        raise NotImplementedError("async def retrieve_binary is not implemented")

    @staticmethod
    def pass_context_contain_binary(fn):
        return pass_context(fn)

    async def contain_binary(
            self,
            binaries):
        raise NotImplementedError("async def contain_binary is not implemented")

    @staticmethod
    def pass_context_contain_enum(fn):
        return pass_context(fn)

    async def contain_enum(
            self,
            the_enum):
        raise NotImplementedError("async def contain_enum is not implemented")
cdef object _DerivedService_annotations = _py_types.MappingProxyType({
})


cdef class DerivedServiceInterface(
SimpleServiceInterface
):
    annotations = _DerivedService_annotations

    def __cinit__(self):
        self.interface_wrapper = cDerivedServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    @staticmethod
    def pass_context_get_six(fn):
        return pass_context(fn)

    async def get_six(
            self):
        raise NotImplementedError("async def get_six is not implemented")
cdef object _RederivedService_annotations = _py_types.MappingProxyType({
})


cdef class RederivedServiceInterface(
DerivedServiceInterface
):
    annotations = _RederivedService_annotations

    def __cinit__(self):
        self.interface_wrapper = cRederivedServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    @staticmethod
    def pass_context_get_seven(fn):
        return pass_context(fn)

    async def get_seven(
            self):
        raise NotImplementedError("async def get_seven is not implemented")


cdef api void call_cy_SimpleService_get_five(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if __iface._pass_context_get_five:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_five_coro(
            self,
            __context,
            __promise
        )
    )

async def SimpleService_get_five_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.get_five(ctx,)
        else:
            result = await self.get_five()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_five:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_add_five(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    int32_t num
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_num = num
    __context = None
    if __iface._pass_context_add_five:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_add_five_coro(
            self,
            __context,
            __promise,
            arg_num
        )
    )

async def SimpleService_add_five_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    num
):
    try:
        if ctx is not None:
            result = await self.add_five(ctx,
                      num)
        else:
            result = await self.add_five(
                      num)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler add_five:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_do_nothing(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_void.create(move(cPromise))
    __context = None
    if __iface._pass_context_do_nothing:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_do_nothing_coro(
            self,
            __context,
            __promise
        )
    )

async def SimpleService_do_nothing_coro(
    object self,
    object ctx,
    Promise_void promise
):
    try:
        if ctx is not None:
            result = await self.do_nothing(ctx,)
        else:
            result = await self.do_nothing()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler do_nothing:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_SimpleService_concat(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] first,
    unique_ptr[string] second
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_first = (deref(first.get())).decode('UTF-8')
    arg_second = (deref(second.get())).decode('UTF-8')
    __context = None
    if __iface._pass_context_concat:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_concat_coro(
            self,
            __context,
            __promise,
            arg_first,
            arg_second
        )
    )

async def SimpleService_concat_coro(
    object self,
    object ctx,
    Promise_string promise,
    first,
    second
):
    try:
        if ctx is not None:
            result = await self.concat(ctx,
                      first,
                      second)
        else:
            result = await self.concat(
                      first,
                      second)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler concat:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_value(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[_module_types.cSimpleStruct] simple_struct
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_simple_struct = _module_types.SimpleStruct.create(shared_ptr[_module_types.cSimpleStruct](simple_struct.release()))
    __context = None
    if __iface._pass_context_get_value:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_value_coro(
            self,
            __context,
            __promise,
            arg_simple_struct
        )
    )

async def SimpleService_get_value_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    simple_struct
):
    try:
        if ctx is not None:
            result = await self.get_value(ctx,
                      simple_struct)
        else:
            result = await self.get_value(
                      simple_struct)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_value:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_negate(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise,
    cbool input
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_bool.create(move(cPromise))
    arg_input = input
    __context = None
    if __iface._pass_context_negate:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_negate_coro(
            self,
            __context,
            __promise,
            arg_input
        )
    )

async def SimpleService_negate_coro(
    object self,
    object ctx,
    Promise_bool promise,
    input
):
    try:
        if ctx is not None:
            result = await self.negate(ctx,
                      input)
        else:
            result = await self.negate(
                      input)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler negate:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_SimpleService_tiny(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int8_t] cPromise,
    int8_t input
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_byte.create(move(cPromise))
    arg_input = input
    __context = None
    if __iface._pass_context_tiny:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_tiny_coro(
            self,
            __context,
            __promise,
            arg_input
        )
    )

async def SimpleService_tiny_coro(
    object self,
    object ctx,
    Promise_byte promise,
    input
):
    try:
        if ctx is not None:
            result = await self.tiny(ctx,
                      input)
        else:
            result = await self.tiny(
                      input)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler tiny:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int8_t> result)

cdef api void call_cy_SimpleService_small(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int16_t] cPromise,
    int16_t input
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i16.create(move(cPromise))
    arg_input = input
    __context = None
    if __iface._pass_context_small:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_small_coro(
            self,
            __context,
            __promise,
            arg_input
        )
    )

async def SimpleService_small_coro(
    object self,
    object ctx,
    Promise_i16 promise,
    input
):
    try:
        if ctx is not None:
            result = await self.small(ctx,
                      input)
        else:
            result = await self.small(
                      input)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler small:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_big(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int64_t] cPromise,
    int64_t input
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i64.create(move(cPromise))
    arg_input = input
    __context = None
    if __iface._pass_context_big:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_big_coro(
            self,
            __context,
            __promise,
            arg_input
        )
    )

async def SimpleService_big_coro(
    object self,
    object ctx,
    Promise_i64 promise,
    input
):
    try:
        if ctx is not None:
            result = await self.big(ctx,
                      input)
        else:
            result = await self.big(
                      input)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler big:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int64_t> result)

cdef api void call_cy_SimpleService_two(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[double] cPromise,
    double input
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_double.create(move(cPromise))
    arg_input = input
    __context = None
    if __iface._pass_context_two:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_two_coro(
            self,
            __context,
            __promise,
            arg_input
        )
    )

async def SimpleService_two_coro(
    object self,
    object ctx,
    Promise_double promise,
    input
):
    try:
        if ctx is not None:
            result = await self.two(ctx,
                      input)
        else:
            result = await self.two(
                      input)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler two:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_SimpleService_expected_exception(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_void.create(move(cPromise))
    __context = None
    if __iface._pass_context_expected_exception:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_expected_exception_coro(
            self,
            __context,
            __promise
        )
    )

async def SimpleService_expected_exception_coro(
    object self,
    object ctx,
    Promise_void promise
):
    try:
        if ctx is not None:
            result = await self.expected_exception(ctx,)
        else:
            result = await self.expected_exception()
    except _module_types.SimpleException as ex:
        promise.cPromise.setException(deref((<_module_types.SimpleException> ex)._cpp_obj.get()))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler expected_exception:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_SimpleService_unexpected_exception(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if __iface._pass_context_unexpected_exception:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_unexpected_exception_coro(
            self,
            __context,
            __promise
        )
    )

async def SimpleService_unexpected_exception_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.unexpected_exception(ctx,)
        else:
            result = await self.unexpected_exception()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler unexpected_exception:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i16_list(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int16_t]] numbers
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_numbers = _module_types.List__i16.create(_module_types.move(numbers))
    __context = None
    if __iface._pass_context_sum_i16_list:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_sum_i16_list_coro(
            self,
            __context,
            __promise,
            arg_numbers
        )
    )

async def SimpleService_sum_i16_list_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    numbers
):
    try:
        if ctx is not None:
            result = await self.sum_i16_list(ctx,
                      numbers)
        else:
            result = await self.sum_i16_list(
                      numbers)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i16_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i32_list(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int32_t]] numbers
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_numbers = _module_types.List__i32.create(_module_types.move(numbers))
    __context = None
    if __iface._pass_context_sum_i32_list:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_sum_i32_list_coro(
            self,
            __context,
            __promise,
            arg_numbers
        )
    )

async def SimpleService_sum_i32_list_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    numbers
):
    try:
        if ctx is not None:
            result = await self.sum_i32_list(ctx,
                      numbers)
        else:
            result = await self.sum_i32_list(
                      numbers)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i32_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_i64_list(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[int64_t]] numbers
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_numbers = _module_types.List__i64.create(_module_types.move(numbers))
    __context = None
    if __iface._pass_context_sum_i64_list:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_sum_i64_list_coro(
            self,
            __context,
            __promise,
            arg_numbers
        )
    )

async def SimpleService_sum_i64_list_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    numbers
):
    try:
        if ctx is not None:
            result = await self.sum_i64_list(ctx,
                      numbers)
        else:
            result = await self.sum_i64_list(
                      numbers)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_i64_list:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_concat_many(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[vector[string]] words
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_words = _module_types.List__string.create(_module_types.move(words))
    __context = None
    if __iface._pass_context_concat_many:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_concat_many_coro(
            self,
            __context,
            __promise,
            arg_words
        )
    )

async def SimpleService_concat_many_coro(
    object self,
    object ctx,
    Promise_string promise,
    words
):
    try:
        if ctx is not None:
            result = await self.concat_many(ctx,
                      words)
        else:
            result = await self.concat_many(
                      words)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler concat_many:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_count_structs(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[vector[_module_types.cSimpleStruct]] items
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_items = _module_types.List__SimpleStruct.create(_module_types.move(items))
    __context = None
    if __iface._pass_context_count_structs:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_count_structs_coro(
            self,
            __context,
            __promise,
            arg_items
        )
    )

async def SimpleService_count_structs_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    items
):
    try:
        if ctx is not None:
            result = await self.count_structs(ctx,
                      items)
        else:
            result = await self.count_structs(
                      items)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler count_structs:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_sum_set(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[cset[int32_t]] numbers
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_numbers = _module_types.Set__i32.create(_module_types.move(numbers))
    __context = None
    if __iface._pass_context_sum_set:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_sum_set_coro(
            self,
            __context,
            __promise,
            arg_numbers
        )
    )

async def SimpleService_sum_set_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    numbers
):
    try:
        if ctx is not None:
            result = await self.sum_set(ctx,
                      numbers)
        else:
            result = await self.sum_set(
                      numbers)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_set:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_contains_word(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cbool] cPromise,
    unique_ptr[cset[string]] words,
    unique_ptr[string] word
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_bool.create(move(cPromise))
    arg_words = _module_types.Set__string.create(_module_types.move(words))
    arg_word = (deref(word.get())).decode('UTF-8')
    __context = None
    if __iface._pass_context_contains_word:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_contains_word_coro(
            self,
            __context,
            __promise,
            arg_words,
            arg_word
        )
    )

async def SimpleService_contains_word_coro(
    object self,
    object ctx,
    Promise_bool promise,
    words,
    word
):
    try:
        if ctx is not None:
            result = await self.contains_word(ctx,
                      words,
                      word)
        else:
            result = await self.contains_word(
                      words,
                      word)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler contains_word:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<cbool> result)

cdef api void call_cy_SimpleService_get_map_value(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[cmap[string,string]] words,
    unique_ptr[string] key
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_words = _module_types.Map__string_string.create(_module_types.move(words))
    arg_key = (deref(key.get())).decode('UTF-8')
    __context = None
    if __iface._pass_context_get_map_value:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_map_value_coro(
            self,
            __context,
            __promise,
            arg_words,
            arg_key
        )
    )

async def SimpleService_get_map_value_coro(
    object self,
    object ctx,
    Promise_string promise,
    words,
    key
):
    try:
        if ctx is not None:
            result = await self.get_map_value(ctx,
                      words,
                      key)
        else:
            result = await self.get_map_value(
                      words,
                      key)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_map_value:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_map_length(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int16_t] cPromise,
    unique_ptr[cmap[string,_module_types.cSimpleStruct]] items
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i16.create(move(cPromise))
    arg_items = _module_types.Map__string_SimpleStruct.create(_module_types.move(items))
    __context = None
    if __iface._pass_context_map_length:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_map_length_coro(
            self,
            __context,
            __promise,
            arg_items
        )
    )

async def SimpleService_map_length_coro(
    object self,
    object ctx,
    Promise_i16 promise,
    items
):
    try:
        if ctx is not None:
            result = await self.map_length(ctx,
                      items)
        else:
            result = await self.map_length(
                      items)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler map_length:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_sum_map_values(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int16_t] cPromise,
    unique_ptr[cmap[string,int16_t]] items
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i16.create(move(cPromise))
    arg_items = _module_types.Map__string_i16.create(_module_types.move(items))
    __context = None
    if __iface._pass_context_sum_map_values:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_sum_map_values_coro(
            self,
            __context,
            __promise,
            arg_items
        )
    )

async def SimpleService_sum_map_values_coro(
    object self,
    object ctx,
    Promise_i16 promise,
    items
):
    try:
        if ctx is not None:
            result = await self.sum_map_values(ctx,
                      items)
        else:
            result = await self.sum_map_values(
                      items)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler sum_map_values:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int16_t> result)

cdef api void call_cy_SimpleService_complex_sum_i32(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[_module_types.cComplexStruct] counter
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_counter = _module_types.ComplexStruct.create(shared_ptr[_module_types.cComplexStruct](counter.release()))
    __context = None
    if __iface._pass_context_complex_sum_i32:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_complex_sum_i32_coro(
            self,
            __context,
            __promise,
            arg_counter
        )
    )

async def SimpleService_complex_sum_i32_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    counter
):
    try:
        if ctx is not None:
            result = await self.complex_sum_i32(ctx,
                      counter)
        else:
            result = await self.complex_sum_i32(
                      counter)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler complex_sum_i32:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_repeat_name(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[_module_types.cComplexStruct] counter
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_counter = _module_types.ComplexStruct.create(shared_ptr[_module_types.cComplexStruct](counter.release()))
    __context = None
    if __iface._pass_context_repeat_name:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_repeat_name_coro(
            self,
            __context,
            __promise,
            arg_counter
        )
    )

async def SimpleService_repeat_name_coro(
    object self,
    object ctx,
    Promise_string promise,
    counter
):
    try:
        if ctx is not None:
            result = await self.repeat_name(ctx,
                      counter)
        else:
            result = await self.repeat_name(
                      counter)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler repeat_name:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_struct(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[_module_types.cSimpleStruct]] cPromise
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_SimpleStruct.create(move(cPromise))
    __context = None
    if __iface._pass_context_get_struct:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_struct_coro(
            self,
            __context,
            __promise
        )
    )

async def SimpleService_get_struct_coro(
    object self,
    object ctx,
    Promise_SimpleStruct promise
):
    try:
        if ctx is not None:
            result = await self.get_struct(ctx,)
        else:
            result = await self.get_struct()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_struct:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[_module_types.cSimpleStruct](deref((<_module_types.SimpleStruct?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_fib(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[int32_t]]] cPromise,
    int16_t n
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_List__i32.create(move(cPromise))
    arg_n = n
    __context = None
    if __iface._pass_context_fib:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_fib_coro(
            self,
            __context,
            __promise,
            arg_n
        )
    )

async def SimpleService_fib_coro(
    object self,
    object ctx,
    Promise_List__i32 promise,
    n
):
    try:
        if ctx is not None:
            result = await self.fib(ctx,
                      n)
        else:
            result = await self.fib(
                      n)
        result = _module_types.List__i32(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler fib:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[int32_t]](deref((<_module_types.List__i32?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_unique_words(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[string]] words
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Set__string.create(move(cPromise))
    arg_words = _module_types.List__string.create(_module_types.move(words))
    __context = None
    if __iface._pass_context_unique_words:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_unique_words_coro(
            self,
            __context,
            __promise,
            arg_words
        )
    )

async def SimpleService_unique_words_coro(
    object self,
    object ctx,
    Promise_Set__string promise,
    words
):
    try:
        if ctx is not None:
            result = await self.unique_words(ctx,
                      words)
        else:
            result = await self.unique_words(
                      words)
        result = _module_types.Set__string(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler unique_words:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<_module_types.Set__string?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_words_count(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cmap[string,int16_t]]] cPromise,
    unique_ptr[vector[string]] words
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Map__string_i16.create(move(cPromise))
    arg_words = _module_types.List__string.create(_module_types.move(words))
    __context = None
    if __iface._pass_context_words_count:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_words_count_coro(
            self,
            __context,
            __promise,
            arg_words
        )
    )

async def SimpleService_words_count_coro(
    object self,
    object ctx,
    Promise_Map__string_i16 promise,
    words
):
    try:
        if ctx is not None:
            result = await self.words_count(ctx,
                      words)
        else:
            result = await self.words_count(
                      words)
        result = _module_types.Map__string_i16(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler words_count:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,int16_t]](deref((<_module_types.Map__string_i16?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_set_enum(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[_module_types.cAnEnum] cPromise,
    _module_types.cAnEnum in_enum
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_AnEnum.create(move(cPromise))
    arg_in_enum = _module_types.AnEnum(<int> in_enum)
    __context = None
    if __iface._pass_context_set_enum:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_set_enum_coro(
            self,
            __context,
            __promise,
            arg_in_enum
        )
    )

async def SimpleService_set_enum_coro(
    object self,
    object ctx,
    Promise_AnEnum promise,
    in_enum
):
    try:
        if ctx is not None:
            result = await self.set_enum(ctx,
                      in_enum)
        else:
            result = await self.set_enum(
                      in_enum)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler set_enum:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(_module_types.AnEnum_to_cpp(result))

cdef api void call_cy_SimpleService_list_of_lists(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[vector[int32_t]]]] cPromise,
    int16_t num_lists,
    int16_t num_items
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_List__List__i32.create(move(cPromise))
    arg_num_lists = num_lists
    arg_num_items = num_items
    __context = None
    if __iface._pass_context_list_of_lists:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_list_of_lists_coro(
            self,
            __context,
            __promise,
            arg_num_lists,
            arg_num_items
        )
    )

async def SimpleService_list_of_lists_coro(
    object self,
    object ctx,
    Promise_List__List__i32 promise,
    num_lists,
    num_items
):
    try:
        if ctx is not None:
            result = await self.list_of_lists(ctx,
                      num_lists,
                      num_items)
        else:
            result = await self.list_of_lists(
                      num_lists,
                      num_items)
        result = _module_types.List__List__i32(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler list_of_lists:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[vector[int32_t]]](deref((<_module_types.List__List__i32?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_word_character_frequency(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cmap[string,cmap[string,int32_t]]]] cPromise,
    unique_ptr[string] sentence
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Map__string_Map__string_i32.create(move(cPromise))
    arg_sentence = (deref(sentence.get())).decode('UTF-8')
    __context = None
    if __iface._pass_context_word_character_frequency:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_word_character_frequency_coro(
            self,
            __context,
            __promise,
            arg_sentence
        )
    )

async def SimpleService_word_character_frequency_coro(
    object self,
    object ctx,
    Promise_Map__string_Map__string_i32 promise,
    sentence
):
    try:
        if ctx is not None:
            result = await self.word_character_frequency(ctx,
                      sentence)
        else:
            result = await self.word_character_frequency(
                      sentence)
        result = _module_types.Map__string_Map__string_i32(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler word_character_frequency:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cmap[string,cmap[string,int32_t]]](deref((<_module_types.Map__string_Map__string_i32?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_list_of_sets(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[cset[string]]]] cPromise,
    unique_ptr[string] some_words
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_List__Set__string.create(move(cPromise))
    arg_some_words = (deref(some_words.get())).decode('UTF-8')
    __context = None
    if __iface._pass_context_list_of_sets:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_list_of_sets_coro(
            self,
            __context,
            __promise,
            arg_some_words
        )
    )

async def SimpleService_list_of_sets_coro(
    object self,
    object ctx,
    Promise_List__Set__string promise,
    some_words
):
    try:
        if ctx is not None:
            result = await self.list_of_sets(ctx,
                      some_words)
        else:
            result = await self.list_of_sets(
                      some_words)
        result = _module_types.List__Set__string(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler list_of_sets:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[cset[string]]](deref((<_module_types.List__Set__string?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_nested_map_argument(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise,
    unique_ptr[cmap[string,vector[_module_types.cSimpleStruct]]] struct_map
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    arg_struct_map = _module_types.Map__string_List__SimpleStruct.create(_module_types.move(struct_map))
    __context = None
    if __iface._pass_context_nested_map_argument:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_nested_map_argument_coro(
            self,
            __context,
            __promise,
            arg_struct_map
        )
    )

async def SimpleService_nested_map_argument_coro(
    object self,
    object ctx,
    Promise_i32 promise,
    struct_map
):
    try:
        if ctx is not None:
            result = await self.nested_map_argument(ctx,
                      struct_map)
        else:
            result = await self.nested_map_argument(
                      struct_map)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler nested_map_argument:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_SimpleService_make_sentence(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[vector[vector[string]]] word_chars
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_string.create(move(cPromise))
    arg_word_chars = _module_types.List__List__string.create(_module_types.move(word_chars))
    __context = None
    if __iface._pass_context_make_sentence:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_make_sentence_coro(
            self,
            __context,
            __promise,
            arg_word_chars
        )
    )

async def SimpleService_make_sentence_coro(
    object self,
    object ctx,
    Promise_string promise,
    word_chars
):
    try:
        if ctx is not None:
            result = await self.make_sentence(ctx,
                      word_chars)
        else:
            result = await self.make_sentence(
                      word_chars)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler make_sentence:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result.encode('UTF-8')))

cdef api void call_cy_SimpleService_get_union(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[int32_t]]] cPromise,
    unique_ptr[vector[cset[int32_t]]] sets
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Set__i32.create(move(cPromise))
    arg_sets = _module_types.List__Set__i32.create(_module_types.move(sets))
    __context = None
    if __iface._pass_context_get_union:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_union_coro(
            self,
            __context,
            __promise,
            arg_sets
        )
    )

async def SimpleService_get_union_coro(
    object self,
    object ctx,
    Promise_Set__i32 promise,
    sets
):
    try:
        if ctx is not None:
            result = await self.get_union(ctx,
                      sets)
        else:
            result = await self.get_union(
                      sets)
        result = _module_types.Set__i32(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_union:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[int32_t]](deref((<_module_types.Set__i32?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_get_keys(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[cmap[string,string]]] string_map
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Set__string.create(move(cPromise))
    arg_string_map = _module_types.List__Map__string_string.create(_module_types.move(string_map))
    __context = None
    if __iface._pass_context_get_keys:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_get_keys_coro(
            self,
            __context,
            __promise,
            arg_string_map
        )
    )

async def SimpleService_get_keys_coro(
    object self,
    object ctx,
    Promise_Set__string promise,
    string_map
):
    try:
        if ctx is not None:
            result = await self.get_keys(ctx,
                      string_map)
        else:
            result = await self.get_keys(
                      string_map)
        result = _module_types.Set__string(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_keys:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<_module_types.Set__string?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_lookup_double(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[double] cPromise,
    int32_t key
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_double.create(move(cPromise))
    arg_key = key
    __context = None
    if __iface._pass_context_lookup_double:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_lookup_double_coro(
            self,
            __context,
            __promise,
            arg_key
        )
    )

async def SimpleService_lookup_double_coro(
    object self,
    object ctx,
    Promise_double promise,
    key
):
    try:
        if ctx is not None:
            result = await self.lookup_double(ctx,
                      key)
        else:
            result = await self.lookup_double(
                      key)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler lookup_double:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<double> result)

cdef api void call_cy_SimpleService_retrieve_binary(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[string]] cPromise,
    unique_ptr[string] something
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_binary.create(move(cPromise))
    arg_something = (deref(something.get()))
    __context = None
    if __iface._pass_context_retrieve_binary:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_retrieve_binary_coro(
            self,
            __context,
            __promise,
            arg_something
        )
    )

async def SimpleService_retrieve_binary_coro(
    object self,
    object ctx,
    Promise_binary promise,
    something
):
    try:
        if ctx is not None:
            result = await self.retrieve_binary(ctx,
                      something)
        else:
            result = await self.retrieve_binary(
                      something)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler retrieve_binary:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[string](<string?> result))

cdef api void call_cy_SimpleService_contain_binary(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[cset[string]]] cPromise,
    unique_ptr[vector[string]] binaries
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_Set__binary.create(move(cPromise))
    arg_binaries = _module_types.List__binary.create(_module_types.move(binaries))
    __context = None
    if __iface._pass_context_contain_binary:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_contain_binary_coro(
            self,
            __context,
            __promise,
            arg_binaries
        )
    )

async def SimpleService_contain_binary_coro(
    object self,
    object ctx,
    Promise_Set__binary promise,
    binaries
):
    try:
        if ctx is not None:
            result = await self.contain_binary(ctx,
                      binaries)
        else:
            result = await self.contain_binary(
                      binaries)
        result = _module_types.Set__binary(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler contain_binary:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[cset[string]](deref((<_module_types.Set__binary?> result)._cpp_obj)))

cdef api void call_cy_SimpleService_contain_enum(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[_module_types.cAnEnum]]] cPromise,
    unique_ptr[vector[_module_types.cAnEnum]] the_enum
):
    cdef SimpleServiceInterface __iface
    __iface = self
    __promise = Promise_List__AnEnum.create(move(cPromise))
    arg_the_enum = _module_types.List__AnEnum.create(_module_types.move(the_enum))
    __context = None
    if __iface._pass_context_contain_enum:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        SimpleService_contain_enum_coro(
            self,
            __context,
            __promise,
            arg_the_enum
        )
    )

async def SimpleService_contain_enum_coro(
    object self,
    object ctx,
    Promise_List__AnEnum promise,
    the_enum
):
    try:
        if ctx is not None:
            result = await self.contain_enum(ctx,
                      the_enum)
        else:
            result = await self.contain_enum(
                      the_enum)
        result = _module_types.List__AnEnum(result)
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler contain_enum:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[_module_types.cAnEnum]](deref((<_module_types.List__AnEnum?> result)._cpp_obj)))

cdef api void call_cy_DerivedService_get_six(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef DerivedServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if __iface._pass_context_get_six:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        DerivedService_get_six_coro(
            self,
            __context,
            __promise
        )
    )

async def DerivedService_get_six_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.get_six(ctx,)
        else:
            result = await self.get_six()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_six:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

cdef api void call_cy_RederivedService_get_seven(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[int32_t] cPromise
):
    cdef RederivedServiceInterface __iface
    __iface = self
    __promise = Promise_i32.create(move(cPromise))
    __context = None
    if __iface._pass_context_get_seven:
        __context = RequestContext.create(ctx)
    asyncio.get_event_loop().create_task(
        RederivedService_get_seven_coro(
            self,
            __context,
            __promise
        )
    )

async def RederivedService_get_seven_coro(
    object self,
    object ctx,
    Promise_i32 promise
):
    try:
        if ctx is not None:
            result = await self.get_seven(ctx,)
        else:
            result = await self.get_seven()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler get_seven:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(<int32_t> result)

