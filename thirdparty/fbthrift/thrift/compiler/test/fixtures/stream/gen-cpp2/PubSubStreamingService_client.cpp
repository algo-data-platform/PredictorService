/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "src/gen-cpp2/PubSubStreamingServiceAsyncClient.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/protocol/Serializer.h>
#include <thrift/lib/cpp2/transport/core/ThriftChannelIf.h>

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<2, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_returnstream_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_returnstream_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_takesstream_pargs;
typedef apache::thrift::ThriftPresult<true> PubSubStreamingService_takesstream_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I64, int64_t*>>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_different_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRING, std::string*>>
    > PubSubStreamingService_different_presult;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<false>,
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>>
    > PubSubStreamingService_normalthrows_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>> PubSubStreamingService_normalthrows_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_streamthrows_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>>
    > PubSubStreamingService_streamthrows_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_boththrows_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>>
    > PubSubStreamingService_boththrows_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_I32, int32_t*>> PubSubStreamingService_responseandstreamthrows_pargs;
typedef apache::thrift::ThriftPResultStream<
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>>, 
    apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_I32, int32_t*>, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::cpp2::FooEx>>
    > PubSubStreamingService_responseandstreamthrows_presult;

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::returnstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.returnstream", &headerAndConnContext->connContext);
  PubSubStreamingService_returnstream_pargs args;
  args.get<0>().value = &i32_from;
  args.get<1>().value = &i32_to;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "returnstream", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::takesstreamT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.takesstream", &headerAndConnContext->connContext);
  PubSubStreamingService_takesstream_pargs::FieldsType args;
  args.get<0>().value = &other_param;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "takesstream", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::differentT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.different", &headerAndConnContext->connContext);
  PubSubStreamingService_different_pargs::FieldsType args;
  args.get<0>().value = &firstparam;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "different", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::normalthrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.normalthrows", &headerAndConnContext->connContext);
  PubSubStreamingService_normalthrows_pargs::FieldsType args;
  #error Service functions don't allow stream input yet
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "normalthrows", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::streamthrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.streamthrows", &headerAndConnContext->connContext);
  PubSubStreamingService_streamthrows_pargs args;
  args.get<0>().value = &foo;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "streamthrows", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::boththrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.boththrows", &headerAndConnContext->connContext);
  PubSubStreamingService_boththrows_pargs args;
  args.get<0>().value = &foo;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "boththrows", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PubSubStreamingServiceAsyncClient::responseandstreamthrowsT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "PubSubStreamingService.responseandstreamthrows", &headerAndConnContext->connContext);
  PubSubStreamingService_responseandstreamthrows_pargs args;
  args.get<0>().value = &foo;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "responseandstreamthrows", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}



void PubSubStreamingServiceAsyncClient::returnstream(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  returnstreamImpl(false, rpcOptions, std::move(callback), i32_from, i32_to);
}

void PubSubStreamingServiceAsyncClient::returnstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i32_from, int32_t i32_to) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      returnstreamT(&writer, useSync, rpcOptions, std::move(callback), i32_from, i32_to);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_returnstream(rpcOptions, i32_from, i32_to);
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE);
  returnstreamImpl(true, rpcOptions, std::move(callback), i32_from, i32_to);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_returnstream(_returnState);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_returnstream(rpcOptions, i32_from, i32_to);
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_returnstream(int32_t i32_from, int32_t i32_to) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_returnstream(rpcOptions, i32_from, i32_to);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  folly::Promise<apache::thrift::SemiStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_returnstream, channel_);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_returnstream, channel_);
  auto callback = std::move(callbackAndFuture.first);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  folly::Promise<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_returnstream, channel_);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_returnstream(apache::thrift::RpcOptions& rpcOptions, int32_t i32_from, int32_t i32_to) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_returnstream, channel_);
  auto callback = std::move(callbackAndFuture.first);
  returnstream(rpcOptions, std::move(callback), i32_from, i32_to);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::returnstream(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t i32_from, int32_t i32_to) {
  returnstream(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), i32_from, i32_to);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_returnstream(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_returnstream_presult;
  constexpr auto const fname = "returnstream";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_returnstream(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<int32_t> _return;
  auto ew = recv_wrapped_returnstream(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_instance_returnstream(::apache::thrift::ClientReceiveState& state) {
  return recv_returnstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_returnstream(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_returnstream(_return, state);
}

void PubSubStreamingServiceAsyncClient::takesstream(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  takesstreamImpl(false, rpcOptions, std::move(callback), std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::takesstream(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  takesstreamImpl(false, rpcOptions, std::move(callback), std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::takesstreamImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), std::move(instream), other_param);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      takesstreamT(&writer, useSync, rpcOptions, std::move(callback), std::move(instream), other_param);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_takesstream(rpcOptions, std::move(instream), other_param);
}

void PubSubStreamingServiceAsyncClient::sync_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  takesstreamImpl(true, rpcOptions, std::move(callback), std::move(instream), other_param);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_takesstream(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_takesstream(rpcOptions, std::move(instream), other_param);
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_takesstream(apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_takesstream(rpcOptions, std::move(instream), other_param);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_takesstream, channel_);
  auto callback = std::move(callbackAndFuture.first);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_takesstream, channel_);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_takesstream(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_takesstream, channel_);
  auto callback = std::move(callbackAndFuture.first);
  takesstream(rpcOptions, std::move(callback), std::move(instream), other_param);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::takesstream(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> instream, int32_t other_param) {
  takesstream(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(instream), other_param);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_takesstream_presult;
  constexpr auto const fname = "takesstream";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_takesstream(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_takesstream(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_takesstream(::apache::thrift::ClientReceiveState& state) {
  recv_takesstream(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_takesstream(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_takesstream(state);
}

void PubSubStreamingServiceAsyncClient::different(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  differentImpl(false, rpcOptions, std::move(callback), std::move(foo), firstparam);
}

void PubSubStreamingServiceAsyncClient::different(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  differentImpl(false, rpcOptions, std::move(callback), std::move(foo), firstparam);
}

void PubSubStreamingServiceAsyncClient::differentImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      differentT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo), firstparam);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      differentT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo), firstparam);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::sync_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_different(rpcOptions, std::move(foo), firstparam);
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::sync_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_STREAMING_RESPONSE);
  differentImpl(true, rpcOptions, std::move(callback), std::move(foo), firstparam);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_different(_returnState);
}

folly::Future<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::future_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_different(rpcOptions, std::move(foo), firstparam);
}

folly::SemiFuture<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::semifuture_different(apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_different(rpcOptions, std::move(foo), firstparam);
}

folly::Future<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::future_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  folly::Promise<apache::thrift::SemiStream<std::string>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<std::string>>>(std::move(_promise), recv_wrapped_different, channel_);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<std::string>> PubSubStreamingServiceAsyncClient::semifuture_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_different, channel_);
  auto callback = std::move(callbackAndFuture.first);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  folly::Promise<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<std::string>>>(std::move(_promise), recv_wrapped_different, channel_);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<std::string>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_different(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_different, channel_);
  auto callback = std::move(callbackAndFuture.first);
  different(rpcOptions, std::move(callback), std::move(foo), firstparam);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::different(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo, int64_t firstparam) {
  different(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo), firstparam);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_different(apache::thrift::SemiStream<std::string>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_different_presult;
  constexpr auto const fname = "different";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::recv_different(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<std::string> _return;
  auto ew = recv_wrapped_different(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<std::string> PubSubStreamingServiceAsyncClient::recv_instance_different(::apache::thrift::ClientReceiveState& state) {
  return recv_different(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_different(apache::thrift::SemiStream<std::string>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_different(_return, state);
}

void PubSubStreamingServiceAsyncClient::normalthrows(std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  normalthrowsImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::normalthrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  normalthrowsImpl(false, rpcOptions, std::move(callback), std::move(foo));
}

void PubSubStreamingServiceAsyncClient::normalthrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, apache::thrift::Stream<int32_t> foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      normalthrowsT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      normalthrowsT(&writer, useSync, rpcOptions, std::move(callback), std::move(foo));
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void PubSubStreamingServiceAsyncClient::sync_normalthrows(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_normalthrows(rpcOptions, std::move(foo));
}

void PubSubStreamingServiceAsyncClient::sync_normalthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE);
  normalthrowsImpl(true, rpcOptions, std::move(callback), std::move(foo));
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_normalthrows(_returnState);
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_normalthrows(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_normalthrows(rpcOptions, std::move(foo));
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_normalthrows(apache::thrift::Stream<int32_t> foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_normalthrows(rpcOptions, std::move(foo));
}

folly::Future<folly::Unit> PubSubStreamingServiceAsyncClient::future_normalthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_normalthrows, channel_);
  normalthrows(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<folly::Unit> PubSubStreamingServiceAsyncClient::semifuture_normalthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_normalthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  normalthrows(rpcOptions, std::move(callback), std::move(foo));
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_normalthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(_promise), recv_wrapped_normalthrows, channel_);
  normalthrows(rpcOptions, std::move(callback), std::move(foo));
  return _future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_normalthrows(apache::thrift::RpcOptions& rpcOptions, apache::thrift::Stream<int32_t> foo) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_normalthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  normalthrows(rpcOptions, std::move(callback), std::move(foo));
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::normalthrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, apache::thrift::Stream<int32_t> foo) {
  normalthrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), std::move(foo));
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_normalthrows(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_normalthrows_presult;
  constexpr auto const fname = "normalthrows";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PubSubStreamingServiceAsyncClient::recv_normalthrows(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_normalthrows(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PubSubStreamingServiceAsyncClient::recv_instance_normalthrows(::apache::thrift::ClientReceiveState& state) {
  recv_normalthrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_normalthrows(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_normalthrows(state);
}

void PubSubStreamingServiceAsyncClient::streamthrows(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  streamthrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::streamthrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  streamthrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::streamthrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      streamthrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      streamthrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_streamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_streamthrows(rpcOptions, foo);
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_streamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE);
  streamthrowsImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_streamthrows(_returnState);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_streamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_streamthrows(rpcOptions, foo);
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_streamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_streamthrows(rpcOptions, foo);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_streamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<apache::thrift::SemiStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_streamthrows, channel_);
  streamthrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_streamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_streamthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  streamthrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_streamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_streamthrows, channel_);
  streamthrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_streamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_streamthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  streamthrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::streamthrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t foo) {
  streamthrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_streamthrows(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_streamthrows_presult;
  constexpr auto const fname = "streamthrows";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_streamthrows(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<int32_t> _return;
  auto ew = recv_wrapped_streamthrows(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_instance_streamthrows(::apache::thrift::ClientReceiveState& state) {
  return recv_streamthrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_streamthrows(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_streamthrows(_return, state);
}

void PubSubStreamingServiceAsyncClient::boththrows(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  boththrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::boththrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  boththrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::boththrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      boththrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      boththrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_boththrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_boththrows(rpcOptions, foo);
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::sync_boththrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE);
  boththrowsImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_boththrows(_returnState);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_boththrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_boththrows(rpcOptions, foo);
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_boththrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_boththrows(rpcOptions, foo);
}

folly::Future<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::future_boththrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<apache::thrift::SemiStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_boththrows, channel_);
  boththrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<apache::thrift::SemiStream<int32_t>> PubSubStreamingServiceAsyncClient::semifuture_boththrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_boththrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  boththrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_boththrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::SemiStream<int32_t>>>(std::move(_promise), recv_wrapped_boththrows, channel_);
  boththrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::SemiStream<int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_boththrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_boththrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  boththrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::boththrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t foo) {
  boththrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_boththrows(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_boththrows_presult;
  constexpr auto const fname = "boththrows";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_boththrows(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::SemiStream<int32_t> _return;
  auto ew = recv_wrapped_boththrows(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::SemiStream<int32_t> PubSubStreamingServiceAsyncClient::recv_instance_boththrows(::apache::thrift::ClientReceiveState& state) {
  return recv_boththrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_boththrows(apache::thrift::SemiStream<int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_boththrows(_return, state);
}

void PubSubStreamingServiceAsyncClient::responseandstreamthrows(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  responseandstreamthrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  responseandstreamthrowsImpl(false, rpcOptions, std::move(callback), foo);
}

void PubSubStreamingServiceAsyncClient::responseandstreamthrowsImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t foo) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      responseandstreamthrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      responseandstreamthrowsT(&writer, useSync, rpcOptions, std::move(callback), foo);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

apache::thrift::ResponseAndSemiStream<int32_t,int32_t> PubSubStreamingServiceAsyncClient::sync_responseandstreamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_responseandstreamthrows(rpcOptions, foo);
}

apache::thrift::ResponseAndSemiStream<int32_t,int32_t> PubSubStreamingServiceAsyncClient::sync_responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE);
  responseandstreamthrowsImpl(true, rpcOptions, std::move(callback), foo);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  return recv_responseandstreamthrows(_returnState);
}

folly::Future<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>> PubSubStreamingServiceAsyncClient::future_responseandstreamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_responseandstreamthrows(rpcOptions, foo);
}

folly::SemiFuture<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>> PubSubStreamingServiceAsyncClient::semifuture_responseandstreamthrows(int32_t foo) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_responseandstreamthrows(rpcOptions, foo);
}

folly::Future<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>> PubSubStreamingServiceAsyncClient::future_responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>>>(std::move(_promise), recv_wrapped_responseandstreamthrows, channel_);
  responseandstreamthrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>> PubSubStreamingServiceAsyncClient::semifuture_responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_responseandstreamthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  responseandstreamthrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_future_responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  folly::Promise<std::pair<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>>>(std::move(_promise), recv_wrapped_responseandstreamthrows, channel_);
  responseandstreamthrows(rpcOptions, std::move(callback), foo);
  return _future;
}

folly::SemiFuture<std::pair<apache::thrift::ResponseAndSemiStream<int32_t,int32_t>, std::unique_ptr<apache::thrift::transport::THeader>>> PubSubStreamingServiceAsyncClient::header_semifuture_responseandstreamthrows(apache::thrift::RpcOptions& rpcOptions, int32_t foo) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_responseandstreamthrows, channel_);
  auto callback = std::move(callbackAndFuture.first);
  responseandstreamthrows(rpcOptions, std::move(callback), foo);
  return std::move(callbackAndFuture.second);
}

void PubSubStreamingServiceAsyncClient::responseandstreamthrows(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t foo) {
  responseandstreamthrows(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), foo);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_wrapped_responseandstreamthrows(apache::thrift::ResponseAndSemiStream<int32_t,int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = PubSubStreamingService_responseandstreamthrows_presult;
  constexpr auto const fname = "responseandstreamthrows";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

apache::thrift::ResponseAndSemiStream<int32_t,int32_t> PubSubStreamingServiceAsyncClient::recv_responseandstreamthrows(::apache::thrift::ClientReceiveState& state) {
  apache::thrift::ResponseAndSemiStream<int32_t,int32_t> _return;
  auto ew = recv_wrapped_responseandstreamthrows(_return, state);
  if (ew) {
    ew.throw_exception();
  }
  return _return;
}

apache::thrift::ResponseAndSemiStream<int32_t,int32_t> PubSubStreamingServiceAsyncClient::recv_instance_responseandstreamthrows(::apache::thrift::ClientReceiveState& state) {
  return recv_responseandstreamthrows(state);
}

folly::exception_wrapper PubSubStreamingServiceAsyncClient::recv_instance_wrapped_responseandstreamthrows(apache::thrift::ResponseAndSemiStream<int32_t,int32_t>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_responseandstreamthrows(_return, state);
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
