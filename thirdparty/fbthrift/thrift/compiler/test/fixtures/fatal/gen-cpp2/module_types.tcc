/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/fatal/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  iprot->readFieldBegin(_fname, _ftype, fid);
  if (_ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ui();
          iprot->readI32(this->mutable_ui());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud();
          iprot->readDouble(this->mutable_ud());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->set_us();
          iprot->readString(this->mutable_us());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->mutable_ue());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (UNLIKELY(_ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t union1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union1");
  switch(this->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->writeFieldBegin("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->writeFieldBegin("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->writeFieldBegin("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->writeFieldBegin("ue", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->get_ue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  iprot->readFieldBegin(_fname, _ftype, fid);
  if (_ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ui_2();
          iprot->readI32(this->mutable_ui_2());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud_2();
          iprot->readDouble(this->mutable_ud_2());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->set_us_2();
          iprot->readString(this->mutable_us_2());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ue_2();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->mutable_ue_2());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (UNLIKELY(_ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t union2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union2");
  switch(this->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->writeFieldBegin("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->writeFieldBegin("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->writeFieldBegin("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->writeFieldBegin("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->get_ue_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union3::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  iprot->readFieldBegin(_fname, _ftype, fid);
  if (_ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ui_3();
          iprot->readI32(this->mutable_ui_3());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_ud_3();
          iprot->readDouble(this->mutable_ud_3());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->set_us_3();
          iprot->readString(this->mutable_us_3());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ue_3();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->mutable_ue_3());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (UNLIKELY(_ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t union3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union3");
  switch(this->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->writeFieldBegin("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_ui_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->writeFieldBegin("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_ud_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->writeFieldBegin("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_us_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->writeFieldBegin("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->get_ue_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structA::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->b);
          this->__isset.b = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t structA::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structA");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t unionA::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  iprot->readFieldBegin(_fname, _ftype, fid);
  if (_ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_i();
          iprot->readI32(this->mutable_i());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          this->set_d();
          iprot->readDouble(this->mutable_d());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          this->set_s();
          iprot->readString(this->mutable_s());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_e();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->mutable_e());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          this->set_a();
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &this->mutable_a());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (UNLIKELY(_ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t unionA::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(this->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &this->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(this->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(this->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(this->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &this->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("unionA");
  switch(this->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_i());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(this->get_d());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->writeFieldBegin("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(this->get_s());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->get_e());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &this->get_a());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structB::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          iprot->readDouble(this->c);
          this->__isset.c = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          iprot->readBool(this->d);
          this->__isset.d = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t structB::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structB");
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structC::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->b);
          this->__isset.b = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          iprot->readDouble(this->c);
          this->__isset.c = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          iprot->readBool(this->d);
          this->__isset.d = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->e);
          this->__isset.e = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::read(*iprot, this->f);
          this->__isset.f = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->g);
          this->__isset.g = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &this->h);
          this->__isset.h = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &this->i);
          this->__isset.i = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->j = std::vector<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->j);
          this->__isset.j = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->j1 = std::vector<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->j1);
          this->__isset.j1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->j2 = std::vector< ::test_cpp2::cpp_reflection::enum1>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::test_cpp2::cpp_reflection::enum1>>::read(*iprot, this->j2);
          this->__isset.j2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->j3 = std::vector< ::test_cpp2::cpp_reflection::structA>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::read(*iprot, this->j3);
          this->__isset.j3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->k = std::set<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->k);
          this->__isset.k = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->k1 = std::set<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->k1);
          this->__isset.k1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->k2 = std::set< ::test_cpp2::cpp_reflection::enum2>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, std::set< ::test_cpp2::cpp_reflection::enum2>>::read(*iprot, this->k2);
          this->__isset.k2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->k3 = std::set< ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->k3);
          this->__isset.k3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->l = std::map<int32_t, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::read(*iprot, this->l);
          this->__isset.l = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->l1 = std::map<int32_t, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::read(*iprot, this->l1);
          this->__isset.l1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->l2 = std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>, std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>>::read(*iprot, this->l2);
          this->__isset.l2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->l3 = std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->l3);
          this->__isset.l3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->m1 = std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>>::read(*iprot, this->m1);
          this->__isset.m1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->m2 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>>::read(*iprot, this->m2);
          this->__isset.m2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->m3 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->m3);
          this->__isset.m3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->n1 = std::map<std::string, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->n1);
          this->__isset.n1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->n2 = std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>, std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>>::read(*iprot, this->n2);
          this->__isset.n2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->n3 = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->n3);
          this->__isset.n3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->o1 = std::map< ::test_cpp2::cpp_reflection::structA, int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::structA, int32_t>>::read(*iprot, this->o1);
          this->__isset.o1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->o2 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>>::read(*iprot, this->o2);
          this->__isset.o2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->o3 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->o3);
          this->__isset.o3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t structC::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &this->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &this->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->j);
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->j1);
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->j2);
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->j3);
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->k);
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->k1);
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, std::set< ::test_cpp2::cpp_reflection::enum2>>::serializedSize<false>(*prot_, this->k2);
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->k3);
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->l);
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->l1);
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>, std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->l2);
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->l3);
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>>::serializedSize<false>(*prot_, this->m1);
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>>::serializedSize<false>(*prot_, this->m2);
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->m3);
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->n1);
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>, std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->n2);
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->n3);
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::structA, int32_t>>::serializedSize<false>(*prot_, this->o1);
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->o2);
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->o3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &this->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &this->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->j);
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->j1);
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->j2);
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->j3);
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->k);
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->k1);
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, std::set< ::test_cpp2::cpp_reflection::enum2>>::serializedSize<false>(*prot_, this->k2);
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->k3);
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->l);
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->l1);
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>, std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->l2);
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->l3);
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>>::serializedSize<false>(*prot_, this->m1);
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>>::serializedSize<false>(*prot_, this->m2);
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->m3);
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->n1);
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>, std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->n2);
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->n3);
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::structA, int32_t>>::serializedSize<false>(*prot_, this->o1);
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>>::serializedSize<false>(*prot_, this->o2);
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->o3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structC");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->e);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_I32, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::write(*prot_, this->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->g);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &this->h);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &this->i);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->j);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->j1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, std::vector< ::test_cpp2::cpp_reflection::enum1>>::write(*prot_, this->j2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::write(*prot_, this->j3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->k);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k1", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->k1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k2", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>, std::set< ::test_cpp2::cpp_reflection::enum2>>::write(*prot_, this->k2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k3", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->k3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::write(*prot_, this->l);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::write(*prot_, this->l1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>, std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>>::write(*prot_, this->l2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->l3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>>::write(*prot_, this->m1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>>::write(*prot_, this->m2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->m3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->n1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::enumeration>, std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>>::write(*prot_, this->n2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->n3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::test_cpp2::cpp_reflection::structA, int32_t>>::write(*prot_, this->o1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::enumeration>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>>::write(*prot_, this->o2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->o3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;
  bool isset_field3 = false;

  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->field0);
          isset_field0 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::read(*iprot, this->field3);
          isset_field3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  if (!isset_field0) {
    TProtocolException::throwMissingRequiredField("field0", "struct1");
  }
  if (!isset_field3) {
    TProtocolException::throwMissingRequiredField("field3", "struct1");
  }
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->field3);
  if (this->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->field3);
  if (this->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct1");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field0);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.field4) {
    xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->field4);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->fieldA);
          this->__isset.fieldA = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->fieldB);
          this->__isset.fieldB = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->fieldC);
          this->__isset.fieldC = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::read(*iprot, this->fieldD);
          this->__isset.fieldD = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->fieldE);
          this->__isset.fieldE = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldF);
          this->__isset.fieldF = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &this->fieldG);
          this->__isset.fieldG = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &this->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &this->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct2");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::write(*prot_, this->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &this->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct3::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->fieldA);
          this->__isset.fieldA = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->fieldB);
          this->__isset.fieldB = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->fieldC);
          this->__isset.fieldC = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::read(*iprot, this->fieldD);
          this->__isset.fieldD = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &this->fieldE);
          this->__isset.fieldE = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldF);
          this->__isset.fieldF = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &this->fieldG);
          this->__isset.fieldG = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &this->fieldH);
          this->__isset.fieldH = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->fieldI = std::vector<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->fieldI);
          this->__isset.fieldI = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->fieldJ = std::vector<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->fieldJ);
          this->__isset.fieldJ = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->fieldK = std::vector<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->fieldK);
          this->__isset.fieldK = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->fieldL = std::vector< ::test_cpp2::cpp_reflection::structA>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::read(*iprot, this->fieldL);
          this->__isset.fieldL = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->fieldM = std::set<int32_t>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->fieldM);
          this->__isset.fieldM = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->fieldN = std::set<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->fieldN);
          this->__isset.fieldN = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->fieldO = std::set<std::string>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->fieldO);
          this->__isset.fieldO = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->fieldP = std::set< ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->fieldP);
          this->__isset.fieldP = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->fieldQ = std::map<std::string,  ::test_cpp2::cpp_reflection::structA>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structA>>::read(*iprot, this->fieldQ);
          this->__isset.fieldQ = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->fieldR = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::read(*iprot, this->fieldR);
          this->__isset.fieldR = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &this->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &this->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->fieldI);
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->fieldJ);
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->fieldK);
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->fieldL);
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->fieldM);
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->fieldN);
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->fieldO);
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->fieldP);
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->fieldQ);
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->fieldR);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::serializedSize<false>(*prot_, this->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &this->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &this->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &this->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->fieldI);
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->fieldJ);
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->fieldK);
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->fieldL);
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->fieldM);
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->fieldN);
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->fieldO);
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->fieldP);
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structA>>::serializedSize<false>(*prot_, this->fieldQ);
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::serializedSize<false>(*prot_, this->fieldR);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct3");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum2>::write(*prot_, this->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &this->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &this->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &this->fieldH);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->fieldI);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->fieldJ);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->fieldK);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::test_cpp2::cpp_reflection::structA>>::write(*prot_, this->fieldL);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->fieldM);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->fieldN);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->fieldO);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->fieldP);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structA>>::write(*prot_, this->fieldQ);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::test_cpp2::cpp_reflection::structB>>::write(*prot_, this->fieldR);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct4::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->field0);
          isset_field0 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          std::unique_ptr< ::test_cpp2::cpp_reflection::structA> ptr = std::make_unique< ::test_cpp2::cpp_reflection::structA>();
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, ptr.get());
          this->field3 = std::move(ptr);
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  if (!isset_field0) {
    TProtocolException::throwMissingRequiredField("field0", "struct4");
  }
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct4::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  if (this->field3) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, this->field3.get());
  }
  else {
    xfer += prot_->serializedStructSize("structA");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  if (this->field3) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, this->field3.get());
  }
  else {
    xfer += prot_->serializedStructSize("structA");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct4");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field0);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 6);
  if (this->field3) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, this->field3.get());
  }
  else {
    xfer += prot_->writeStructBegin("structA");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct5::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->field0);
          isset_field0 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  if (!isset_field0) {
    TProtocolException::throwMissingRequiredField("field0", "struct5");
  }
  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct5::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->field0);
  if (this->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct5");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->field0);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::test_cpp2::cpp_reflection::enum1>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_binary::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readBinary(this->bi);
          this->__isset.bi = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct_binary::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_binary");
  xfer += prot_->writeFieldBegin("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->bi);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t dep_A_struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_B_struct>::read(iprot, &this->b);
          this->__isset.b = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_C_struct>::read(iprot, &this->c);
          this->__isset.c = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->i_a);
          this->__isset.i_a = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t dep_A_struct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("dep_A_struct");
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_B_struct>::serializedSize(prot_, &this->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_C_struct>::serializedSize(prot_, &this->c);
  xfer += prot_->serializedFieldSize("i_a", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->i_a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t dep_A_struct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("dep_A_struct");
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_B_struct>::serializedSizeZC(prot_, &this->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_C_struct>::serializedSizeZC(prot_, &this->c);
  xfer += prot_->serializedFieldSize("i_a", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->i_a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t dep_A_struct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("dep_A_struct");
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_B_struct>::write(prot_, &this->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::dep_C_struct>::write(prot_, &this->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("i_a", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->i_a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t annotated::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->a);
          this->__isset.a = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t annotated::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("annotated");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union_with_special_names::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  iprot->readFieldBegin(_fname, _ftype, fid);
  if (_ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_get();
          iprot->readI32(this->mutable_get());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_getter();
          iprot->readI32(this->mutable_getter());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_lists();
          iprot->readI32(this->mutable_lists());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_maps();
          iprot->readI32(this->mutable_maps());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_name();
          iprot->readI32(this->mutable_name());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_name_to_value();
          iprot->readI32(this->mutable_name_to_value());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_names();
          iprot->readI32(this->mutable_names());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_prefix_tree();
          iprot->readI32(this->mutable_prefix_tree());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_sets();
          iprot->readI32(this->mutable_sets());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_setter();
          iprot->readI32(this->mutable_setter());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_str();
          iprot->readI32(this->mutable_str());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_strings();
          iprot->readI32(this->mutable_strings());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_type();
          iprot->readI32(this->mutable_type());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_value();
          iprot->readI32(this->mutable_value());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_value_to_name();
          iprot->readI32(this->mutable_value_to_name());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_values();
          iprot->readI32(this->mutable_values());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_id();
          iprot->readI32(this->mutable_id());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_ids();
          iprot->readI32(this->mutable_ids());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_descriptor();
          iprot->readI32(this->mutable_descriptor());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_descriptors();
          iprot->readI32(this->mutable_descriptors());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_key();
          iprot->readI32(this->mutable_key());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_keys();
          iprot->readI32(this->mutable_keys());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_annotation();
          iprot->readI32(this->mutable_annotation());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_annotations();
          iprot->readI32(this->mutable_annotations());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_member();
          iprot->readI32(this->mutable_member());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_members();
          iprot->readI32(this->mutable_members());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_field();
          iprot->readI32(this->mutable_field());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          this->set_fields();
          iprot->readI32(this->mutable_fields());
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (UNLIKELY(_ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t union_with_special_names::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(this->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(this->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(this->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(this->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(this->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(this->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(this->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(this->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(this->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(this->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(this->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(this->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(this->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(this->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(this->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(this->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(this->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(this->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(this->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(this->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(this->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(this->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(this->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(this->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(this->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(this->get_members());
      break;
    }
    case union_with_special_names::Type::field:
    {
      xfer += prot_->serializedFieldSize("field", apache::thrift::protocol::T_I32, 27);
      xfer += prot_->serializedSizeI32(this->get_field());
      break;
    }
    case union_with_special_names::Type::fields:
    {
      xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_I32, 28);
      xfer += prot_->serializedSizeI32(this->get_fields());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(this->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(this->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(this->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(this->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(this->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(this->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(this->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(this->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(this->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(this->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(this->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(this->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(this->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(this->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(this->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(this->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(this->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(this->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(this->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(this->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(this->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(this->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(this->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(this->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(this->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(this->get_members());
      break;
    }
    case union_with_special_names::Type::field:
    {
      xfer += prot_->serializedFieldSize("field", apache::thrift::protocol::T_I32, 27);
      xfer += prot_->serializedSizeI32(this->get_field());
      break;
    }
    case union_with_special_names::Type::fields:
    {
      xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_I32, 28);
      xfer += prot_->serializedSizeI32(this->get_fields());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union_with_special_names");
  switch(this->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_get());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->writeI32(this->get_getter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->writeI32(this->get_lists());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32(this->get_maps());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->writeI32(this->get_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->writeI32(this->get_name_to_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->writeI32(this->get_names());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->writeI32(this->get_prefix_tree());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->writeI32(this->get_sets());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->writeI32(this->get_setter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->writeI32(this->get_str());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->writeI32(this->get_strings());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->writeI32(this->get_type());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->writeI32(this->get_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->writeI32(this->get_value_to_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->writeI32(this->get_values());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->writeI32(this->get_id());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->writeI32(this->get_ids());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->writeI32(this->get_descriptor());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->writeI32(this->get_descriptors());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->writeI32(this->get_key());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->writeI32(this->get_keys());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->writeI32(this->get_annotation());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->writeI32(this->get_annotations());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->writeI32(this->get_member());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->writeI32(this->get_members());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::field:
    {
      xfer += prot_->writeFieldBegin("field", apache::thrift::protocol::T_I32, 27);
      xfer += prot_->writeI32(this->get_field());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::fields:
    {
      xfer += prot_->writeFieldBegin("fields", apache::thrift::protocol::T_I32, 28);
      xfer += prot_->writeI32(this->get_fields());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_with_special_names::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->get);
          this->__isset.get = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->getter);
          this->__isset.getter = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->lists);
          this->__isset.lists = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->maps);
          this->__isset.maps = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->name);
          this->__isset.name = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->name_to_value);
          this->__isset.name_to_value = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->names);
          this->__isset.names = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->prefix_tree);
          this->__isset.prefix_tree = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->sets);
          this->__isset.sets = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->setter);
          this->__isset.setter = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->str);
          this->__isset.str = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->strings);
          this->__isset.strings = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->value_to_name);
          this->__isset.value_to_name = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->values);
          this->__isset.values = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->ids);
          this->__isset.ids = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->descriptor);
          this->__isset.descriptor = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->descriptors);
          this->__isset.descriptors = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->keys);
          this->__isset.keys = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->annotation);
          this->__isset.annotation = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->annotations);
          this->__isset.annotations = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->member);
          this->__isset.member = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->members);
          this->__isset.members = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->field);
          this->__isset.field = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->fields);
          this->__isset.fields = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct_with_special_names::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(this->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(this->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(this->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(this->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(this->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(this->members);
  xfer += prot_->serializedFieldSize("field", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->fields);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(this->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(this->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(this->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(this->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(this->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(this->members);
  xfer += prot_->serializedFieldSize("field", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field);
  xfer += prot_->serializedFieldSize("fields", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->serializedSizeI32(this->fields);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_with_special_names");
  xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->get);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->getter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->lists);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->maps);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->name_to_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->writeI32(this->names);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(this->prefix_tree);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->writeI32(this->sets);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->setter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->str);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->writeI32(this->strings);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->writeI32(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->writeI32(this->value_to_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(this->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(this->ids);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(this->descriptor);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->writeI32(this->descriptors);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(this->keys);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->writeI32(this->annotation);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->writeI32(this->annotations);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(this->member);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->writeI32(this->members);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->writeI32(this->field);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fields", apache::thrift::protocol::T_I32, 28);
  xfer += prot_->writeI32(this->fields);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_with_indirections::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCurrentPosition().getCurrentPosition();
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (iprot->kUsesFieldNames()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->real);
          this->__isset.real = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->fake);
          this->__isset.fake = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->number.number);
          this->__isset.number = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          iprot->readI32(this->result.foo().result());
          this->__isset.result = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          iprot->readString(this->phrase.phrase);
          this->__isset.phrase = true;
        } else {
          iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        iprot->skip(_ftype);
        break;
      }
    }
    iprot->readFieldEnd();
  }
  iprot->readStructEnd();

  return iprot->getCurrentPosition().getCurrentPosition() - _xferStart;
}

template <class Protocol_>
uint32_t struct_with_indirections::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_indirections");
  xfer += prot_->serializedFieldSize("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->real);
  xfer += prot_->serializedFieldSize("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->fake);
  xfer += prot_->serializedFieldSize("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->number.number);
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->result.foo().result());
  xfer += prot_->serializedFieldSize("phrase", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->phrase.phrase);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_indirections::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_indirections");
  xfer += prot_->serializedFieldSize("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(this->real);
  xfer += prot_->serializedFieldSize("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->fake);
  xfer += prot_->serializedFieldSize("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->number.number);
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->result.foo().result());
  xfer += prot_->serializedFieldSize("phrase", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->phrase.phrase);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_indirections::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_with_indirections");
  xfer += prot_->writeFieldBegin("real", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(this->real);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fake", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->fake);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("number", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->number.number);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->result.foo().result());
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("phrase", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->phrase.phrase);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
