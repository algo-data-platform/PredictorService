# thrift 传输方式
enumclass string ThriftTransport
  HEADER
  RSOCKET
  HTTP2

# 服务注册类型
enumclass string RegistryType
  CONSUL
  AGENT

# 服务状态 
enumclass string ServerStatus
  AVAILABLE
  UNAVAILABLE

# 服务应用层协议
enumclass string ServerProtocol 
  HTTP
  THRIFT
  REDIS

# 服务调用负载均衡策略
enumclass string LoadBalanceMethod
  RANDOM
  ROUNDROBIN
  LOCALFIRST
  CONSISTENT
  CONFIGURABLE_WEIGHT
  ACTIVE_WEIGHT
  USER_DEFINED
  IPRANGEFIRST
  STATIC_WEIGHT
  IDCFIRST

# 服务对外提供地址
class ServerAddress
  const std::string host
  uint16_t port = 0

class BalanceLocalFirstConfig
  # 本地 ip 地址
  const std::string local_ip
  # 本地机房认定 ip 差值范围
  int diff_range = 256

enumclass int ShardType
  ALL
  LEADER
  FOLLOWER

# 消费服务参数
class ClientOption
  const std::string service_name
  # 仅仅在 shard 类型的服务调用时生效
  uint32_t shard_id = 4294967295 
  int64_t partition_hash = 0
  bool route_to_edge_node = false
  const ShardType shard_type = ShardType::LEADER
  const ServerProtocol protocol
  const LoadBalanceMethod load_balance
  # 可多选参数，如果提供则不进行服务发现、负载均衡等策略
  const ServerAddress target_server_address
  int timeout_ms = 0
  const std::string user_balance
  const BalanceLocalFirstConfig local_first_config
  # 创建连接池时默认是一个host:port 创建的连接数
  # 默认 0 是 IO 线程池数量个
  int max_conn_per_server = 0
  # thrift request compress method. 
  # 0 - no compress, 1 - zlib, 3 - snappy, 5 - zstd
  uint16_t thrift_compression_method = 3
  const std::string idc
  const std::string dc = "default"

# 消费服务参数
class ServerOption
  const std::string service_name
  const ServerAddress server_address
  bool reuse_port = false

# 服务 entity 
class Server
  const std::string host
  uint16_t port
  const std::string service_name
  const ServerProtocol protocol=ServerProtocol::THRIFT
  const ServerStatus status=ServerStatus::UNAVAILABLE
  @SR(Idc|optional)
  const std::string idc
  @SR(Dc|optional)
  const std::string dc = "default"
  # 用来 check 服务的状态是否可信
  uint64_t update_time = 0
  int weight = 1
  # host 对应的 ip int
  @SR(HostLong|optional)
  uint32_t host_long = 0
  const std::vector<uint32_t> shard_list
  @SR(AvailableShardList|optional)
  const std::vector<uint32_t> available_shard_list
  @SR(FollowerShardList|optional)
  const std::vector<uint32_t> follower_shard_list
  @SR(FollowerAvailableShardList|optional)
  const std::vector<uint32_t> follower_available_shard_list
  # 扩展 other_settings 信息
  const "std::unordered_map<std::string, std::string>" other_settings
  @SR(IsEdgeNode|optional)
  bool is_edge_node = false
  @SR(PartitionList|optional)
  const std::vector<int64_t> partition_list

# 服务 router 配置信息
class ServiceRouterConfig
  int ttl_in_ms = 3000
  const LoadBalanceMethod load_balance=LoadBalanceMethod::RANDOM
  int total_shards = 0
  int pull_interval = 3

# 服务整体配置 entity
class ServiceConfig
  const ServiceRouterConfig router
  const "std::unordered_map<std::string, std::string>" configs

class Service
  const ServiceConfig config
  const "std::unordered_map<std::string, Server>" nodes

# thrift 调用重试策略
class ThriftRetryOption
  int connection_retry = 0
  int timeout_retry = 0
